(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', 'kmem-js', 'klogger-js', 'korio-js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('kmem-js'), require('klogger-js'), require('korio-js'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'korau-atrac3plus-js'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'korau-atrac3plus-js'.");
    }
    if (typeof this['kmem-js'] === 'undefined') {
      throw new Error("Error loading module 'korau-atrac3plus-js'. Its dependency 'kmem-js' was not found. Please, check whether 'kmem-js' is loaded prior to 'korau-atrac3plus-js'.");
    }
    if (typeof this['klogger-js'] === 'undefined') {
      throw new Error("Error loading module 'korau-atrac3plus-js'. Its dependency 'klogger-js' was not found. Please, check whether 'klogger-js' is loaded prior to 'korau-atrac3plus-js'.");
    }
    if (typeof this['korio-js'] === 'undefined') {
      throw new Error("Error loading module 'korau-atrac3plus-js'. Its dependency 'korio-js' was not found. Please, check whether 'korio-js' is loaded prior to 'korau-atrac3plus-js'.");
    }
    root['korau-atrac3plus-js'] = factory(typeof this['korau-atrac3plus-js'] === 'undefined' ? {} : this['korau-atrac3plus-js'], kotlin, this['kmem-js'], this['klogger-js'], this['korio-js']);
  }
}(this, function (_, Kotlin, $module$kmem_js, $module$klogger_js, $module$korio_js) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var arraycopy = $module$kmem_js.com.soywiz.kmem.arraycopy_5ukzfm$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var ensureNotNull = Kotlin.ensureNotNull;
  var format = $module$korio_js.com.soywiz.korio.lang.format_e33kwl$;
  var Logger = $module$klogger_js.com.soywiz.klogger.Logger;
  var math = Kotlin.kotlin.math;
  var arraycopy_0 = $module$kmem_js.com.soywiz.kmem.arraycopy_lvhpry$;
  var throwUPAE = Kotlin.throwUPAE;
  var signExtend = $module$korio_js.com.soywiz.korio.util.signExtend_dqglrj$;
  var abs = Kotlin.kotlin.math.abs_za3lpa$;
  var get_indices = Kotlin.kotlin.collections.get_indices_m7z4lg$;
  var readS32_le = $module$korio_js.com.soywiz.korio.stream.readS32_le_p2awyq$;
  var readU8 = $module$korio_js.com.soywiz.korio.stream.readU8_p2awyq$;
  var readU16_le = $module$korio_js.com.soywiz.korio.stream.readU16_le_p2awyq$;
  var LogLevel = $module$klogger_js.com.soywiz.klogger.LogLevel;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var extract8 = $module$korio_js.com.soywiz.korio.util.extract8_dqglrj$;
  var toChar = Kotlin.toChar;
  var contentToString = Kotlin.arrayToString;
  var sortedArray = Kotlin.kotlin.collections.sortedArray_j2hqw1$;
  var arraycopy_1 = $module$kmem_js.com.soywiz.kmem.arraycopy_vybhjg$;
  var numberToInt = Kotlin.numberToInt;
  var write16_le = $module$korio_js.com.soywiz.korio.stream.write16_le_n5df9z$;
  var countLeadingZeros = $module$korio_js.com.soywiz.korio.util.countLeadingZeros_s8ev3n$;
  var rint = $module$korio_js.com.soywiz.korio.math.rint_14dthe$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Comparable = Kotlin.kotlin.Comparable;
  var throwCCE = Kotlin.throwCCE;
  function Atrac() {
    Atrac$Companion_getInstance();
    this.gainTab1_0 = new Float32Array(16);
    this.gainTab2_0 = new Float32Array(31);
    this.id2expOffset_0 = 0;
    this.locScale_0 = 0;
    this.locSize_0 = 0;
  }
  var Math_0 = Math;
  Atrac.prototype.initGainCompensation_vux9f0$ = function (id2expOffset, locScale) {
    this.locScale_0 = locScale;
    this.locSize_0 = 1 << locScale;
    this.id2expOffset_0 = id2expOffset;
    for (var i = 0; i <= 15; i++) {
      var tmp$ = this.gainTab1_0;
      var x = id2expOffset - i | 0;
      tmp$[i] = Math_0.pow(2.0, x);
    }
    for (var i_0 = -15; i_0 <= 15; i_0++) {
      var tmp$_0 = this.gainTab2_0;
      var x_0 = -1.0 / this.locSize_0 * i_0;
      tmp$_0[i_0 + 15 | 0] = Math_0.pow(2.0, x_0);
    }
  };
  Atrac.prototype.gainCompensation_l9uvma$ = function (in_0, inOffset, prev, prevOffset, gcNow, gcNext, numSamples, out, outOffset) {
    var tmp$;
    var gcScale = gcNext.numPoints !== 0 ? this.gainTab1_0[gcNext.levCode[0]] : 1.0;
    if (gcNow.numPoints === 0) {
      for (var pos = 0; pos < numSamples; pos++) {
        out[outOffset + pos | 0] = in_0[inOffset + pos | 0] * gcScale + prev[prevOffset + pos | 0];
      }
    }
     else {
      var pos_0 = 0;
      tmp$ = gcNow.numPoints;
      for (var i = 0; i < tmp$; i++) {
        var lastpos = gcNow.locCode[i] << this.locScale_0;
        var lev = this.gainTab1_0[gcNow.levCode[i]];
        var gainInc = this.gainTab2_0[((i + 1 | 0) < gcNow.numPoints ? gcNow.levCode[i + 1 | 0] : this.id2expOffset_0) - gcNow.levCode[i] + 15 | 0];
        while (pos_0 < lastpos) {
          out[outOffset + pos_0 | 0] = (in_0[inOffset + pos_0 | 0] * gcScale + prev[prevOffset + pos_0 | 0]) * lev;
          pos_0 = pos_0 + 1 | 0;
        }
        while (pos_0 < (lastpos + this.locSize_0 | 0)) {
          out[outOffset + pos_0 | 0] = (in_0[inOffset + pos_0 | 0] * gcScale + prev[prevOffset + pos_0 | 0]) * lev;
          lev *= gainInc;
          pos_0 = pos_0 + 1 | 0;
        }
      }
      while (pos_0 < numSamples) {
        out[outOffset + pos_0 | 0] = in_0[inOffset + pos_0 | 0] * gcScale + prev[prevOffset + pos_0 | 0];
        pos_0 = pos_0 + 1 | 0;
      }
    }
    arraycopy(in_0, inOffset + numSamples | 0, prev, prevOffset, numSamples);
  };
  function Atrac$Companion() {
    Atrac$Companion_instance = this;
    this.ff_atrac_sf_table = new Float32Array(64);
    this.qmf_window_0 = new Float32Array(48);
    this.qmf_48tap_half_0 = new Float32Array([-1.461907E-5, -9.205479E-5, -5.615757E-5, 3.011727E-4, 2.422519E-4, -8.52939E-4, -5.205574E-4, 0.002034017, 7.833389E-4, -0.004215386, -7.561499E-4, 0.007840294, -6.116992E-5, -0.01344162, 0.002462682, 0.02173609, -0.007801671, -0.03409022, 0.01880949, 0.05432601, -0.04359638, -0.09938437, 0.1320791, 0.4642416]);
  }
  Atrac$Companion.prototype.generateTables = function () {
    if (this.ff_atrac_sf_table[63] === 0.0) {
      for (var i = 0; i <= 63; i++) {
        var tmp$ = this.ff_atrac_sf_table;
        var x = (i - 15 | 0) / 3.0;
        tmp$[i] = Math_0.pow(2.0, x);
      }
    }
    if (this.qmf_window_0[47] === 0.0) {
      for (var i_0 = 0; i_0 <= 23; i_0++) {
        var s = this.qmf_48tap_half_0[i_0] * 2.0;
        this.qmf_window_0[i_0] = s;
        this.qmf_window_0[47 - i_0 | 0] = s;
      }
    }
  };
  Atrac$Companion.prototype.iqmf_v3qioa$ = function (inlo, inloOffset, inhi, inhiOffset, nIn, out, outOffset, delayBuf, temp) {
    var outOffset_0 = outOffset;
    arraycopy(delayBuf, 0, temp, 0, 46);
    var i = 0;
    while (i < nIn) {
      temp[46 + (2 * i | 0) + 0 | 0] = inlo[inloOffset + i | 0] + inhi[inhiOffset + i | 0];
      temp[46 + (2 * i | 0) + 1 | 0] = inlo[inloOffset + i | 0] - inhi[inhiOffset + i | 0];
      temp[46 + (2 * i | 0) + 2 | 0] = inlo[inloOffset + i + 1 | 0] + inhi[inhiOffset + i + 1 | 0];
      temp[46 + (2 * i | 0) + 3 | 0] = inlo[inloOffset + i + 1 | 0] - inhi[inhiOffset + i + 1 | 0];
      i = i + 2 | 0;
    }
    var p1 = 0;
    for (var j = nIn; j >= 1; j--) {
      var s1 = 0.0;
      var s2 = 0.0;
      var i_0 = 0;
      while (i_0 < 48) {
        s1 += temp[p1 + i_0 | 0] * this.qmf_window_0[i_0];
        s2 += temp[p1 + i_0 + 1 | 0] * this.qmf_window_0[i_0 + 1 | 0];
        i_0 = i_0 + 2 | 0;
      }
      out[outOffset_0 + 0 | 0] = s2;
      out[outOffset_0 + 1 | 0] = s1;
      p1 = p1 + 2 | 0;
      outOffset_0 = outOffset_0 + 2 | 0;
    }
    arraycopy(temp, nIn * 2 | 0, delayBuf, 0, 46);
  };
  Atrac$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Atrac$Companion_instance = null;
  function Atrac$Companion_getInstance() {
    if (Atrac$Companion_instance === null) {
      new Atrac$Companion();
    }
    return Atrac$Companion_instance;
  }
  Atrac.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Atrac',
    interfaces: []
  };
  function Atrac3plusData1() {
    Atrac3plusData1_instance = this;
    this.huff_a01_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 1, 7, 0, 19, 5, 13, 21, 6, 8]);
    this.huff_a01_xlat_8be2vx$ = new Int32Array([0, 3, 64, 192, 16, 48, 4, 12, 1, 80, 208, 112, 240, 196, 20, 52, 76, 28, 60, 65, 193, 49, 5, 13, 195, 19, 7, 15, 68, 204, 17, 67, 51, 84, 116, 220, 252, 113, 21, 77, 205, 29, 211, 199, 55, 63, 212, 244, 92, 124, 81, 209, 241, 69, 197, 53, 221, 61, 83, 115, 243, 71, 23, 119, 79, 207, 31, 85, 245, 125, 215, 95, 255, 213, 117, 93, 253, 87, 247, 223, 127]);
    this.huff_a02_cb_8be2vx$ = new Int32Array([2, 12, 1, 0, 4, 11, 0, 1, 29, 6, 20, 7, 2]);
    this.huff_a02_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 80, 68, 20, 84, 65, 17, 81, 5, 69, 21, 85, 144, 128, 32, 96, 132, 148, 36, 100, 8, 72, 24, 88, 129, 145, 33, 133, 149, 101, 9, 73, 25, 89, 2, 66, 18, 82, 6, 70, 22, 86, 136, 97, 37, 41, 105, 90, 160, 164, 152, 40, 104, 161, 165, 137, 153, 169, 130, 146, 34, 98, 150, 38, 102, 10, 74, 26, 168, 134, 166, 138, 154, 42, 106, 162, 170]);
    this.huff_a03_cb_8be2vx$ = new Int32Array([3, 9, 1, 8, 0, 13, 18, 7, 2]);
    this.huff_a03_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 9, 57, 7, 15, 63, 16, 48, 17, 49, 2, 10, 58, 5, 6, 14, 62, 23, 55, 24, 40, 25, 41, 42, 50, 3, 11, 51, 59, 13, 21, 61, 22, 30, 54, 31, 47, 18, 26, 19, 43, 29, 53, 46, 27, 45]);
    this.huff_a04_cb_8be2vx$ = new Int32Array([2, 3, 2, 4]);
    this.huff_a04_xlat_8be2vx$ = new Int32Array([1, 2, 0, 3, 4, 5]);
    this.huff_a05_cb_8be2vx$ = new Int32Array([3, 12, 1, 3, 5, 8, 12, 23, 72, 68, 31, 2]);
    this.huff_a05_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 17, 241, 15, 31, 255, 32, 224, 225, 2, 242, 14, 30, 47, 48, 208, 33, 18, 34, 226, 3, 13, 46, 238, 254, 239, 64, 192, 49, 193, 209, 50, 210, 19, 35, 227, 243, 4, 244, 12, 28, 29, 45, 237, 253, 62, 222, 63, 223, 80, 96, 112, 144, 160, 176, 65, 81, 97, 113, 145, 161, 177, 66, 98, 146, 162, 194, 51, 195, 211, 20, 36, 52, 212, 228, 5, 21, 245, 6, 22, 38, 230, 246, 7, 23, 231, 247, 9, 25, 41, 249, 10, 26, 42, 234, 250, 11, 27, 251, 44, 60, 220, 236, 252, 61, 77, 205, 221, 78, 110, 126, 174, 206, 79, 95, 111, 127, 159, 175, 191, 207, 82, 114, 178, 67, 83, 99, 115, 147, 163, 179, 68, 100, 116, 148, 164, 180, 196, 37, 53, 165, 197, 213, 229, 54, 70, 182, 198, 214, 39, 55, 71, 183, 199, 215, 57, 73, 89, 201, 217, 233, 58, 74, 90, 202, 218, 43, 59, 75, 107, 123, 219, 235, 76, 92, 108, 124, 156, 172, 204, 93, 109, 125, 157, 173, 189, 94, 158, 190, 84, 69, 85, 101, 117, 149, 181, 86, 102, 118, 150, 166, 87, 103, 151, 167, 105, 121, 169, 185, 106, 122, 154, 170, 186, 91, 155, 171, 187, 203, 188, 119, 153]);
    this.huff_a06_cb_8be2vx$ = new Int32Array([2, 6, 1, 3, 2, 6, 4]);
    this.huff_a06_xlat_8be2vx$ = new Int32Array([1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 10, 11, 12, 15]);
    this.huff_a07_cb_8be2vx$ = new Int32Array([2, 10, 1, 2, 2, 2, 6, 14, 21, 13, 2]);
    this.huff_a07_xlat_8be2vx$ = new Int32Array([0, 1, 63, 2, 62, 3, 61, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 26, 27, 28, 36, 37, 38, 54, 55, 56, 57, 11, 12, 13, 14, 15, 16, 25, 29, 30, 31, 33, 34, 35, 39, 47, 48, 49, 50, 51, 52, 53, 17, 18, 19, 20, 21, 22, 23, 41, 42, 43, 44, 45, 46, 24, 40]);
    this.huff_a11_cb_8be2vx$ = new Int32Array([1, 11, 1, 0, 0, 0, 8, 1, 18, 9, 22, 10, 12]);
    this.huff_a11_xlat_8be2vx$ = new Int32Array([0, 64, 192, 16, 48, 4, 12, 1, 3, 208, 80, 112, 240, 196, 52, 76, 204, 28, 65, 193, 49, 5, 13, 67, 195, 19, 7, 15, 68, 20, 116, 220, 60, 17, 29, 51, 55, 84, 212, 244, 92, 124, 252, 209, 113, 241, 21, 53, 77, 205, 221, 61, 211, 115, 71, 199, 23, 119, 63, 81, 69, 197, 85, 83, 243, 79, 207, 31, 255, 213, 117, 245, 93, 125, 253, 87, 215, 247, 95, 223, 127]);
    this.huff_a12_cb_8be2vx$ = new Int32Array([5, 10, 16, 11, 32, 19, 1, 2]);
    this.huff_a12_xlat_8be2vx$ = new Int32Array([0, 64, 16, 80, 4, 68, 20, 84, 1, 65, 17, 81, 5, 69, 21, 85, 144, 148, 88, 145, 149, 25, 89, 6, 70, 22, 86, 128, 96, 132, 36, 100, 164, 8, 72, 24, 104, 129, 33, 97, 161, 133, 37, 101, 165, 9, 73, 153, 105, 169, 2, 66, 18, 82, 150, 38, 102, 26, 90, 32, 160, 136, 152, 40, 168, 137, 41, 130, 146, 34, 98, 134, 166, 10, 74, 154, 106, 170, 162, 138, 42]);
    this.huff_a13_cb_8be2vx$ = new Int32Array([1, 10, 1, 0, 0, 4, 2, 2, 9, 15, 12, 4]);
    this.huff_a13_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 57, 15, 9, 63, 16, 48, 49, 2, 58, 6, 14, 62, 23, 24, 40, 17, 41, 10, 50, 3, 11, 59, 5, 13, 61, 22, 31, 55, 25, 18, 26, 42, 19, 51, 21, 53, 30, 46, 54, 47, 27, 43, 29, 45]);
    this.huff_a14_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 4, 3, 5, 16, 28, 34, 26, 4]);
    this.huff_a14_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 241, 31, 255, 32, 224, 17, 2, 14, 48, 80, 176, 208, 33, 225, 18, 242, 3, 5, 11, 13, 30, 254, 47, 239, 64, 192, 49, 81, 177, 193, 209, 34, 82, 226, 19, 243, 4, 21, 245, 27, 235, 251, 12, 29, 253, 46, 94, 238, 63, 95, 191, 223, 65, 50, 66, 178, 210, 35, 83, 179, 227, 20, 36, 228, 244, 37, 53, 213, 229, 43, 59, 219, 28, 44, 188, 236, 252, 45, 189, 237, 62, 78, 190, 222, 79, 207, 194, 51, 67, 195, 211, 52, 68, 84, 180, 212, 69, 85, 197, 75, 203, 60, 76, 92, 204, 220, 61, 77, 93, 205, 221, 206, 196, 181, 91, 187]);
    this.huff_a15_cb_8be2vx$ = new Int32Array([5, 11, 9, 12, 16, 44, 98, 42, 4]);
    this.huff_a15_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 17, 241, 15, 31, 255, 32, 224, 33, 225, 2, 18, 242, 14, 30, 254, 47, 239, 48, 208, 49, 209, 34, 226, 3, 19, 243, 13, 29, 253, 46, 238, 63, 223, 64, 96, 112, 144, 160, 192, 65, 193, 50, 66, 194, 210, 35, 51, 211, 227, 4, 20, 36, 228, 244, 6, 22, 246, 7, 9, 10, 26, 250, 12, 28, 44, 236, 252, 45, 61, 221, 237, 62, 78, 206, 222, 79, 207, 80, 176, 81, 97, 113, 145, 161, 177, 82, 98, 114, 146, 162, 178, 67, 83, 99, 115, 147, 163, 195, 52, 68, 100, 164, 196, 212, 5, 21, 37, 53, 213, 229, 245, 38, 54, 70, 198, 214, 230, 23, 39, 55, 199, 215, 231, 247, 25, 41, 57, 201, 217, 233, 249, 42, 58, 74, 90, 202, 218, 234, 11, 27, 43, 59, 203, 219, 235, 251, 60, 76, 108, 124, 156, 172, 188, 204, 220, 77, 93, 109, 125, 157, 173, 189, 205, 94, 110, 126, 158, 174, 190, 95, 111, 127, 159, 175, 191, 179, 84, 116, 148, 180, 69, 85, 101, 117, 149, 165, 181, 197, 86, 102, 118, 150, 166, 182, 71, 87, 103, 167, 183, 73, 89, 105, 169, 185, 106, 122, 154, 170, 186, 75, 91, 107, 123, 155, 171, 187, 92, 119, 151, 121, 153]);
    this.huff_a16_cb_8be2vx$ = new Int32Array([2, 12, 1, 1, 2, 2, 5, 7, 21, 54, 85, 62, 16]);
    this.huff_a16_xlat_8be2vx$ = new Int32Array([0, 1, 16, 17, 33, 18, 32, 49, 2, 34, 19, 48, 65, 50, 3, 35, 20, 36, 64, 81, 97, 209, 225, 66, 82, 210, 51, 67, 211, 4, 52, 5, 21, 37, 22, 29, 45, 30, 46, 80, 96, 208, 224, 240, 113, 129, 241, 98, 114, 226, 242, 83, 99, 227, 243, 68, 84, 212, 228, 244, 53, 69, 85, 213, 229, 245, 6, 38, 54, 214, 7, 23, 39, 55, 215, 24, 40, 28, 13, 61, 77, 93, 109, 141, 14, 62, 78, 94, 15, 31, 47, 63, 95, 112, 128, 144, 192, 145, 161, 177, 193, 130, 146, 162, 194, 115, 131, 147, 163, 195, 100, 116, 132, 148, 164, 196, 101, 117, 133, 70, 86, 102, 198, 230, 246, 71, 87, 231, 247, 8, 56, 72, 88, 104, 216, 232, 248, 9, 25, 41, 57, 89, 217, 233, 249, 26, 42, 58, 218, 234, 250, 27, 43, 219, 235, 251, 12, 44, 60, 220, 236, 125, 157, 173, 189, 205, 110, 126, 142, 158, 174, 190, 206, 79, 111, 127, 143, 175, 160, 178, 179, 180, 149, 165, 181, 197, 118, 134, 150, 166, 182, 103, 119, 135, 151, 199, 120, 136, 152, 200, 73, 105, 121, 137, 153, 201, 10, 74, 90, 106, 122, 202, 11, 59, 75, 91, 107, 203, 76, 92, 108, 124, 140, 156, 172, 188, 204, 252, 221, 237, 253, 222, 238, 254, 159, 191, 207, 223, 239, 255, 176, 167, 183, 168, 184, 169, 185, 138, 154, 170, 186, 123, 139, 155, 171, 187]);
    this.huff_a17_cb_8be2vx$ = new Int32Array([3, 9, 3, 2, 5, 7, 17, 23, 6]);
    this.huff_a17_xlat_8be2vx$ = new Int32Array([0, 1, 63, 2, 62, 3, 4, 59, 60, 61, 5, 6, 7, 8, 56, 57, 58, 9, 10, 11, 12, 13, 14, 26, 27, 36, 37, 38, 50, 51, 52, 53, 54, 55, 15, 16, 17, 18, 19, 20, 21, 25, 28, 29, 30, 31, 33, 34, 35, 39, 43, 44, 45, 46, 47, 48, 49, 22, 23, 24, 40, 41, 42]);
    this.huff_a21_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 2, 6, 0, 7, 21, 15, 17, 8, 4]);
    this.huff_a21_xlat_8be2vx$ = new Int32Array([0, 64, 192, 16, 48, 4, 12, 1, 3, 208, 112, 52, 28, 13, 19, 7, 80, 240, 68, 196, 20, 116, 76, 204, 220, 60, 65, 193, 17, 49, 5, 29, 67, 195, 51, 55, 15, 84, 244, 252, 209, 113, 21, 77, 205, 221, 211, 115, 71, 199, 119, 63, 212, 92, 124, 81, 241, 69, 197, 85, 53, 61, 83, 243, 23, 79, 207, 31, 255, 117, 245, 93, 125, 215, 247, 95, 223, 213, 253, 87, 127]);
    this.huff_a22_cb_8be2vx$ = new Int32Array([2, 9, 1, 4, 0, 4, 3, 8, 3, 2]);
    this.huff_a22_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 9, 57, 15, 63, 16, 2, 6, 48, 17, 49, 10, 58, 14, 23, 55, 50, 22, 62, 18, 54]);
    this.huff_a23_cb_8be2vx$ = new Int32Array([3, 9, 5, 0, 4, 6, 10, 16, 8]);
    this.huff_a23_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 9, 57, 15, 63, 16, 48, 2, 58, 6, 14, 24, 40, 17, 49, 10, 3, 5, 62, 23, 55, 25, 41, 18, 42, 50, 11, 51, 59, 13, 21, 61, 22, 30, 54, 31, 47, 26, 19, 27, 43, 29, 45, 53, 46]);
    this.huff_a24_cb_8be2vx$ = new Int32Array([2, 4, 3, 1, 2]);
    this.huff_a25_cb_8be2vx$ = new Int32Array([2, 4, 1, 5, 2]);
    this.huff_a25_xlat_8be2vx$ = new Int32Array([1, 0, 2, 3, 4, 5, 6, 7]);
    this.huff_a26_cb_8be2vx$ = new Int32Array([4, 11, 3, 4, 12, 15, 34, 83, 75, 30]);
    this.huff_a26_xlat_8be2vx$ = new Int32Array([0, 1, 17, 16, 33, 18, 34, 32, 48, 49, 65, 2, 50, 3, 19, 35, 51, 20, 36, 64, 81, 97, 66, 82, 67, 83, 4, 52, 68, 21, 37, 53, 22, 38, 80, 96, 113, 129, 209, 98, 114, 130, 210, 99, 115, 211, 84, 100, 5, 69, 85, 101, 6, 54, 70, 86, 23, 39, 55, 71, 24, 40, 56, 25, 29, 45, 61, 30, 112, 128, 144, 208, 224, 145, 161, 177, 193, 225, 241, 146, 162, 194, 226, 242, 131, 147, 163, 195, 227, 243, 116, 132, 148, 164, 196, 212, 228, 244, 117, 133, 149, 213, 229, 102, 118, 134, 214, 230, 7, 87, 103, 119, 215, 8, 72, 88, 104, 216, 9, 41, 57, 73, 89, 105, 26, 42, 58, 74, 27, 43, 28, 44, 60, 76, 13, 77, 93, 109, 125, 141, 14, 46, 62, 78, 94, 110, 31, 47, 63, 79, 95, 160, 176, 192, 240, 178, 179, 180, 165, 181, 197, 245, 150, 166, 182, 198, 246, 135, 151, 167, 183, 199, 231, 247, 120, 136, 152, 168, 200, 232, 248, 121, 137, 153, 201, 217, 233, 249, 10, 90, 106, 122, 138, 218, 234, 250, 11, 59, 75, 91, 107, 123, 139, 219, 12, 92, 108, 124, 140, 156, 220, 157, 173, 189, 205, 126, 142, 158, 174, 190, 15, 111, 127, 143, 159, 175, 184, 169, 185, 154, 170, 186, 202, 155, 171, 187, 203, 235, 251, 172, 188, 204, 236, 252, 221, 237, 253, 206, 222, 238, 254, 191, 207, 223, 239, 255]);
    this.huff_a27_cb_8be2vx$ = new Int32Array([4, 8, 3, 14, 10, 20, 16]);
    this.huff_a27_xlat_8be2vx$ = new Int32Array([0, 2, 3, 1, 5, 6, 7, 9, 54, 55, 56, 58, 59, 60, 61, 62, 63, 4, 8, 10, 11, 12, 14, 49, 52, 53, 57, 13, 15, 16, 17, 18, 19, 22, 23, 25, 26, 30, 39, 43, 44, 45, 46, 47, 48, 50, 51, 20, 21, 24, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42]);
    this.huff_a31_cb_8be2vx$ = new Int32Array([1, 6, 1, 0, 3, 1, 0, 4]);
    this.huff_a31_xlat_8be2vx$ = new Int32Array([0, 4, 12, 1, 3, 5, 13, 7, 15]);
    this.huff_a32_cb_8be2vx$ = new Int32Array([1, 11, 1, 0, 0, 2, 2, 6, 12, 18, 19, 15, 6]);
    this.huff_a32_xlat_8be2vx$ = new Int32Array([0, 64, 1, 16, 4, 128, 80, 32, 20, 5, 2, 144, 96, 68, 84, 36, 8, 24, 65, 17, 21, 9, 6, 160, 132, 148, 100, 164, 72, 88, 40, 81, 33, 69, 85, 37, 25, 18, 22, 10, 26, 104, 168, 129, 145, 97, 161, 133, 149, 101, 165, 73, 89, 41, 105, 66, 82, 70, 86, 42, 136, 152, 137, 153, 169, 130, 146, 34, 98, 134, 38, 102, 74, 90, 106, 162, 150, 166, 138, 154, 170]);
    this.huff_a33_cb_8be2vx$ = new Int32Array([3, 12, 1, 1, 13, 1, 14, 28, 33, 81, 32, 52]);
    this.huff_a33_xlat_8be2vx$ = new Int32Array([0, 16, 64, 80, 4, 68, 20, 84, 1, 65, 17, 81, 5, 69, 21, 85, 144, 32, 148, 100, 24, 33, 149, 25, 105, 2, 82, 6, 70, 22, 128, 96, 132, 212, 36, 8, 72, 88, 104, 129, 145, 97, 133, 37, 101, 165, 9, 73, 89, 41, 66, 18, 86, 150, 166, 10, 23, 27, 208, 196, 116, 244, 136, 200, 40, 161, 113, 197, 213, 117, 153, 185, 77, 29, 45, 109, 34, 98, 102, 74, 26, 154, 106, 142, 94, 67, 35, 7, 71, 87, 107, 192, 160, 224, 112, 176, 164, 228, 52, 180, 152, 216, 168, 56, 120, 12, 76, 28, 92, 156, 108, 124, 193, 209, 225, 49, 229, 53, 181, 245, 137, 169, 121, 249, 13, 205, 157, 221, 173, 61, 125, 130, 194, 146, 210, 226, 114, 242, 134, 214, 230, 118, 182, 138, 90, 218, 234, 250, 78, 30, 158, 238, 3, 19, 83, 151, 183, 11, 75, 139, 91, 155, 235, 123, 15, 79, 31, 95, 159, 47, 63, 191, 232, 184, 248, 140, 44, 60, 252, 177, 201, 217, 233, 57, 93, 237, 189, 162, 50, 38, 54, 42, 170, 186, 14, 46, 110, 131, 195, 147, 99, 179, 167, 55, 48, 240, 204, 220, 172, 236, 188, 241, 141, 253, 178, 198, 246, 202, 58, 122, 206, 222, 174, 62, 126, 190, 254, 211, 163, 227, 51, 115, 243, 135, 199, 215, 39, 103, 231, 119, 247, 203, 219, 43, 171, 59, 187, 251, 143, 207, 223, 111, 175, 239, 127, 255]);
    this.huff_a34_cb_8be2vx$ = new Int32Array([1, 5, 1, 1, 1, 1, 2]);
    this.huff_a34_xlat_8be2vx$ = new Int32Array([1, 0, 2, 3, 4, 5]);
    this.huff_a35_cb_8be2vx$ = new Int32Array([2, 10, 1, 0, 2, 3, 6, 19, 9, 75, 110]);
    this.huff_a35_xlat_8be2vx$ = new Int32Array([0, 240, 15, 16, 1, 255, 32, 224, 17, 241, 14, 31, 48, 64, 208, 33, 225, 2, 18, 34, 226, 242, 3, 19, 30, 46, 62, 238, 254, 47, 239, 210, 67, 243, 4, 13, 45, 61, 63, 223, 80, 96, 112, 144, 176, 49, 65, 145, 161, 193, 209, 66, 162, 194, 35, 51, 227, 36, 52, 180, 212, 244, 5, 21, 69, 229, 22, 54, 86, 166, 198, 214, 246, 87, 199, 247, 9, 41, 73, 89, 105, 249, 10, 42, 58, 74, 218, 234, 250, 11, 43, 171, 235, 251, 12, 28, 44, 60, 76, 92, 204, 220, 252, 29, 77, 109, 189, 205, 237, 253, 78, 110, 206, 222, 127, 160, 192, 81, 97, 113, 177, 50, 82, 98, 114, 146, 178, 83, 99, 115, 147, 163, 179, 195, 211, 20, 68, 84, 100, 116, 148, 164, 196, 228, 37, 53, 85, 101, 117, 149, 165, 181, 197, 213, 245, 6, 38, 70, 102, 118, 150, 182, 230, 7, 23, 39, 55, 71, 103, 119, 151, 167, 183, 215, 231, 25, 57, 121, 153, 169, 185, 201, 217, 233, 26, 90, 106, 122, 154, 170, 186, 202, 27, 59, 75, 91, 107, 123, 155, 187, 203, 219, 108, 124, 156, 172, 188, 236, 93, 125, 157, 173, 221, 94, 126, 158, 174, 190, 79, 95, 111, 159, 175, 191, 207]);
    this.huff_a36_cb_8be2vx$ = new Int32Array([3, 12, 1, 3, 5, 5, 13, 27, 69, 96, 35, 2]);
    this.huff_a36_xlat_8be2vx$ = new Int32Array([0, 16, 1, 17, 32, 33, 2, 18, 34, 49, 65, 50, 19, 35, 48, 64, 81, 66, 3, 51, 67, 4, 20, 36, 52, 21, 37, 80, 97, 113, 209, 82, 98, 114, 210, 83, 99, 211, 68, 84, 100, 5, 53, 69, 85, 22, 38, 54, 70, 23, 39, 29, 45, 61, 96, 112, 208, 129, 145, 161, 193, 225, 241, 130, 146, 194, 226, 242, 115, 131, 227, 243, 116, 132, 196, 212, 228, 244, 101, 117, 133, 213, 229, 6, 86, 102, 214, 230, 7, 55, 71, 87, 103, 215, 231, 24, 40, 56, 72, 88, 216, 25, 41, 42, 28, 44, 13, 77, 93, 109, 125, 141, 157, 30, 46, 62, 78, 94, 110, 126, 31, 47, 63, 128, 144, 160, 192, 224, 240, 177, 162, 178, 147, 163, 179, 195, 148, 164, 180, 149, 165, 181, 197, 245, 118, 134, 150, 166, 198, 246, 119, 135, 151, 167, 199, 247, 8, 104, 120, 136, 152, 200, 232, 248, 9, 57, 73, 89, 105, 121, 137, 217, 233, 249, 10, 26, 58, 74, 90, 106, 218, 234, 250, 27, 43, 59, 75, 91, 219, 235, 251, 12, 60, 76, 92, 108, 124, 140, 156, 220, 236, 173, 189, 205, 221, 237, 14, 142, 158, 174, 190, 15, 79, 95, 111, 127, 143, 159, 175, 176, 182, 183, 168, 184, 153, 169, 185, 201, 122, 138, 154, 170, 186, 202, 11, 107, 123, 139, 155, 203, 172, 188, 204, 252, 253, 206, 222, 238, 254, 191, 207, 223, 239, 255, 171, 187]);
    this.huff_a37_cb_8be2vx$ = new Int32Array([4, 8, 7, 6, 8, 22, 20]);
    this.huff_a37_xlat_8be2vx$ = new Int32Array([0, 1, 2, 3, 61, 62, 63, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 54, 55, 56, 57, 11, 12, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 17, 18, 19, 20, 21, 22, 23, 24, 31, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47]);
    this.huff_a41_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 6, 2, 0, 0, 0, 19, 9, 24, 20]);
    this.huff_a41_xlat_8be2vx$ = new Int32Array([0, 64, 192, 16, 48, 4, 12, 1, 3, 80, 208, 112, 240, 196, 52, 76, 204, 28, 65, 193, 49, 5, 13, 67, 195, 19, 7, 15, 68, 20, 116, 220, 60, 17, 29, 51, 55, 84, 212, 244, 92, 124, 252, 209, 113, 241, 197, 21, 53, 77, 205, 221, 61, 211, 115, 71, 199, 23, 119, 31, 63, 81, 69, 85, 213, 117, 245, 93, 125, 253, 83, 243, 87, 215, 247, 79, 207, 95, 223, 127, 255]);
    this.huff_a42_cb_8be2vx$ = new Int32Array([3, 10, 1, 2, 13, 1, 31, 13, 16, 4]);
    this.huff_a42_xlat_8be2vx$ = new Int32Array([0, 64, 1, 16, 80, 4, 68, 20, 84, 65, 17, 81, 5, 69, 21, 85, 89, 128, 144, 32, 96, 132, 148, 36, 100, 8, 72, 24, 88, 129, 145, 33, 97, 133, 149, 37, 101, 9, 73, 25, 2, 66, 18, 82, 6, 70, 22, 86, 160, 164, 104, 161, 165, 153, 41, 105, 150, 102, 74, 26, 90, 136, 152, 40, 137, 169, 130, 146, 34, 98, 134, 38, 166, 10, 154, 42, 106, 168, 162, 138, 170]);
    this.huff_a43_cb_8be2vx$ = new Int32Array([2, 4, 2, 3, 2]);
    this.huff_a43_xlat_8be2vx$ = new Int32Array([0, 7, 1, 2, 6, 3, 5]);
    this.huff_a44_cb_8be2vx$ = new Int32Array([4, 10, 5, 4, 12, 17, 47, 24, 12]);
    this.huff_a44_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 17, 241, 31, 255, 32, 224, 33, 225, 2, 18, 242, 14, 30, 254, 47, 239, 48, 80, 208, 209, 34, 226, 3, 19, 243, 13, 29, 45, 253, 46, 238, 63, 223, 64, 176, 192, 49, 65, 81, 177, 193, 50, 178, 194, 210, 35, 179, 211, 227, 4, 20, 228, 244, 5, 21, 213, 229, 245, 11, 27, 43, 59, 235, 251, 12, 28, 44, 252, 61, 93, 237, 62, 78, 94, 190, 222, 79, 95, 191, 207, 66, 82, 51, 83, 195, 36, 180, 212, 37, 53, 197, 75, 203, 219, 60, 76, 92, 220, 236, 77, 189, 205, 221, 206, 67, 52, 68, 84, 196, 69, 85, 181, 91, 187, 188, 204]);
    this.huff_a45_cb_8be2vx$ = new Int32Array([2, 4, 2, 2, 4]);
    this.huff_a45_xlat_8be2vx$ = new Int32Array([1, 2, 0, 3, 4, 5, 6, 7]);
    this.huff_a46_cb_8be2vx$ = new Int32Array([5, 9, 1, 16, 31, 36, 172]);
    this.huff_a46_xlat_8be2vx$ = new Int32Array([2, 0, 48, 33, 49, 65, 97, 18, 34, 66, 98, 67, 83, 36, 69, 38, 39, 16, 64, 176, 1, 17, 129, 50, 82, 114, 146, 3, 19, 51, 99, 20, 52, 84, 100, 116, 5, 21, 37, 53, 85, 101, 6, 70, 86, 87, 103, 136, 32, 81, 145, 209, 242, 35, 131, 147, 4, 68, 132, 148, 117, 133, 197, 54, 102, 150, 182, 7, 55, 151, 8, 40, 56, 72, 104, 9, 105, 121, 10, 42, 27, 155, 44, 77, 80, 96, 112, 128, 144, 160, 192, 208, 224, 240, 113, 161, 177, 193, 225, 241, 130, 162, 178, 194, 210, 226, 115, 163, 179, 195, 211, 227, 243, 164, 180, 196, 212, 228, 244, 149, 165, 181, 213, 229, 245, 22, 118, 134, 166, 198, 214, 230, 246, 23, 71, 119, 135, 167, 183, 199, 215, 231, 247, 24, 88, 120, 152, 168, 184, 200, 216, 232, 248, 25, 41, 57, 73, 89, 137, 153, 169, 185, 201, 217, 233, 249, 26, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 11, 43, 59, 75, 91, 107, 123, 139, 171, 187, 203, 219, 235, 251, 12, 28, 60, 76, 92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252, 13, 29, 45, 61, 93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253, 14, 30, 46, 62, 78, 94, 110, 126, 142, 158, 174, 190, 206, 222, 238, 254, 15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255]);
    this.huff_a47_cb_8be2vx$ = new Int32Array([4, 9, 5, 12, 9, 12, 15, 10]);
    this.huff_a47_xlat_8be2vx$ = new Int32Array([0, 1, 2, 62, 63, 3, 4, 5, 6, 8, 54, 56, 57, 58, 59, 60, 61, 7, 9, 10, 11, 12, 13, 14, 53, 55, 15, 16, 17, 18, 19, 20, 21, 36, 37, 39, 42, 52, 22, 25, 28, 35, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 23, 24, 26, 27, 29, 30, 31, 33, 34, 44]);
    this.huff_a51_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 6, 2, 6, 18, 4, 26, 6, 12]);
    this.huff_a51_xlat_8be2vx$ = new Int32Array([0, 64, 192, 48, 4, 1, 3, 16, 12, 208, 112, 52, 28, 13, 7, 80, 240, 68, 196, 20, 76, 204, 60, 65, 193, 17, 49, 5, 67, 195, 19, 51, 15, 116, 220, 29, 55, 84, 212, 244, 92, 124, 252, 209, 113, 241, 197, 21, 53, 77, 205, 221, 61, 83, 211, 115, 71, 199, 23, 119, 79, 31, 63, 81, 69, 85, 243, 207, 255, 213, 117, 245, 93, 125, 253, 87, 215, 247, 95, 223, 127]);
    this.huff_a52_cb_8be2vx$ = new Int32Array([1, 10, 1, 0, 2, 2, 0, 4, 3, 8, 3, 2]);
    this.huff_a52_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 9, 57, 15, 63, 16, 2, 6, 48, 17, 49, 10, 58, 14, 23, 55, 50, 22, 62, 18, 54]);
    this.huff_a53_xlat_8be2vx$ = new Int32Array([0, 1, 2, 6, 7, 3, 5]);
    this.huff_a54_cb_8be2vx$ = new Int32Array([4, 9, 4, 7, 12, 19, 21, 58]);
    this.huff_a54_xlat_8be2vx$ = new Int32Array([0, 1, 15, 31, 16, 224, 240, 17, 241, 47, 255, 32, 33, 225, 2, 18, 242, 3, 243, 14, 46, 254, 63, 48, 64, 208, 193, 209, 34, 194, 51, 227, 12, 204, 13, 29, 45, 253, 30, 62, 94, 239, 192, 82, 178, 210, 67, 195, 211, 36, 69, 245, 75, 91, 251, 28, 61, 189, 221, 238, 191, 207, 223, 80, 176, 49, 65, 81, 177, 50, 66, 226, 19, 35, 83, 179, 4, 20, 52, 68, 84, 180, 196, 212, 228, 244, 5, 21, 37, 53, 85, 181, 197, 213, 229, 11, 27, 43, 59, 187, 203, 219, 235, 44, 60, 76, 92, 188, 220, 236, 252, 77, 93, 205, 237, 78, 190, 206, 222, 79, 95]);
    this.huff_a55_cb_8be2vx$ = new Int32Array([1, 6, 1, 1, 1, 0, 3, 2]);
    this.huff_a55_xlat_8be2vx$ = new Int32Array([0, 1, 2, 3, 6, 7, 4, 5]);
    this.huff_a56_cb_8be2vx$ = new Int32Array([3, 7, 1, 8, 6, 8, 8]);
    this.huff_a56_xlat_8be2vx$ = new Int32Array([4, 0, 1, 2, 3, 28, 29, 30, 31, 5, 6, 7, 24, 25, 27, 8, 9, 14, 19, 21, 22, 23, 26, 10, 11, 12, 13, 15, 17, 18, 20]);
    this.huff_a57_cb_8be2vx$ = new Int32Array([3, 9, 1, 5, 7, 8, 16, 22, 4]);
    this.huff_a57_xlat_8be2vx$ = new Int32Array([0, 1, 2, 61, 62, 63, 3, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 54, 55, 56, 57, 11, 12, 13, 14, 15, 26, 27, 28, 36, 37, 38, 49, 50, 51, 52, 53, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 33, 34, 35, 39, 43, 44, 45, 46, 47, 48, 22, 40, 41, 42]);
    this.huff_a61_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 8, 0, 1, 16, 10, 29, 12, 4]);
    this.huff_a61_xlat_8be2vx$ = new Int32Array([0, 64, 192, 16, 48, 4, 12, 1, 3, 112, 80, 208, 240, 68, 196, 20, 52, 76, 28, 60, 49, 5, 13, 19, 7, 15, 116, 204, 220, 252, 65, 193, 17, 67, 195, 51, 84, 212, 244, 92, 124, 81, 209, 113, 241, 69, 197, 21, 53, 77, 205, 29, 61, 83, 211, 115, 243, 71, 199, 23, 55, 79, 207, 31, 63, 85, 213, 117, 245, 93, 221, 253, 87, 215, 119, 247, 255, 125, 95, 223, 127]);
    this.huff_a62_cb_8be2vx$ = new Int32Array([3, 8, 5, 2, 2, 9, 5, 2]);
    this.huff_a62_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 57, 15, 9, 63, 16, 48, 49, 2, 58, 6, 14, 23, 55, 17, 10, 50, 22, 62, 18, 54]);
    this.huff_a63_cb_8be2vx$ = new Int32Array([3, 11, 1, 1, 10, 4, 16, 29, 46, 75, 74]);
    this.huff_a63_xlat_8be2vx$ = new Int32Array([0, 64, 16, 80, 4, 68, 20, 1, 65, 5, 69, 85, 84, 17, 81, 21, 128, 144, 96, 36, 100, 164, 72, 97, 149, 37, 165, 2, 66, 82, 22, 86, 32, 132, 148, 24, 88, 129, 145, 133, 101, 9, 73, 25, 89, 153, 41, 105, 121, 93, 18, 98, 6, 70, 134, 102, 26, 90, 106, 71, 23, 192, 160, 224, 196, 212, 116, 8, 120, 12, 76, 28, 92, 209, 33, 225, 113, 197, 229, 117, 181, 137, 189, 146, 34, 150, 166, 54, 10, 74, 138, 154, 42, 122, 222, 110, 67, 19, 83, 35, 7, 119, 75, 27, 155, 107, 47, 208, 48, 112, 228, 52, 244, 200, 152, 40, 104, 168, 232, 56, 184, 248, 156, 44, 108, 124, 161, 177, 213, 53, 201, 217, 169, 233, 57, 185, 249, 205, 29, 45, 173, 125, 194, 210, 162, 178, 242, 198, 38, 118, 182, 218, 170, 234, 58, 250, 14, 78, 46, 126, 190, 254, 3, 131, 99, 163, 179, 135, 87, 151, 215, 39, 11, 139, 91, 43, 171, 207, 31, 159, 127, 191, 176, 240, 180, 136, 216, 140, 204, 220, 172, 236, 60, 188, 252, 193, 49, 241, 245, 13, 77, 141, 157, 221, 109, 237, 61, 253, 130, 226, 50, 114, 214, 230, 246, 202, 186, 142, 206, 30, 94, 158, 174, 238, 62, 195, 147, 211, 227, 51, 115, 243, 199, 103, 167, 231, 55, 183, 247, 203, 219, 235, 59, 123, 187, 251, 15, 79, 143, 95, 223, 111, 175, 239, 63, 255]);
    this.huff_a64_cb_8be2vx$ = new Int32Array([4, 9, 1, 7, 12, 36, 63, 2]);
    this.huff_a64_xlat_8be2vx$ = new Int32Array([0, 16, 32, 224, 240, 2, 14, 239, 48, 1, 17, 33, 49, 241, 18, 242, 30, 238, 223, 255, 64, 192, 208, 209, 225, 34, 50, 66, 210, 226, 3, 19, 35, 179, 195, 227, 243, 228, 5, 245, 43, 12, 252, 29, 45, 189, 221, 253, 46, 78, 222, 254, 15, 31, 47, 63, 80, 176, 65, 81, 177, 193, 82, 178, 194, 51, 67, 83, 211, 4, 20, 36, 52, 68, 84, 180, 196, 212, 244, 21, 37, 53, 69, 85, 181, 197, 213, 229, 11, 27, 59, 75, 91, 187, 203, 219, 235, 251, 28, 44, 60, 76, 92, 188, 204, 220, 236, 13, 61, 77, 93, 205, 237, 62, 94, 190, 206, 79, 207, 95, 191]);
    this.huff_a65_cb_8be2vx$ = new Int32Array([2, 7, 3, 0, 1, 3, 4, 4]);
    this.huff_a65_xlat_8be2vx$ = new Int32Array([0, 1, 15, 14, 2, 3, 13, 4, 6, 10, 12, 5, 7, 9, 11]);
    this.huff_a66_cb_8be2vx$ = new Int32Array([2, 10, 1, 2, 2, 6, 8, 6, 3, 1, 2]);
    this.huff_a66_xlat_8be2vx$ = new Int32Array([0, 1, 31, 2, 30, 3, 4, 15, 17, 28, 29, 5, 6, 7, 8, 24, 25, 26, 27, 9, 10, 11, 21, 22, 23, 12, 19, 20, 13, 14, 18]);
    this.huff_a67_cb_8be2vx$ = new Int32Array([2, 9, 1, 1, 3, 4, 6, 13, 25, 10]);
    this.huff_a67_xlat_8be2vx$ = new Int32Array([0, 1, 2, 62, 63, 3, 4, 60, 61, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 13, 26, 38, 52, 53, 54, 55, 56, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 45, 46, 47, 48, 49, 50, 51, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44]);
    this.huff_a71_cb_8be2vx$ = new Int32Array([1, 3, 1, 1, 2]);
    this.huff_a72_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 4, 8, 3, 8, 24, 17, 12, 4]);
    this.huff_a72_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 80, 68, 20, 84, 65, 17, 5, 21, 81, 69, 85, 128, 144, 32, 100, 8, 25, 2, 6, 96, 132, 148, 36, 72, 24, 88, 129, 145, 33, 97, 133, 149, 37, 101, 9, 73, 89, 66, 18, 82, 70, 22, 86, 160, 164, 152, 40, 104, 161, 165, 153, 41, 105, 150, 38, 102, 10, 74, 26, 90, 136, 168, 137, 169, 130, 146, 34, 98, 134, 166, 42, 106, 162, 138, 154, 170]);
    this.huff_a73_cb_8be2vx$ = new Int32Array([2, 10, 1, 1, 5, 2, 8, 7, 13, 8, 4]);
    this.huff_a73_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 57, 7, 15, 9, 63, 16, 48, 49, 2, 58, 6, 14, 23, 17, 10, 50, 13, 22, 62, 55, 24, 40, 25, 41, 18, 42, 3, 59, 5, 21, 30, 31, 47, 26, 11, 43, 51, 53, 61, 46, 54, 19, 27, 29, 45]);
    this.huff_a74_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 4, 0, 4, 5, 9, 30, 45, 21, 2]);
    this.huff_a74_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 17, 241, 31, 255, 32, 224, 2, 242, 14, 33, 225, 18, 226, 30, 46, 254, 47, 239, 48, 80, 176, 192, 208, 49, 177, 209, 34, 210, 3, 19, 227, 243, 244, 5, 229, 245, 11, 27, 12, 13, 29, 45, 253, 62, 238, 63, 95, 223, 64, 65, 81, 193, 50, 66, 82, 178, 194, 35, 51, 179, 195, 211, 4, 20, 36, 212, 228, 21, 37, 197, 213, 43, 59, 235, 251, 28, 44, 60, 92, 236, 252, 61, 93, 221, 237, 78, 94, 190, 206, 222, 79, 191, 207, 67, 83, 52, 84, 180, 196, 53, 69, 85, 181, 75, 91, 203, 219, 76, 188, 204, 220, 77, 189, 205, 68, 187]);
    this.huff_a75_cb_8be2vx$ = new Int32Array([2, 6, 1, 3, 3, 4, 4]);
    this.huff_a75_xlat_8be2vx$ = new Int32Array([0, 1, 14, 15, 2, 3, 13, 4, 6, 10, 12, 5, 7, 9, 11]);
    this.huff_a76_cb_8be2vx$ = new Int32Array([3, 12, 1, 3, 4, 8, 10, 36, 60, 78, 48, 8]);
    this.huff_a76_xlat_8be2vx$ = new Int32Array([0, 16, 1, 17, 32, 33, 2, 18, 48, 49, 65, 34, 3, 19, 35, 20, 64, 81, 97, 50, 66, 51, 4, 36, 21, 22, 80, 96, 208, 113, 129, 209, 225, 241, 82, 98, 114, 210, 67, 83, 99, 211, 52, 68, 84, 5, 37, 53, 69, 6, 38, 54, 23, 39, 24, 13, 29, 45, 61, 30, 46, 31, 112, 128, 224, 240, 145, 161, 193, 130, 146, 194, 226, 242, 115, 131, 147, 227, 243, 100, 116, 132, 212, 228, 244, 85, 101, 213, 229, 245, 70, 86, 102, 214, 7, 55, 71, 87, 8, 40, 56, 72, 25, 41, 57, 26, 42, 27, 28, 44, 60, 77, 93, 109, 14, 62, 78, 94, 15, 47, 63, 79, 144, 160, 176, 192, 177, 162, 178, 163, 179, 195, 148, 164, 180, 196, 117, 133, 149, 165, 197, 118, 134, 150, 230, 246, 103, 119, 135, 215, 231, 247, 88, 104, 120, 136, 216, 232, 248, 9, 73, 89, 105, 217, 233, 249, 10, 58, 74, 90, 218, 234, 11, 43, 59, 75, 219, 12, 76, 92, 108, 220, 125, 141, 157, 173, 189, 205, 110, 126, 142, 158, 174, 190, 95, 111, 127, 143, 159, 175, 181, 166, 182, 198, 151, 167, 199, 152, 168, 184, 200, 121, 137, 153, 169, 185, 201, 106, 122, 138, 154, 170, 202, 250, 91, 107, 123, 139, 203, 235, 251, 124, 140, 156, 172, 188, 236, 252, 221, 237, 253, 206, 222, 238, 254, 191, 207, 223, 183, 186, 155, 171, 187, 204, 239, 255]);
    this.huff_b01_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 2, 6, 0, 11, 13, 12, 24, 4, 8]);
    this.huff_b01_xlat_8be2vx$ = new Int32Array([0, 1, 3, 64, 192, 16, 48, 4, 12, 80, 208, 112, 240, 52, 28, 5, 13, 19, 7, 15, 68, 196, 20, 76, 204, 60, 65, 193, 17, 49, 67, 195, 51, 84, 116, 220, 252, 113, 21, 77, 29, 211, 199, 55, 63, 212, 244, 92, 124, 81, 209, 241, 69, 197, 85, 53, 205, 221, 61, 83, 115, 243, 71, 23, 119, 79, 207, 31, 255, 245, 125, 215, 95, 213, 117, 93, 253, 87, 247, 223, 127]);
    this.huff_b02_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 4, 0, 8, 4, 9, 19, 13, 13, 10]);
    this.huff_b02_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 80, 68, 20, 84, 65, 17, 5, 21, 128, 81, 69, 85, 144, 32, 96, 36, 8, 24, 9, 2, 6, 132, 148, 100, 72, 88, 129, 145, 33, 97, 149, 37, 101, 25, 89, 66, 18, 70, 22, 86, 160, 164, 40, 104, 133, 165, 73, 41, 105, 82, 10, 26, 90, 136, 152, 161, 137, 153, 169, 34, 98, 150, 38, 102, 74, 106, 168, 130, 146, 162, 134, 166, 138, 154, 42, 170]);
    this.huff_b03_cb_8be2vx$ = new Int32Array([1, 9, 1, 0, 0, 4, 0, 5, 12, 13, 14]);
    this.huff_b03_xlat_8be2vx$ = new Int32Array([0, 8, 56, 1, 7, 48, 9, 57, 15, 63, 16, 24, 40, 49, 2, 58, 3, 5, 6, 14, 23, 55, 17, 25, 41, 10, 50, 11, 59, 13, 21, 61, 62, 31, 47, 18, 26, 42, 19, 27, 43, 51, 29, 45, 53, 22, 30, 46, 54]);
    this.huff_b04_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 4, 4, 5, 9, 30, 45, 21, 2]);
    this.huff_b04_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 17, 241, 31, 255, 32, 224, 2, 242, 14, 33, 225, 18, 226, 30, 46, 254, 47, 239, 48, 80, 176, 192, 208, 49, 177, 209, 34, 210, 3, 19, 227, 243, 244, 5, 229, 245, 11, 27, 12, 13, 29, 45, 253, 62, 238, 63, 95, 223, 64, 65, 81, 193, 50, 66, 82, 178, 194, 35, 51, 179, 195, 211, 4, 20, 36, 212, 228, 21, 37, 197, 213, 43, 59, 235, 251, 28, 44, 60, 92, 236, 252, 61, 93, 221, 237, 78, 94, 190, 206, 222, 79, 191, 207, 67, 83, 52, 84, 180, 196, 53, 69, 85, 181, 75, 91, 203, 219, 76, 188, 204, 220, 77, 189, 205, 68, 187]);
    this.huff_b05_cb_8be2vx$ = new Int32Array([3, 11, 1, 4, 4, 4, 12, 30, 73, 75, 22]);
    this.huff_b05_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 17, 241, 31, 255, 32, 224, 2, 14, 48, 208, 33, 225, 18, 242, 3, 13, 30, 254, 47, 239, 64, 96, 112, 144, 160, 192, 49, 209, 34, 50, 210, 226, 19, 35, 227, 243, 4, 6, 7, 9, 10, 12, 29, 45, 253, 46, 62, 238, 63, 223, 80, 176, 65, 81, 97, 113, 145, 161, 177, 193, 66, 98, 114, 146, 162, 194, 51, 147, 163, 211, 20, 36, 228, 244, 5, 21, 245, 22, 38, 214, 230, 246, 23, 39, 215, 231, 247, 25, 41, 57, 233, 249, 26, 42, 234, 250, 11, 27, 251, 28, 44, 236, 252, 61, 125, 157, 221, 237, 78, 110, 126, 158, 174, 206, 222, 79, 95, 111, 127, 159, 175, 191, 207, 82, 178, 67, 83, 99, 115, 179, 195, 52, 68, 100, 116, 148, 164, 180, 196, 212, 37, 53, 101, 117, 149, 165, 213, 229, 54, 70, 86, 102, 166, 182, 198, 55, 71, 87, 183, 199, 73, 89, 105, 185, 201, 217, 58, 74, 90, 106, 170, 186, 202, 218, 43, 59, 107, 123, 155, 171, 219, 235, 60, 76, 108, 124, 156, 172, 204, 220, 77, 93, 109, 173, 189, 205, 94, 190, 84, 69, 85, 181, 197, 118, 150, 103, 119, 151, 167, 121, 153, 169, 122, 154, 75, 91, 187, 203, 92, 188]);
    this.huff_b07_cb_8be2vx$ = new Int32Array([3, 9, 3, 2, 4, 8, 23, 13, 10]);
    this.huff_b07_xlat_8be2vx$ = new Int32Array([0, 1, 63, 2, 62, 3, 4, 60, 61, 5, 6, 7, 8, 56, 57, 58, 59, 9, 10, 11, 12, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 13, 14, 15, 16, 17, 18, 19, 45, 46, 47, 48, 49, 50, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44]);
    this.huff_b12_cb_8be2vx$ = new Int32Array([3, 10, 1, 3, 12, 0, 30, 9, 18, 8]);
    this.huff_b12_xlat_8be2vx$ = new Int32Array([0, 64, 4, 1, 16, 80, 68, 20, 84, 65, 17, 81, 5, 69, 21, 85, 128, 144, 32, 96, 132, 148, 36, 100, 8, 72, 24, 129, 145, 97, 133, 149, 37, 101, 9, 73, 25, 89, 2, 66, 18, 82, 6, 70, 22, 86, 164, 88, 104, 33, 165, 41, 105, 26, 90, 160, 136, 152, 40, 161, 137, 153, 169, 146, 34, 98, 134, 150, 38, 102, 10, 74, 106, 168, 130, 162, 166, 138, 154, 42, 170]);
    this.huff_b14_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 4, 0, 3, 5, 16, 28, 34, 26, 4]);
    this.huff_b14_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 241, 31, 255, 32, 224, 17, 2, 14, 48, 80, 176, 208, 33, 225, 18, 242, 3, 5, 11, 13, 30, 254, 47, 239, 64, 192, 49, 81, 177, 193, 209, 34, 82, 226, 19, 243, 4, 21, 245, 27, 235, 251, 12, 29, 253, 46, 94, 238, 63, 95, 191, 223, 65, 50, 66, 178, 210, 35, 83, 179, 227, 20, 36, 228, 244, 37, 53, 213, 229, 43, 59, 219, 28, 44, 188, 236, 252, 45, 189, 237, 62, 78, 190, 222, 79, 207, 194, 51, 67, 195, 211, 52, 68, 84, 180, 212, 69, 85, 197, 75, 203, 60, 76, 92, 204, 220, 61, 77, 93, 205, 221, 206, 196, 181, 91, 187]);
    this.huff_b16_cb_8be2vx$ = new Int32Array([4, 12, 4, 4, 9, 13, 37, 76, 72, 39, 2]);
    this.huff_b16_xlat_8be2vx$ = new Int32Array([0, 16, 1, 17, 32, 33, 2, 18, 48, 49, 65, 34, 50, 3, 19, 35, 20, 64, 81, 97, 66, 82, 51, 67, 4, 36, 52, 21, 37, 22, 80, 96, 112, 113, 129, 209, 225, 98, 114, 130, 210, 83, 99, 115, 211, 68, 84, 5, 53, 69, 85, 6, 38, 54, 7, 23, 39, 55, 24, 40, 25, 29, 45, 61, 30, 46, 31, 128, 144, 208, 224, 240, 145, 161, 177, 193, 241, 146, 162, 178, 194, 226, 242, 131, 147, 163, 195, 227, 243, 100, 116, 132, 148, 212, 228, 244, 101, 117, 133, 213, 229, 70, 86, 102, 118, 214, 230, 71, 87, 103, 215, 8, 56, 72, 88, 9, 41, 57, 73, 10, 26, 42, 58, 27, 43, 12, 28, 44, 60, 13, 77, 93, 109, 125, 14, 62, 78, 94, 110, 15, 47, 63, 79, 160, 176, 192, 179, 164, 180, 196, 149, 165, 181, 197, 245, 134, 150, 166, 182, 198, 246, 119, 135, 151, 167, 199, 231, 247, 104, 120, 136, 152, 216, 232, 248, 89, 105, 121, 137, 217, 233, 249, 74, 90, 106, 122, 218, 234, 11, 59, 75, 91, 219, 235, 76, 92, 108, 124, 140, 220, 141, 157, 173, 189, 205, 126, 142, 158, 174, 190, 95, 111, 127, 143, 159, 183, 168, 184, 200, 153, 169, 185, 201, 138, 154, 170, 186, 202, 250, 107, 123, 139, 155, 171, 187, 203, 251, 156, 172, 188, 204, 236, 252, 221, 237, 253, 206, 222, 238, 254, 175, 191, 207, 223, 239, 255]);
    this.huff_b26_cb_8be2vx$ = new Int32Array([3, 12, 2, 2, 4, 5, 11, 26, 67, 78, 51, 10]);
    this.huff_b26_xlat_8be2vx$ = new Int32Array([0, 1, 16, 17, 32, 33, 2, 18, 48, 49, 34, 3, 19, 64, 65, 81, 50, 66, 35, 51, 4, 20, 36, 21, 80, 97, 113, 209, 225, 82, 98, 210, 67, 83, 211, 52, 68, 5, 37, 53, 6, 22, 38, 23, 24, 29, 45, 61, 30, 46, 96, 112, 128, 208, 224, 240, 129, 145, 161, 193, 241, 114, 130, 146, 194, 226, 242, 99, 115, 227, 243, 84, 100, 116, 212, 228, 244, 69, 85, 101, 213, 229, 245, 54, 70, 86, 214, 230, 7, 39, 55, 71, 215, 8, 40, 56, 25, 41, 26, 27, 28, 44, 13, 77, 93, 109, 125, 14, 62, 78, 94, 110, 15, 31, 47, 63, 79, 144, 160, 192, 177, 162, 178, 131, 147, 163, 179, 195, 132, 148, 164, 196, 117, 133, 149, 197, 102, 118, 134, 150, 198, 246, 87, 103, 119, 231, 247, 72, 88, 104, 120, 216, 232, 248, 9, 57, 73, 89, 217, 233, 249, 10, 42, 58, 74, 218, 234, 11, 43, 59, 219, 235, 12, 60, 76, 92, 108, 220, 141, 157, 173, 189, 205, 126, 142, 158, 174, 190, 206, 95, 111, 127, 143, 159, 175, 176, 180, 165, 181, 166, 182, 135, 151, 167, 183, 199, 136, 152, 168, 200, 105, 121, 137, 153, 169, 201, 90, 106, 122, 154, 202, 250, 75, 91, 107, 123, 203, 251, 124, 140, 156, 172, 188, 204, 236, 252, 221, 237, 253, 222, 238, 254, 191, 207, 223, 239, 184, 185, 138, 170, 186, 139, 155, 171, 187, 255]);
    this.huff_b32_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 4, 6, 7, 10, 22, 11, 16, 4]);
    this.huff_b32_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 80, 68, 20, 65, 17, 5, 128, 84, 81, 69, 21, 85, 2, 144, 32, 96, 132, 36, 8, 24, 9, 18, 6, 160, 148, 100, 72, 88, 129, 145, 33, 97, 133, 149, 37, 101, 73, 25, 89, 66, 82, 70, 22, 86, 10, 164, 40, 104, 161, 165, 41, 105, 38, 74, 26, 90, 136, 152, 168, 137, 153, 169, 130, 146, 34, 98, 134, 150, 102, 154, 42, 106, 162, 166, 138, 170]);
    this.huff_b33_cb_8be2vx$ = new Int32Array([2, 12, 1, 0, 0, 4, 11, 8, 28, 92, 97, 13, 2]);
    this.huff_b33_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 80, 68, 20, 84, 65, 17, 81, 5, 69, 21, 85, 32, 149, 101, 73, 89, 82, 70, 22, 128, 144, 96, 132, 148, 36, 100, 164, 8, 72, 24, 88, 129, 145, 33, 97, 133, 37, 9, 25, 105, 2, 66, 18, 6, 86, 90, 87, 208, 116, 104, 92, 193, 213, 165, 229, 117, 181, 245, 153, 217, 169, 233, 121, 185, 249, 29, 93, 157, 221, 109, 173, 237, 125, 189, 253, 130, 146, 210, 98, 150, 214, 38, 102, 166, 230, 118, 182, 246, 10, 74, 26, 154, 218, 42, 106, 170, 234, 122, 186, 250, 94, 158, 222, 110, 174, 238, 126, 190, 254, 3, 19, 83, 23, 151, 215, 103, 167, 231, 119, 183, 247, 91, 155, 219, 107, 171, 235, 123, 187, 251, 95, 159, 223, 111, 175, 239, 127, 191, 255, 192, 160, 224, 48, 196, 212, 228, 52, 180, 244, 136, 200, 152, 216, 40, 168, 232, 56, 120, 184, 248, 12, 76, 28, 156, 220, 108, 172, 236, 124, 188, 252, 209, 161, 225, 49, 113, 177, 241, 197, 53, 137, 201, 41, 57, 13, 77, 141, 205, 45, 61, 34, 162, 226, 114, 178, 242, 134, 198, 54, 138, 202, 58, 14, 78, 142, 206, 30, 46, 62, 67, 131, 147, 211, 35, 99, 163, 227, 115, 179, 243, 7, 71, 135, 199, 39, 55, 75, 139, 203, 27, 43, 59, 79, 143, 207, 31, 112, 176, 240, 140, 204, 44, 60, 194, 50, 195, 15, 47, 63, 51, 11]);
    this.huff_b35_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 0, 4, 6, 6, 14, 42, 63, 59, 30]);
    this.huff_b35_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 17, 241, 2, 14, 31, 255, 32, 224, 33, 242, 254, 239, 48, 208, 225, 18, 34, 226, 3, 13, 29, 30, 46, 238, 47, 223, 64, 96, 112, 144, 160, 176, 192, 49, 113, 145, 193, 209, 50, 210, 19, 227, 243, 4, 5, 6, 7, 23, 247, 9, 25, 10, 26, 250, 12, 28, 45, 237, 253, 62, 126, 222, 63, 111, 127, 159, 175, 207, 80, 65, 81, 97, 161, 177, 98, 114, 146, 162, 194, 35, 51, 99, 115, 147, 163, 211, 20, 36, 52, 212, 228, 244, 21, 245, 22, 38, 214, 230, 246, 39, 55, 71, 231, 41, 57, 201, 217, 233, 249, 42, 234, 11, 27, 251, 44, 124, 236, 252, 61, 77, 109, 125, 221, 78, 94, 110, 158, 174, 206, 79, 95, 66, 82, 178, 67, 179, 195, 68, 100, 116, 148, 164, 37, 53, 101, 117, 149, 165, 229, 54, 70, 102, 118, 150, 166, 182, 198, 87, 167, 183, 199, 215, 89, 169, 185, 58, 74, 106, 202, 218, 43, 59, 107, 155, 171, 219, 235, 60, 108, 156, 172, 204, 220, 93, 157, 173, 189, 205, 190, 191, 83, 84, 180, 196, 69, 85, 181, 197, 213, 86, 103, 119, 151, 73, 105, 121, 153, 90, 122, 154, 170, 186, 75, 91, 123, 187, 203, 76, 92, 188]);
    this.huff_b37_cb_8be2vx$ = new Int32Array([1, 11, 1, 0, 2, 0, 2, 2, 6, 17, 14, 13, 6]);
    this.huff_b37_xlat_8be2vx$ = new Int32Array([0, 1, 63, 2, 62, 3, 61, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 25, 26, 27, 28, 29, 34, 35, 37, 38, 39, 55, 56, 57, 11, 13, 14, 15, 30, 31, 33, 36, 49, 50, 51, 52, 53, 54, 12, 16, 17, 18, 19, 21, 41, 43, 44, 45, 46, 47, 48, 20, 22, 23, 24, 40, 42]);
    this.huff_b41_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 1, 7, 0, 20, 4, 10, 24, 2, 12]);
    this.huff_b41_xlat_8be2vx$ = new Int32Array([0, 1, 64, 192, 16, 48, 4, 12, 3, 80, 208, 112, 240, 196, 20, 52, 76, 28, 60, 193, 17, 49, 5, 13, 195, 19, 51, 7, 15, 68, 204, 65, 67, 84, 116, 220, 252, 113, 21, 77, 29, 55, 63, 212, 244, 92, 124, 81, 209, 241, 69, 197, 53, 205, 221, 61, 83, 211, 115, 243, 71, 199, 23, 119, 79, 207, 31, 85, 255, 213, 117, 245, 93, 125, 253, 87, 215, 247, 95, 223, 127]);
    this.huff_b42_cb_8be2vx$ = new Int32Array([1, 9, 1, 0, 1, 3, 2, 3, 7, 4, 4]);
    this.huff_b42_xlat_8be2vx$ = new Int32Array([0, 7, 8, 56, 1, 57, 15, 16, 9, 63, 48, 49, 2, 58, 6, 14, 23, 17, 10, 62, 55, 18, 50, 22, 54]);
    this.huff_b43_cb_8be2vx$ = new Int32Array([2, 9, 1, 1, 3, 4, 9, 15, 12, 4]);
    this.huff_b43_xlat_8be2vx$ = new Int32Array([0, 7, 8, 56, 1, 9, 57, 15, 63, 16, 48, 49, 2, 58, 6, 14, 23, 55, 24, 40, 17, 25, 41, 10, 3, 11, 59, 5, 13, 61, 62, 31, 47, 18, 26, 42, 50, 19, 51, 21, 53, 22, 30, 46, 54, 27, 43, 29, 45]);
    this.huff_b47_cb_8be2vx$ = new Int32Array([2, 9, 1, 1, 3, 4, 6, 14, 22, 12]);
    this.huff_b47_xlat_8be2vx$ = new Int32Array([0, 1, 2, 62, 63, 3, 4, 60, 61, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 26, 27, 37, 38, 52, 53, 54, 55, 56, 13, 14, 15, 16, 17, 18, 25, 28, 29, 30, 31, 33, 34, 35, 36, 39, 46, 47, 48, 49, 50, 51, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45]);
    this.huff_b52_cb_8be2vx$ = new Int32Array([1, 9, 1, 0, 1, 3, 2, 3, 7, 4, 4]);
    this.huff_b52_xlat_8be2vx$ = new Int32Array([0, 1, 8, 56, 7, 57, 15, 48, 9, 63, 16, 49, 2, 58, 6, 14, 23, 17, 10, 62, 55, 18, 50, 22, 54]);
    this.huff_b53_cb_8be2vx$ = new Int32Array([1, 5, 1, 1, 1, 0, 4]);
    this.huff_b53_xlat_8be2vx$ = new Int32Array([0, 7, 1, 2, 3, 5, 6]);
    this.huff_b56_cb_8be2vx$ = new Int32Array([1, 9, 1, 0, 2, 0, 2, 4, 11, 9, 2]);
    this.huff_b56_xlat_8be2vx$ = new Int32Array([0, 1, 31, 2, 30, 3, 4, 13, 29, 5, 6, 7, 14, 15, 17, 18, 19, 26, 27, 28, 8, 9, 12, 20, 21, 22, 23, 24, 25, 10, 11]);
    this.huff_b62_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 2, 3, 5, 12, 14, 18, 15, 9, 2]);
    this.huff_b62_xlat_8be2vx$ = new Int32Array([0, 64, 1, 16, 4, 2, 128, 80, 144, 5, 6, 32, 96, 68, 20, 84, 36, 8, 24, 65, 17, 21, 9, 160, 132, 148, 100, 164, 40, 81, 69, 85, 25, 18, 22, 10, 26, 72, 88, 104, 129, 145, 33, 97, 133, 149, 37, 101, 73, 89, 41, 105, 66, 70, 86, 136, 152, 168, 161, 165, 153, 169, 82, 34, 38, 102, 74, 90, 42, 106, 137, 130, 146, 98, 134, 150, 166, 138, 170, 162, 154]);
    this.huff_b63_cb_8be2vx$ = new Int32Array([1, 5, 1, 1, 1, 0, 4]);
    this.huff_b63_xlat_8be2vx$ = new Int32Array([0, 1, 7, 2, 3, 5, 6]);
    this.huff_b64_cb_8be2vx$ = new Int32Array([1, 5, 1, 1, 1, 1, 2]);
    this.huff_b64_xlat_8be2vx$ = new Int32Array([1, 0, 2, 5, 3, 4]);
    this.huff_b65_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 2, 2, 2, 6, 12, 34, 92, 54, 20]);
    this.huff_b65_xlat_8be2vx$ = new Int32Array([0, 240, 1, 16, 15, 17, 241, 32, 224, 2, 14, 31, 255, 208, 33, 225, 18, 242, 7, 10, 13, 30, 254, 47, 239, 48, 112, 144, 160, 192, 113, 145, 193, 209, 50, 146, 226, 3, 19, 99, 4, 6, 230, 231, 247, 9, 25, 57, 250, 12, 28, 221, 237, 253, 46, 126, 158, 63, 159, 64, 80, 96, 176, 49, 65, 97, 161, 177, 34, 66, 114, 162, 178, 194, 210, 35, 51, 115, 163, 195, 211, 227, 243, 20, 36, 52, 68, 116, 212, 228, 5, 37, 69, 101, 149, 165, 22, 38, 70, 118, 166, 182, 198, 214, 246, 23, 39, 55, 71, 103, 167, 215, 41, 105, 185, 217, 233, 249, 26, 42, 58, 154, 202, 218, 234, 11, 27, 59, 107, 235, 251, 44, 108, 236, 252, 29, 45, 77, 109, 157, 173, 62, 78, 110, 174, 206, 238, 79, 95, 111, 223, 81, 82, 98, 67, 147, 179, 84, 148, 164, 244, 21, 117, 181, 229, 245, 54, 86, 102, 150, 87, 119, 73, 89, 169, 201, 74, 90, 106, 122, 170, 186, 43, 75, 123, 155, 171, 219, 60, 76, 124, 156, 172, 188, 204, 61, 93, 125, 189, 205, 94, 190, 222, 191, 207, 83, 100, 180, 196, 53, 85, 197, 213, 151, 183, 199, 121, 153, 91, 187, 203, 92, 220, 127, 175]);
    this.huff_b66_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 3, 0, 3, 3, 10, 40, 85, 61, 50]);
    this.huff_b66_xlat_8be2vx$ = new Int32Array([0, 16, 1, 17, 33, 2, 18, 32, 34, 19, 48, 49, 65, 209, 225, 50, 82, 3, 35, 45, 64, 80, 96, 128, 208, 224, 81, 97, 241, 66, 98, 210, 226, 242, 51, 67, 195, 211, 227, 4, 20, 212, 244, 37, 53, 22, 23, 247, 216, 28, 60, 13, 29, 61, 93, 14, 30, 46, 126, 47, 192, 240, 113, 129, 145, 193, 114, 130, 146, 178, 194, 83, 99, 115, 147, 163, 243, 36, 68, 100, 132, 164, 180, 5, 21, 149, 213, 6, 38, 54, 70, 150, 214, 230, 246, 7, 39, 55, 215, 231, 8, 24, 40, 56, 232, 248, 9, 25, 41, 233, 249, 10, 26, 202, 218, 234, 11, 27, 219, 235, 251, 44, 76, 92, 124, 140, 77, 109, 141, 157, 253, 62, 94, 110, 142, 158, 238, 15, 31, 63, 79, 95, 111, 127, 207, 112, 161, 162, 131, 179, 52, 116, 196, 228, 85, 101, 133, 165, 197, 229, 245, 86, 102, 118, 134, 166, 198, 87, 103, 119, 151, 167, 72, 136, 152, 73, 89, 121, 153, 58, 74, 138, 186, 250, 43, 123, 12, 172, 188, 204, 236, 125, 173, 189, 221, 78, 190, 206, 254, 143, 159, 175, 191, 223, 239, 255, 144, 160, 176, 177, 84, 148, 69, 117, 181, 182, 71, 135, 183, 199, 88, 104, 120, 168, 184, 200, 57, 105, 137, 169, 185, 201, 217, 42, 90, 106, 122, 154, 170, 59, 75, 91, 107, 139, 155, 171, 187, 203, 108, 156, 220, 252, 205, 237, 174, 222]);
    this.huff_b67_cb_8be2vx$ = new Int32Array([2, 9, 1, 2, 1, 4, 7, 10, 26, 12]);
    this.huff_b67_xlat_8be2vx$ = new Int32Array([0, 1, 63, 62, 2, 3, 60, 61, 4, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 52, 53, 54, 55, 56, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45]);
    this.huff_b71_cb_8be2vx$ = new Int32Array([1, 12, 1, 0, 0, 1, 7, 0, 19, 5, 13, 23, 0, 12]);
    this.huff_b71_xlat_8be2vx$ = new Int32Array([0, 3, 64, 192, 16, 48, 4, 12, 1, 80, 208, 112, 240, 196, 20, 52, 76, 28, 60, 193, 17, 49, 5, 13, 19, 51, 7, 15, 68, 204, 65, 67, 195, 84, 116, 220, 252, 241, 197, 21, 29, 83, 199, 55, 79, 63, 212, 244, 92, 124, 81, 209, 113, 69, 85, 53, 77, 205, 221, 61, 211, 115, 243, 71, 23, 119, 207, 31, 255, 213, 117, 245, 93, 125, 253, 87, 215, 247, 95, 223, 127]);
    this.huff_b73_cb_8be2vx$ = new Int32Array([1, 11, 1, 0, 0, 0, 1, 4, 9, 4, 103, 110, 24]);
    this.huff_b73_xlat_8be2vx$ = new Int32Array([0, 64, 16, 4, 1, 5, 80, 20, 84, 65, 17, 81, 69, 21, 85, 68, 149, 106, 3, 128, 192, 144, 208, 148, 212, 36, 100, 88, 145, 161, 133, 213, 37, 101, 165, 229, 117, 181, 245, 25, 89, 153, 217, 105, 169, 233, 121, 185, 249, 77, 93, 157, 221, 109, 173, 237, 125, 189, 253, 2, 66, 82, 6, 70, 22, 86, 150, 214, 38, 102, 166, 230, 118, 182, 246, 26, 90, 154, 218, 170, 234, 122, 186, 250, 94, 158, 222, 110, 174, 238, 126, 190, 254, 7, 71, 87, 151, 215, 103, 167, 231, 119, 183, 247, 91, 155, 219, 107, 171, 235, 123, 187, 251, 95, 159, 223, 111, 175, 239, 127, 191, 255, 32, 96, 112, 176, 240, 132, 196, 164, 228, 116, 180, 244, 8, 136, 24, 152, 216, 104, 168, 232, 120, 184, 248, 28, 92, 156, 220, 108, 172, 236, 60, 124, 188, 252, 129, 209, 33, 97, 225, 113, 177, 241, 197, 53, 9, 73, 137, 201, 41, 57, 13, 141, 205, 29, 45, 61, 146, 210, 34, 98, 162, 226, 114, 178, 242, 134, 198, 54, 10, 74, 138, 202, 42, 58, 14, 78, 142, 206, 30, 46, 62, 19, 83, 147, 211, 99, 163, 227, 115, 179, 243, 135, 199, 23, 39, 55, 11, 75, 139, 203, 27, 43, 59, 15, 79, 143, 207, 31, 47, 63, 160, 224, 48, 52, 72, 200, 40, 56, 12, 76, 140, 204, 44, 193, 49, 130, 194, 18, 50, 67, 131, 195, 35, 51]);
    this.huff_b74_cb_8be2vx$ = new Int32Array([1, 6, 1, 0, 2, 2, 2, 4]);
    this.huff_b74_xlat_8be2vx$ = new Int32Array([0, 1, 15, 2, 14, 5, 13, 3, 4, 11, 12]);
    this.huff_b75_cb_8be2vx$ = new Int32Array([2, 12, 1, 4, 0, 0, 0, 8, 11, 24, 53, 64, 60]);
    this.huff_b75_xlat_8be2vx$ = new Int32Array([0, 16, 240, 1, 15, 32, 224, 17, 241, 2, 14, 31, 255, 208, 33, 225, 18, 242, 3, 13, 30, 254, 47, 239, 48, 64, 96, 112, 144, 160, 192, 49, 209, 34, 226, 19, 243, 4, 6, 7, 9, 12, 29, 253, 46, 238, 63, 223, 80, 176, 65, 97, 113, 145, 161, 193, 50, 98, 114, 146, 162, 210, 35, 211, 227, 20, 244, 5, 22, 38, 230, 246, 23, 39, 231, 247, 25, 41, 249, 10, 26, 42, 250, 11, 28, 44, 252, 45, 61, 237, 62, 78, 126, 158, 222, 79, 111, 127, 159, 175, 207, 81, 177, 66, 82, 178, 194, 51, 99, 115, 147, 163, 179, 195, 36, 52, 116, 164, 212, 228, 21, 37, 101, 149, 229, 245, 54, 214, 55, 71, 199, 215, 57, 89, 185, 201, 217, 233, 58, 106, 218, 234, 27, 43, 155, 171, 235, 251, 108, 124, 156, 172, 236, 77, 109, 125, 157, 173, 189, 221, 94, 110, 174, 206, 95, 67, 83, 68, 84, 100, 148, 180, 196, 53, 69, 85, 117, 165, 181, 197, 213, 70, 86, 102, 118, 150, 166, 182, 198, 87, 103, 119, 151, 167, 183, 73, 105, 121, 153, 169, 74, 90, 122, 154, 170, 186, 202, 59, 75, 91, 107, 123, 187, 203, 219, 60, 76, 92, 188, 204, 220, 93, 205, 190, 191]);
    this.huff_b77_cb_8be2vx$ = new Int32Array([2, 11, 1, 0, 4, 6, 10, 12, 7, 15, 4, 4]);
    this.huff_b77_xlat_8be2vx$ = new Int32Array([0, 1, 2, 62, 63, 3, 4, 5, 59, 60, 61, 6, 7, 8, 9, 10, 54, 55, 56, 57, 58, 11, 12, 13, 14, 15, 16, 47, 49, 50, 51, 52, 53, 17, 18, 19, 20, 45, 46, 48, 21, 22, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 28, 29, 30, 35, 31, 33, 34, 36]);
    this.atrac3p_spectra_tabs_8be2vx$ = [new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_a01_cb_8be2vx$, this.huff_a01_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a02_cb_8be2vx$, this.huff_a02_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a03_cb_8be2vx$, this.huff_a03_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a04_cb_8be2vx$, this.huff_a04_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a05_cb_8be2vx$, this.huff_a05_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 4, 0, -1, this.huff_a06_cb_8be2vx$, this.huff_a06_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a07_cb_8be2vx$, this.huff_a07_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 1, -1, this.huff_a11_cb_8be2vx$, this.huff_a11_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a12_cb_8be2vx$, this.huff_a12_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a13_cb_8be2vx$, this.huff_a13_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a14_cb_8be2vx$, this.huff_a14_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a15_cb_8be2vx$, this.huff_a15_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_a16_cb_8be2vx$, this.huff_a16_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a17_cb_8be2vx$, this.huff_a17_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_a21_cb_8be2vx$, this.huff_a21_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a22_cb_8be2vx$, this.huff_a22_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a23_cb_8be2vx$, this.huff_a23_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a24_cb_8be2vx$, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a25_cb_8be2vx$, this.huff_a25_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_a26_cb_8be2vx$, this.huff_a26_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a27_cb_8be2vx$, this.huff_a27_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 2, 1, -1, this.huff_a31_cb_8be2vx$, this.huff_a31_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a32_cb_8be2vx$, this.huff_a32_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a33_cb_8be2vx$, this.huff_a33_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a34_cb_8be2vx$, this.huff_a34_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a35_cb_8be2vx$, this.huff_a35_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_a36_cb_8be2vx$, this.huff_a36_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a37_cb_8be2vx$, this.huff_a37_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_a41_cb_8be2vx$, this.huff_a41_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a42_cb_8be2vx$, this.huff_a42_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 1, -1, this.huff_a43_cb_8be2vx$, this.huff_a43_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a44_cb_8be2vx$, this.huff_a44_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a45_cb_8be2vx$, this.huff_a45_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_a46_cb_8be2vx$, this.huff_a46_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a47_cb_8be2vx$, this.huff_a47_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_a51_cb_8be2vx$, this.huff_a51_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a52_cb_8be2vx$, this.huff_a52_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 1, -1, this.huff_a43_cb_8be2vx$, this.huff_a53_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a54_cb_8be2vx$, this.huff_a54_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_a55_cb_8be2vx$, this.huff_a55_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 5, 1, -1, this.huff_a56_cb_8be2vx$, this.huff_a56_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a57_cb_8be2vx$, this.huff_a57_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 4, 2, 1, -1, this.huff_a61_cb_8be2vx$, this.huff_a61_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a62_cb_8be2vx$, this.huff_a62_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_a63_cb_8be2vx$, this.huff_a63_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a64_cb_8be2vx$, this.huff_a64_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 4, 1, -1, this.huff_a65_cb_8be2vx$, this.huff_a65_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 5, 1, -1, this.huff_a66_cb_8be2vx$, this.huff_a66_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_a67_cb_8be2vx$, this.huff_a67_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 1, 0, -1, this.huff_a71_cb_8be2vx$, null), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 4, 2, 0, -1, this.huff_a72_cb_8be2vx$, this.huff_a72_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_a73_cb_8be2vx$, this.huff_a73_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_a74_cb_8be2vx$, this.huff_a74_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 4, 1, -1, this.huff_a75_cb_8be2vx$, this.huff_a75_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 2, 4, 0, -1, this.huff_a76_cb_8be2vx$, this.huff_a76_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 1, 6, 1, 6, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 1, -1, this.huff_b01_cb_8be2vx$, this.huff_b01_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_b02_cb_8be2vx$, this.huff_b02_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 2, 3, 1, -1, this.huff_b03_cb_8be2vx$, this.huff_b03_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_b04_cb_8be2vx$, this.huff_b04_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_b05_cb_8be2vx$, this.huff_b05_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 4, 0, 5, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_b07_cb_8be2vx$, this.huff_b07_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, 14, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_b12_cb_8be2vx$, this.huff_b12_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, 9, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_b14_cb_8be2vx$, this.huff_b14_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, 11, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_b16_cb_8be2vx$, this.huff_b16_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, 6, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 1, 28, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 0, 22, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, 2, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, 31, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 2, 4, 1, 60, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 2, 4, 0, -1, this.huff_b26_cb_8be2vx$, this.huff_b26_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 1, 6, 1, 6, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, 35, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_b32_cb_8be2vx$, this.huff_b32_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_b33_cb_8be2vx$, this.huff_b33_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 2, 4, 1, 59, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_b35_cb_8be2vx$, this.huff_b35_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, 75, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_b37_cb_8be2vx$, this.huff_b37_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_b41_cb_8be2vx$, this.huff_b41_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 2, 3, 1, -1, this.huff_b42_cb_8be2vx$, this.huff_b42_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_b43_cb_8be2vx$, this.huff_b43_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 2, 4, 1, 66, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, 32, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, 12, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_b47_cb_8be2vx$, this.huff_b47_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 4, 2, 1, 42, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 3, 1, -1, this.huff_b52_cb_8be2vx$, this.huff_b52_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 1, 3, 1, -1, this.huff_b53_cb_8be2vx$, this.huff_b53_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, 17, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, 39, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 5, 1, -1, this.huff_b56_cb_8be2vx$, this.huff_b56_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(2, 1, 6, 1, 62, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, 28, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 0, -1, this.huff_b62_cb_8be2vx$, this.huff_b62_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 1, -1, this.huff_b63_cb_8be2vx$, this.huff_b63_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 3, 0, -1, this.huff_b64_cb_8be2vx$, this.huff_b64_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 2, 4, 1, -1, this.huff_b65_cb_8be2vx$, this.huff_b65_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 0, -1, this.huff_b66_cb_8be2vx$, this.huff_b66_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_b67_cb_8be2vx$, this.huff_b67_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 4, 2, 1, -1, this.huff_b71_cb_8be2vx$, this.huff_b71_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 0, 78, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(4, 4, 2, 0, -1, this.huff_b73_cb_8be2vx$, this.huff_b73_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 4, 1, -1, this.huff_b74_cb_8be2vx$, this.huff_b74_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 2, 4, 1, -1, this.huff_b75_cb_8be2vx$, this.huff_b75_xlat_8be2vx$), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 5, 1, 47, null, null), new Atrac3plusData1$Atrac3pSpecCodeTab(1, 1, 6, 1, -1, this.huff_b77_cb_8be2vx$, this.huff_b77_xlat_8be2vx$)];
  }
  function Atrac3plusData1$Atrac3pSpecCodeTab(groupSize, numCoeffs, bits, is_signed, redirect, cb, xlat) {
    this.groupSize = groupSize;
    this.numCoeffs = numCoeffs;
    this.bits = bits;
    this.redirect = redirect;
    this.cb = cb;
    this.xlat = xlat;
    this.isSigned = false;
    this.isSigned = is_signed !== 0;
  }
  Atrac3plusData1$Atrac3pSpecCodeTab.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Atrac3pSpecCodeTab',
    interfaces: []
  };
  Atrac3plusData1.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Atrac3plusData1',
    interfaces: []
  };
  var Atrac3plusData1_instance = null;
  function Atrac3plusData1_getInstance() {
    if (Atrac3plusData1_instance === null) {
      new Atrac3plusData1();
    }
    return Atrac3plusData1_instance;
  }
  function Atrac3plusData2() {
    Atrac3plusData2_instance = this;
    this.atrac3p_wl_huff_code1_8be2vx$ = new Int32Array([0, 2, 3]);
    this.atrac3p_wl_huff_bits1_8be2vx$ = new Int32Array([1, 2, 2]);
    this.atrac3p_wl_huff_xlat1_8be2vx$ = new Int32Array([0, 1, 7]);
    this.atrac3p_wl_huff_code2_8be2vx$ = new Int32Array([0, 4, 5, 6, 7]);
    this.atrac3p_wl_huff_bits2_8be2vx$ = new Int32Array([1, 3, 3, 3, 3]);
    this.atrac3p_wl_huff_xlat2_8be2vx$ = new Int32Array([0, 1, 2, 6, 7]);
    this.atrac3p_wl_huff_code3_8be2vx$ = new Int32Array([0, 4, 12, 30, 31, 13, 14, 5]);
    this.atrac3p_wl_huff_bits3_8be2vx$ = new Int32Array([1, 3, 4, 5, 5, 4, 4, 3]);
    this.atrac3p_wl_huff_code4_8be2vx$ = new Int32Array([0, 4, 12, 13, 30, 31, 14, 5]);
    this.atrac3p_wl_huff_bits4_8be2vx$ = new Int32Array([1, 3, 4, 4, 5, 5, 4, 3]);
    this.atrac3p_sf_huff_code1_8be2vx$ = new Int32Array([0, 2, 3, 4, 5, 12, 13, 224, 225, 226, 227, 228, 229, 230, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]);
    this.atrac3p_sf_huff_bits1_8be2vx$ = new Int32Array([2, 3, 3, 3, 3, 4, 4, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]);
    this.atrac3p_sf_huff_xlat1_8be2vx$ = new Int32Array([0, 1, 61, 62, 63, 2, 60, 3, 4, 5, 6, 57, 58, 59, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]);
    this.atrac3p_sf_huff_xlat2_8be2vx$ = new Int32Array([0, 1, 2, 62, 63, 3, 61, 4, 5, 6, 57, 58, 59, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]);
    this.atrac3p_sf_huff_code2_8be2vx$ = new Int32Array([0, 4, 24, 25, 112, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 228, 113, 26, 27, 5]);
    this.atrac3p_sf_huff_bits2_8be2vx$ = new Int32Array([1, 3, 5, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 5, 5, 3]);
    this.atrac3p_sf_huff_code3_8be2vx$ = new Int32Array([0, 2, 3, 24, 25, 112, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 113, 114, 26, 27, 4, 5]);
    this.atrac3p_sf_huff_bits3_8be2vx$ = new Int32Array([2, 3, 3, 5, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 5, 5, 3, 3]);
    this.atrac3p_sf_huff_code4_8be2vx$ = new Int32Array([0, 2, 3, 4, 5, 12, 13, 56, 57, 58, 59, 60, 0, 61, 62, 63]);
    this.atrac3p_sf_huff_bits4_8be2vx$ = new Int32Array([2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 0, 6, 6, 6]);
    this.atrac3p_sf_huff_xlat4_8be2vx$ = new Int32Array([0, 1, 13, 14, 15, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
    this.atrac3p_sf_huff_xlat5_8be2vx$ = new Int32Array([0, 1, 2, 14, 15, 3, 13, 4, 5, 6, 7, 9, 8, 10, 11, 12]);
    this.atrac3p_sf_huff_code5_8be2vx$ = new Int32Array([0, 4, 12, 28, 120, 121, 122, 123, 0, 124, 125, 126, 127, 29, 13, 5]);
    this.atrac3p_sf_huff_bits5_8be2vx$ = new Int32Array([1, 3, 4, 5, 7, 7, 7, 7, 0, 7, 7, 7, 7, 5, 4, 3]);
    this.atrac3p_sf_huff_code6_8be2vx$ = new Int32Array([0, 2, 3, 12, 28, 60, 124, 125, 0, 126, 127, 61, 29, 13, 4, 5]);
    this.atrac3p_sf_huff_bits6_8be2vx$ = new Int32Array([2, 3, 3, 4, 5, 6, 7, 7, 0, 7, 7, 6, 5, 4, 3, 3]);
    this.atrac3p_ct_huff_code1_8be2vx$ = new Int32Array([0, 2, 6, 7]);
    this.atrac3p_ct_huff_bits1_8be2vx$ = new Int32Array([1, 2, 3, 3]);
    this.atrac3p_ct_huff_code2_8be2vx$ = new Int32Array([0, 2, 3, 4, 5, 6, 14, 15]);
    this.atrac3p_ct_huff_bits2_8be2vx$ = new Int32Array([2, 3, 3, 3, 3, 3, 4, 4]);
    this.atrac3p_ct_huff_xlat1_8be2vx$ = new Int32Array([0, 1, 2, 3, 6, 7, 4, 5]);
    this.atrac3p_ct_huff_code3_8be2vx$ = new Int32Array([0, 4, 10, 11, 12, 13, 14, 15]);
    this.atrac3p_ct_huff_bits3_8be2vx$ = new Int32Array([1, 3, 4, 4, 4, 4, 4, 4]);
    this.atrac3p_wl_weights_8be2vx$ = [new Int32Array([5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([6, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), new Int32Array([5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([6, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])];
    this.atrac3p_sf_weights_8be2vx$ = [new Int32Array([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]), new Int32Array([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10])];
    this.atrac3p_qu_num_to_seg_8be2vx$ = new Int32Array([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9]);
    this.atrac3p_qu_to_subband_8be2vx$ = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
    this.atrac3p_subband_to_num_powgrps_8be2vx$ = new Int32Array([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]);
    this.atrac3p_wl_shapes_8be2vx$ = [[new Int32Array([0, 0, 0, 0, 0, 0, 0, -2, -1]), new Int32Array([0, 0, 0, 0, 0, 0, 0, -5, -1]), new Int32Array([0, 0, 0, -7, 0, 0, 0, 0, 0]), new Int32Array([0, 0, 0, 0, 0, -7, 0, 0, 0]), new Int32Array([0, 0, 0, 0, 0, 0, -5, 0, 0]), new Int32Array([0, 0, 0, 0, -5, 0, 0, 0, 0]), new Int32Array([-7, -7, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([0, -7, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([-2, -2, -5, 0, 0, 0, 0, 0, 0]), new Int32Array([0, 0, 0, -2, -5, 0, 0, 0, 0]), new Int32Array([0, 0, 0, 0, 0, -2, -5, 0, 0]), new Int32Array([0, 0, 0, -5, 0, 0, 0, 0, 0]), new Int32Array([0, -2, -7, -2, 0, 0, 0, 0, 0]), new Int32Array([0, 0, 0, 0, -2, -5, 0, 0, 0]), new Int32Array([0, 0, 0, -5, -5, 0, 0, 0, 0]), new Int32Array([0, 0, 0, -5, -2, 0, 0, 0, 0])], [new Int32Array([-1, -5, -3, -2, -1, -1, 0, 0, 0]), new Int32Array([-2, -5, -3, -3, -2, -1, -1, 0, 0]), new Int32Array([0, -1, -1, -1, 0, 0, 0, 0, 0]), new Int32Array([-1, -3, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([-1, -2, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([-1, -3, -1, 0, 0, 0, 0, 1, 1]), new Int32Array([-1, -5, -3, -3, -2, -1, 0, 0, 0]), new Int32Array([-1, -1, -4, -2, -2, -1, -1, 0, 0]), new Int32Array([-1, -1, -3, -2, -3, -1, -1, -1, 0]), new Int32Array([-1, -4, -2, -3, -1, 0, 0, 0, 0]), new Int32Array([0, -1, -2, -2, -1, -1, 0, 0, 0]), new Int32Array([0, -2, -1, 0, 0, 0, 0, 0, 0]), new Int32Array([-1, -1, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([-1, -1, -3, -2, -2, -1, -1, -1, 0]), new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0]), new Int32Array([0, -1, -3, -2, -2, -1, -1, -1, 0])], [new Int32Array([-1, -2, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -1, 1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -2, 1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -2, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([-1, -1, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([0, 0, -1, 0, 1, 1, 1, 1, 1]), new Int32Array([-1, -1, 1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, 0, -1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -1, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([-1, -1, -1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, 0, 0, 0, 1, 1, 1, 1, 1]), new Int32Array([0, 0, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -1, -1, 1, 1, 1, 1, 1, 1]), new Int32Array([0, 1, 0, 1, 1, 1, 1, 1, 1]), new Int32Array([0, -3, -2, 1, 1, 1, 1, 2, 2]), new Int32Array([-3, -5, -3, 2, 2, 2, 2, 2, 2])], [new Int32Array([-1, -2, 0, 2, 2, 2, 2, 2, 2]), new Int32Array([-1, -2, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([0, -2, 0, 2, 2, 2, 2, 2, 2]), new Int32Array([-1, 0, 1, 2, 2, 2, 2, 2, 2]), new Int32Array([0, 0, 1, 2, 2, 2, 2, 2, 2]), new Int32Array([0, -2, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([0, -1, 1, 2, 2, 2, 2, 2, 2]), new Int32Array([-1, -1, 0, 2, 2, 2, 2, 2, 2]), new Int32Array([-1, -1, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([-1, -2, -1, 2, 2, 2, 2, 2, 2]), new Int32Array([0, -1, 0, 2, 2, 2, 2, 2, 2]), new Int32Array([1, 1, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([0, 1, 2, 2, 2, 2, 2, 2, 2]), new Int32Array([1, 0, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([0, 0, 0, 1, 2, 2, 2, 2, 2]), new Int32Array([-1, -1, -1, 1, 2, 2, 2, 2, 2])], [new Int32Array([0, 1, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([1, 1, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([-1, 0, 1, 2, 3, 3, 3, 3, 3]), new Int32Array([0, 0, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([-1, 0, 1, 3, 3, 3, 3, 3, 3]), new Int32Array([0, 0, 1, 3, 3, 3, 3, 3, 3]), new Int32Array([1, 2, 3, 3, 3, 3, 3, 3, 3]), new Int32Array([1, 2, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([0, 1, 1, 3, 3, 3, 3, 3, 3]), new Int32Array([0, 0, 1, 2, 3, 3, 3, 3, 3]), new Int32Array([-1, 1, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([-1, 0, 2, 3, 3, 3, 3, 3, 3]), new Int32Array([2, 2, 3, 3, 3, 3, 3, 3, 3]), new Int32Array([1, 1, 3, 3, 3, 3, 3, 3, 3]), new Int32Array([0, 2, 3, 3, 3, 3, 3, 3, 3]), new Int32Array([0, 1, 1, 2, 3, 3, 3, 3, 3])], [new Int32Array([0, 1, 2, 3, 4, 4, 4, 4, 4]), new Int32Array([1, 2, 3, 4, 4, 4, 4, 4, 4]), new Int32Array([0, 0, 2, 3, 4, 4, 4, 4, 4]), new Int32Array([1, 1, 2, 4, 4, 4, 4, 4, 4]), new Int32Array([0, 1, 2, 4, 4, 4, 4, 4, 4]), new Int32Array([-1, 0, 1, 3, 4, 4, 4, 4, 4]), new Int32Array([0, 0, 1, 3, 4, 4, 4, 4, 4]), new Int32Array([1, 1, 2, 3, 4, 4, 4, 4, 4]), new Int32Array([0, 1, 1, 3, 4, 4, 4, 4, 4]), new Int32Array([2, 2, 3, 4, 4, 4, 4, 4, 4]), new Int32Array([1, 1, 3, 4, 4, 4, 4, 4, 4]), new Int32Array([1, 2, 2, 4, 4, 4, 4, 4, 4]), new Int32Array([-1, 0, 2, 3, 4, 4, 4, 4, 4]), new Int32Array([0, 1, 3, 4, 4, 4, 4, 4, 4]), new Int32Array([1, 2, 2, 3, 4, 4, 4, 4, 4]), new Int32Array([0, 2, 3, 4, 4, 4, 4, 4, 4])], [new Int32Array([1, 2, 3, 4, 5, 5, 5, 5, 5]), new Int32Array([0, 1, 2, 3, 4, 5, 5, 5, 5]), new Int32Array([0, 1, 2, 3, 5, 5, 5, 5, 5]), new Int32Array([1, 1, 3, 4, 5, 5, 5, 5, 5]), new Int32Array([1, 1, 2, 4, 5, 5, 5, 5, 5]), new Int32Array([1, 2, 2, 4, 5, 5, 5, 5, 5]), new Int32Array([1, 1, 2, 3, 5, 5, 5, 5, 5]), new Int32Array([2, 2, 3, 4, 5, 5, 5, 5, 5]), new Int32Array([0, 1, 2, 4, 5, 5, 5, 5, 5]), new Int32Array([2, 2, 3, 5, 5, 5, 5, 5, 5]), new Int32Array([1, 2, 3, 5, 5, 5, 5, 5, 5]), new Int32Array([0, 1, 3, 4, 5, 5, 5, 5, 5]), new Int32Array([1, 2, 2, 3, 5, 5, 5, 5, 5]), new Int32Array([2, 3, 4, 5, 5, 5, 5, 5, 5]), new Int32Array([0, 2, 3, 4, 5, 5, 5, 5, 5]), new Int32Array([1, 1, 1, 3, 4, 5, 5, 5, 5])], [new Int32Array([1, 2, 3, 4, 5, 5, 5, 6, 6]), new Int32Array([1, 2, 3, 4, 5, 6, 6, 6, 6]), new Int32Array([2, 3, 4, 5, 6, 6, 6, 6, 6]), new Int32Array([1, 2, 3, 4, 6, 6, 6, 6, 6]), new Int32Array([2, 2, 3, 4, 5, 5, 5, 6, 6]), new Int32Array([1, 2, 3, 4, 5, 5, 6, 6, 6]), new Int32Array([2, 2, 3, 4, 6, 6, 6, 6, 6]), new Int32Array([2, 2, 3, 4, 5, 6, 6, 6, 6]), new Int32Array([2, 2, 4, 5, 6, 6, 6, 6, 6]), new Int32Array([2, 2, 3, 5, 6, 6, 6, 6, 6]), new Int32Array([1, 2, 3, 5, 6, 6, 6, 6, 6]), new Int32Array([2, 3, 3, 5, 6, 6, 6, 6, 6]), new Int32Array([1, 2, 4, 5, 6, 6, 6, 6, 6]), new Int32Array([2, 2, 3, 4, 5, 5, 6, 6, 6]), new Int32Array([2, 3, 3, 4, 6, 6, 6, 6, 6]), new Int32Array([1, 3, 4, 5, 6, 6, 6, 6, 6])]];
    this.atrac3p_sf_shapes_8be2vx$ = [new Int32Array([-3, -2, -1, 0, 3, 5, 6, 8, 40]), new Int32Array([-3, -2, 0, 1, 7, 9, 11, 13, 20]), new Int32Array([-1, 0, 0, 1, 6, 8, 10, 13, 41]), new Int32Array([0, 0, 0, 2, 5, 5, 6, 8, 14]), new Int32Array([0, 0, 0, 2, 6, 7, 8, 11, 47]), new Int32Array([0, 0, 1, 2, 5, 7, 8, 10, 32]), new Int32Array([0, 0, 1, 3, 8, 10, 12, 14, 47]), new Int32Array([0, 0, 2, 4, 9, 10, 12, 14, 40]), new Int32Array([0, 0, 3, 5, 9, 10, 12, 14, 22]), new Int32Array([0, 1, 3, 5, 10, 14, 18, 22, 31]), new Int32Array([0, 2, 5, 6, 10, 10, 10, 12, 46]), new Int32Array([0, 2, 5, 7, 12, 14, 15, 18, 44]), new Int32Array([1, 1, 4, 5, 7, 7, 8, 9, 15]), new Int32Array([1, 2, 2, 2, 4, 5, 7, 9, 26]), new Int32Array([1, 2, 2, 3, 6, 7, 7, 8, 47]), new Int32Array([1, 2, 2, 3, 6, 8, 10, 13, 22]), new Int32Array([1, 3, 4, 7, 13, 17, 21, 24, 41]), new Int32Array([1, 4, 0, 4, 10, 12, 13, 14, 17]), new Int32Array([2, 3, 3, 3, 6, 8, 10, 13, 48]), new Int32Array([2, 3, 3, 4, 9, 12, 14, 17, 47]), new Int32Array([2, 3, 3, 5, 10, 12, 14, 17, 25]), new Int32Array([2, 3, 5, 7, 8, 9, 9, 9, 13]), new Int32Array([2, 3, 5, 9, 16, 21, 25, 28, 33]), new Int32Array([2, 4, 5, 8, 12, 14, 17, 19, 26]), new Int32Array([2, 4, 6, 8, 12, 13, 13, 15, 20]), new Int32Array([2, 4, 7, 12, 20, 26, 30, 32, 35]), new Int32Array([3, 3, 5, 6, 12, 14, 16, 19, 34]), new Int32Array([3, 4, 4, 5, 7, 9, 10, 11, 48]), new Int32Array([3, 4, 5, 6, 8, 9, 10, 11, 16]), new Int32Array([3, 5, 5, 5, 7, 9, 10, 13, 35]), new Int32Array([3, 5, 5, 7, 10, 12, 13, 15, 49]), new Int32Array([3, 5, 7, 7, 8, 7, 9, 12, 21]), new Int32Array([3, 5, 7, 8, 12, 14, 15, 15, 24]), new Int32Array([3, 5, 7, 10, 16, 21, 24, 27, 44]), new Int32Array([3, 5, 8, 14, 21, 26, 28, 29, 42]), new Int32Array([3, 6, 10, 13, 18, 19, 20, 22, 27]), new Int32Array([3, 6, 11, 16, 24, 27, 28, 29, 31]), new Int32Array([4, 5, 4, 3, 4, 6, 8, 11, 18]), new Int32Array([4, 6, 5, 6, 9, 10, 12, 14, 20]), new Int32Array([4, 6, 7, 6, 6, 6, 7, 8, 46]), new Int32Array([4, 6, 7, 9, 13, 16, 18, 20, 48]), new Int32Array([4, 6, 7, 9, 14, 17, 20, 23, 31]), new Int32Array([4, 6, 9, 11, 14, 15, 15, 17, 21]), new Int32Array([4, 8, 13, 20, 27, 32, 35, 36, 38]), new Int32Array([5, 6, 6, 4, 5, 6, 7, 6, 6]), new Int32Array([5, 7, 7, 8, 9, 9, 10, 12, 49]), new Int32Array([5, 8, 9, 9, 10, 11, 12, 13, 42]), new Int32Array([5, 8, 10, 12, 15, 16, 17, 19, 42]), new Int32Array([5, 8, 12, 17, 26, 31, 32, 33, 44]), new Int32Array([5, 9, 13, 16, 20, 22, 23, 23, 35]), new Int32Array([6, 8, 8, 7, 6, 5, 6, 8, 15]), new Int32Array([6, 8, 8, 8, 9, 10, 12, 16, 24]), new Int32Array([6, 8, 8, 9, 10, 10, 11, 11, 13]), new Int32Array([6, 8, 10, 13, 19, 21, 24, 26, 32]), new Int32Array([6, 9, 10, 11, 13, 13, 14, 16, 49]), new Int32Array([7, 9, 9, 10, 13, 14, 16, 19, 27]), new Int32Array([7, 10, 12, 13, 16, 16, 17, 17, 27]), new Int32Array([7, 10, 12, 14, 17, 19, 20, 22, 48]), new Int32Array([8, 9, 10, 9, 10, 11, 11, 11, 19]), new Int32Array([8, 11, 12, 12, 13, 13, 13, 13, 17]), new Int32Array([8, 11, 13, 14, 16, 17, 19, 20, 27]), new Int32Array([8, 12, 17, 22, 26, 28, 29, 30, 33]), new Int32Array([10, 14, 16, 19, 21, 22, 22, 24, 28]), new Int32Array([10, 15, 17, 18, 21, 22, 23, 25, 43])];
    this.atrac3p_ct_restricted_to_full_8be2vx$ = [[new Int32Array([0, 5, 4, 1]), new Int32Array([0, 1, 2, 3]), new Int32Array([3, 0, 4, 2]), new Int32Array([4, 0, 1, 2]), new Int32Array([1, 0, 4, 3]), new Int32Array([3, 0, 2, 1]), new Int32Array([0, 3, 1, 2])], [new Int32Array([4, 0, 1, 2]), new Int32Array([0, 3, 2, 1]), new Int32Array([0, 1, 2, 3]), new Int32Array([0, 1, 2, 4]), new Int32Array([0, 1, 2, 3]), new Int32Array([1, 4, 2, 0]), new Int32Array([0, 1, 2, 3])]];
    this.atrac3p_huff_gain_npoints1_cb_8be2vx$ = new Int32Array([1, 7, 1, 1, 1, 1, 1, 1, 2]);
    this.atrac3p_huff_gain_npoints2_xlat_8be2vx$ = new Int32Array([0, 1, 7, 2, 6, 3, 4, 5]);
    this.atrac3p_huff_gain_lev1_cb_8be2vx$ = new Int32Array([1, 7, 1, 0, 2, 2, 1, 2, 8]);
    this.atrac3p_huff_gain_lev1_xlat_8be2vx$ = new Int32Array([7, 5, 8, 6, 9, 4, 10, 11, 0, 1, 2, 3, 12, 13, 14, 15]);
    this.atrac3p_huff_gain_lev2_cb_8be2vx$ = new Int32Array([1, 9, 1, 1, 1, 1, 1, 0, 2, 0, 8]);
    this.atrac3p_huff_gain_lev2_xlat_8be2vx$ = new Int32Array([15, 14, 1, 13, 2, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11]);
    this.atrac3p_huff_gain_lev3_cb_8be2vx$ = new Int32Array([1, 9, 1, 0, 3, 1, 1, 0, 2, 0, 8]);
    this.atrac3p_huff_gain_lev3_xlat_8be2vx$ = new Int32Array([0, 1, 14, 15, 2, 13, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11]);
    this.atrac3p_huff_gain_lev4_cb_8be2vx$ = new Int32Array([1, 9, 1, 1, 1, 1, 1, 0, 1, 2, 8]);
    this.atrac3p_huff_gain_lev4_xlat_8be2vx$ = new Int32Array([0, 1, 15, 14, 2, 13, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11]);
    this.atrac3p_huff_gain_loc1_cb_8be2vx$ = new Int32Array([2, 8, 1, 2, 4, 4, 4, 0, 16]);
    this.atrac3p_huff_gain_loc1_xlat_8be2vx$ = new Int32Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
    this.atrac3p_huff_gain_loc2_cb_8be2vx$ = new Int32Array([3, 8, 5, 3, 2, 3, 2, 16]);
    this.atrac3p_huff_gain_loc2_xlat_8be2vx$ = new Int32Array([2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);
    this.atrac3p_huff_gain_loc3_cb_8be2vx$ = new Int32Array([2, 6, 1, 0, 2, 11, 18]);
    this.atrac3p_huff_gain_loc3_xlat_8be2vx$ = new Int32Array([0, 1, 31, 2, 3, 4, 5, 6, 7, 26, 27, 28, 29, 30, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);
    this.atrac3p_huff_gain_loc4_cb_8be2vx$ = new Int32Array([4, 6, 3, 23, 6]);
    this.atrac3p_huff_gain_loc4_xlat_8be2vx$ = new Int32Array([0, 28, 29, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 5, 6, 7, 8, 9, 10]);
    this.atrac3p_huff_gain_loc5_cb_8be2vx$ = new Int32Array([1, 7, 1, 0, 0, 3, 2, 6, 20]);
    this.atrac3p_huff_gain_loc5_xlat_8be2vx$ = new Int32Array([0, 1, 2, 31, 3, 4, 5, 6, 7, 8, 29, 30, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);
    this.atrac3p_huff_tonebands_cb_8be2vx$ = new Int32Array([1, 6, 1, 0, 1, 2, 4, 8]);
    this.atrac3p_huff_numwavs1_cb_8be2vx$ = new Int32Array([1, 7, 1, 1, 1, 1, 1, 1, 2]);
    this.atrac3p_huff_numwavs2_cb_8be2vx$ = new Int32Array([1, 6, 1, 1, 1, 1, 0, 4]);
    this.atrac3p_huff_numwavs2_xlat_8be2vx$ = new Int32Array([0, 1, 7, 2, 3, 4, 5, 6]);
    this.atrac3p_huff_wav_ampsf1_cb_8be2vx$ = new Int32Array([4, 8, 10, 8, 6, 0, 8]);
    this.atrac3p_huff_wav_ampsf1_xlat_8be2vx$ = new Int32Array([8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 18, 19, 20, 21, 22, 4, 23, 24, 25, 26, 27, 0, 1, 2, 3, 28, 29, 30, 31]);
    this.atrac3p_huff_wav_ampsf2_cb_8be2vx$ = new Int32Array([4, 8, 11, 5, 6, 6, 4]);
    this.atrac3p_huff_wav_ampsf2_xlat_8be2vx$ = new Int32Array([18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14, 15, 16, 17, 29, 9, 10, 11, 12, 13, 30, 4, 5, 6, 7, 8, 31, 0, 1, 2, 3]);
    this.atrac3p_huff_wav_ampsf3_cb_8be2vx$ = new Int32Array([2, 8, 1, 3, 3, 1, 4, 4, 16]);
    this.atrac3p_huff_wav_ampsf3_xlat_8be2vx$ = new Int32Array([0, 1, 2, 31, 3, 29, 30, 4, 5, 6, 27, 28, 7, 24, 25, 26, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);
    this.atrac3p_huff_freq_cb_8be2vx$ = new Int32Array([1, 11, 1, 0, 0, 2, 2, 0, 9, 9, 29, 104, 100]);
    this.atrac3p_huff_freq_xlat_8be2vx$ = new Int32Array([0, 1, 255, 2, 254, 3, 4, 5, 6, 7, 8, 251, 252, 253, 9, 10, 11, 12, 246, 247, 248, 249, 250, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 243, 244, 245, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193]);
  }
  Atrac3plusData2.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Atrac3plusData2',
    interfaces: []
  };
  var Atrac3plusData2_instance = null;
  function Atrac3plusData2_getInstance() {
    if (Atrac3plusData2_instance === null) {
      new Atrac3plusData2();
    }
    return Atrac3plusData2_instance;
  }
  function Atrac3plusDecoder() {
    Atrac3plusDecoder$Companion_getInstance();
    this.ctx_0 = null;
  }
  Object.defineProperty(Atrac3plusDecoder.prototype, 'numberOfSamples', {
    get: function () {
      return Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES;
    }
  });
  Atrac3plusDecoder.prototype.init_tjonv8$ = function (bytesPerFrame, channels, outputChannels, codingMode) {
    var tmp$;
    this.ctx_0 = new Context();
    ensureNotNull(this.ctx_0).outputChannels = outputChannels;
    ensureNotNull(this.ctx_0).dsp = new Atrac3plusDsp();
    tmp$ = ensureNotNull(this.ctx_0).numChannelBlocks;
    for (var i = 0; i < tmp$; i++) {
      ensureNotNull(this.ctx_0).channelUnits[i] = new ChannelUnit();
      ensureNotNull(ensureNotNull(this.ctx_0).channelUnits[i]).setDsp_w5lqns$(ensureNotNull(ensureNotNull(this.ctx_0).dsp));
    }
    ensureNotNull(this.ctx_0).ipqfDctCtx = new FFT();
    ensureNotNull(ensureNotNull(this.ctx_0).ipqfDctCtx).mdctInit_x0zet3$(5, true, 31.0 / 32768.9);
    ensureNotNull(this.ctx_0).mdctCtx = new FFT();
    ensureNotNull(ensureNotNull(this.ctx_0).dsp).initImdct_6lu03$(ensureNotNull(ensureNotNull(this.ctx_0).mdctCtx));
    Atrac3plusDsp$Companion_getInstance().initWaveSynth();
    ensureNotNull(this.ctx_0).gaincCtx = new Atrac();
    ensureNotNull(ensureNotNull(this.ctx_0).gaincCtx).initGainCompensation_vux9f0$(6, 2);
    return 0;
  };
  Atrac3plusDecoder.prototype.decode_ojvk5q$ = function (mem, inputAddr, inputLength, output) {
    var ret;
    if (this.ctx_0 == null) {
      return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
    }
    if (inputLength < 0) {
      return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
    }
    if (inputLength === 0) {
      return 0;
    }
    ensureNotNull(this.ctx_0).br = new BitReader(mem, inputAddr, inputLength);
    if (ensureNotNull(ensureNotNull(this.ctx_0).br).readBool()) {
      var $this = Atrac3plusDecoder$Companion_getInstance().log;
      var level = LogLevel.ERROR;
      if ($this.isEnabled_ci8eq1$(level)) {
        $this.actualLog_t189ph$(level, 'Invalid start bit');
      }
      return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
    }
    var chBlock = {v: 0};
    var channelsToProcess = 0;
    while (ensureNotNull(ensureNotNull(this.ctx_0).br).bitsLeft >= 2) {
      var chUnitId = ensureNotNull(ensureNotNull(this.ctx_0).br).read_za3lpa$(2);
      if (chUnitId === Atrac3plusDecoder$Companion_getInstance().CH_UNIT_TERMINATOR) {
        break;
      }
      if (chUnitId === Atrac3plusDecoder$Companion_getInstance().CH_UNIT_EXTENSION) {
        var $this_0 = Atrac3plusDecoder$Companion_getInstance().log;
        var level_0 = LogLevel.WARN;
        if ($this_0.isEnabled_ci8eq1$(level_0)) {
          $this_0.actualLog_t189ph$(level_0, 'Non implemented channel unit extension');
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
      if (chBlock.v >= ensureNotNull(this.ctx_0).channelUnits.length) {
        var $this_1 = Atrac3plusDecoder$Companion_getInstance().log;
        var level_1 = LogLevel.ERROR;
        if ($this_1.isEnabled_ci8eq1$(level_1)) {
          $this_1.actualLog_t189ph$(level_1, 'Too many channel blocks');
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
      if (ensureNotNull(this.ctx_0).channelUnits[chBlock.v] == null) {
        var $this_2 = Atrac3plusDecoder$Companion_getInstance().log;
        var level_2 = LogLevel.WARN;
        if ($this_2.isEnabled_ci8eq1$(level_2)) {
          $this_2.actualLog_t189ph$(level_2, 'Null channelUnits block: ' + chBlock.v);
        }
        break;
      }
      var channelUnit = ensureNotNull(ensureNotNull(this.ctx_0).channelUnits[chBlock.v]);
      channelUnit.setBitReader_95dlk7$(ensureNotNull(ensureNotNull(this.ctx_0).br));
      channelUnit.ctx.unitType = chUnitId;
      channelsToProcess = chUnitId + 1 | 0;
      channelUnit.setNumChannels_za3lpa$(channelsToProcess);
      ret = channelUnit.decode();
      if (ret < 0) {
        return ret;
      }
      channelUnit.decodeResidualSpectrum_skr1d0$(ensureNotNull(this.ctx_0).samples);
      channelUnit.reconstructFrame_ejwxa6$(ensureNotNull(this.ctx_0));
      CodecUtils_getInstance().writeOutput_mfygvn$(ensureNotNull(this.ctx_0).outpBuf, output, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES, channelsToProcess, ensureNotNull(this.ctx_0).outputChannels);
      chBlock.v = chBlock.v + 1 | 0;
    }
    var $this_3 = Atrac3plusDecoder$Companion_getInstance().log;
    var level_3 = LogLevel.TRACE;
    if ($this_3.isEnabled_ci8eq1$(level_3)) {
      $this_3.actualLog_t189ph$(level_3, format('Bytes read 0x%X', [ensureNotNull(ensureNotNull(this.ctx_0).br).bytesRead]));
    }
    return ensureNotNull(ensureNotNull(this.ctx_0).br).bytesRead;
  };
  function Atrac3plusDecoder$Companion() {
    Atrac3plusDecoder$Companion_instance = this;
    this.log = Logger.Companion.invoke_61zpoe$('atrac3plus');
    this.AT3P_ERROR = -1;
    this.CH_UNIT_MONO = 0;
    this.CH_UNIT_STEREO = 1;
    this.CH_UNIT_EXTENSION = 2;
    this.CH_UNIT_TERMINATOR = 3;
    this.ATRAC3P_POWER_COMP_OFF = 15;
    this.ATRAC3P_SUBBANDS = 16;
    this.ATRAC3P_SUBBAND_SAMPLES = 128;
    this.ATRAC3P_FRAME_SAMPLES = Kotlin.imul(this.ATRAC3P_SUBBANDS, this.ATRAC3P_SUBBAND_SAMPLES);
    this.ATRAC3P_PQF_FIR_LEN = 12;
  }
  Atrac3plusDecoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Atrac3plusDecoder$Companion_instance = null;
  function Atrac3plusDecoder$Companion_getInstance() {
    if (Atrac3plusDecoder$Companion_instance === null) {
      new Atrac3plusDecoder$Companion();
    }
    return Atrac3plusDecoder$Companion_instance;
  }
  Atrac3plusDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Atrac3plusDecoder',
    interfaces: []
  };
  function Atrac3plusDsp() {
    Atrac3plusDsp$Companion_getInstance();
  }
  Atrac3plusDsp.prototype.initImdct_6lu03$ = function (mdctCtx) {
    SineWin_getInstance().initFfSineWindows();
    mdctCtx.mdctInit_x0zet3$(8, true, -1.0);
  };
  Atrac3plusDsp.prototype.powerCompensation_3elc8n$ = function (ctx, chIndex, sp, rngIndex, sb) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var rngIndex_0 = {v: rngIndex};
    var pwcsp = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
    var gcv = 0;
    var swapCh = ctx.unitType === Atrac3plusDecoder$Companion_getInstance().CH_UNIT_STEREO && ctx.swapChannels[sb] ? 1 : 0;
    var channel1 = ensureNotNull(ctx.channels[chIndex ^ swapCh]);
    if (ensureNotNull(channel1).powerLevs[Atrac3plusDsp$Companion_getInstance().subband_to_powgrp_0[sb]] === Atrac3plusDecoder$Companion_getInstance().ATRAC3P_POWER_COMP_OFF) {
      return;
    }
    var i = 0;
    while (i < Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES) {
      pwcsp[i] = Atrac3plusDsp$Companion_getInstance().noise_tab_0[rngIndex_0.v & 1023];
      i = i + 1 | 0;
      rngIndex_0.v = rngIndex_0.v + 1 | 0;
    }
    var g1 = channel1.gainData_8be2vx$[sb];
    var g2 = channel1.gainDataPrev_8be2vx$[sb];
    var gainLev = g1.numPoints > 0 ? 6 - g1.levCode[0] | 0 : 0;
    tmp$ = g2.numPoints;
    for (var i_0 = 0; i_0 < tmp$; i_0++) {
      var a = gcv;
      var b = gainLev - (g2.levCode[i_0] - 6) | 0;
      gcv = Math_0.max(a, b);
    }
    tmp$_0 = g1.numPoints;
    for (var i_1 = 0; i_1 < tmp$_0; i_1++) {
      var a_0 = gcv;
      var b_0 = 6 - g1.levCode[i_1] | 0;
      gcv = Math_0.max(a_0, b_0);
    }
    var grpLev = Atrac3plusDsp$Companion_getInstance().pwc_levs_0[channel1.powerLevs[Atrac3plusDsp$Companion_getInstance().subband_to_powgrp_0[sb]]] / (1 << gcv);
    tmp$_1 = Atrac3plusDsp$Companion_getInstance().subband_to_qu_0[sb] + (sb === 0 ? 2 : 0) | 0;
    tmp$_2 = Atrac3plusDsp$Companion_getInstance().subband_to_qu_0[sb + 1 | 0];
    for (var qu = tmp$_1; qu < tmp$_2; qu++) {
      var channel = ensureNotNull(ctx.channels[chIndex]);
      if (channel.quWordlen[qu] <= 0) {
        continue;
      }
      var quLev = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_sf_tab[channel.quSfIdx[qu]] * Atrac3plusDsp$Companion_getInstance().ff_atrac3p_mant_tab[channel.quWordlen[qu]] / (1 << channel.quWordlen[qu]) * grpLev;
      var dst = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu];
      var nsp = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu + 1 | 0] - Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu] | 0;
      for (var i_2 = 0; i_2 < nsp; i_2++) {
        sp[dst + i_2 | 0] = sp[dst + i_2 | 0] + pwcsp[i_2] * quLev;
      }
    }
  };
  Atrac3plusDsp.prototype.imdct_5fy4gt$ = function (mdctCtx, in_0, inOffset, out, outOffset, windId, sb) {
    var tmp$;
    if ((sb & 1) !== 0) {
      tmp$ = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES / 2 | 0;
      for (var i = 0; i < tmp$; i++) {
        var tmp = in_0[inOffset + i | 0];
        in_0[inOffset + i | 0] = in_0[inOffset + Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES - 1 - i | 0];
        in_0[inOffset + Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES - 1 - i | 0] = tmp;
      }
    }
    mdctCtx.imdctCalc_41jbro$(out, outOffset, in_0, inOffset);
    if ((windId & 2) !== 0) {
      var end = outOffset + 32 | 0;
      out.fill(0.0, outOffset, end);
      FloatDSP_getInstance().vectorFmul_6rz3gq$(out, outOffset + 32 | 0, out, outOffset + 32 | 0, SineWin_getInstance().ff_sine_64, 0, 64);
    }
     else {
      FloatDSP_getInstance().vectorFmul_6rz3gq$(out, outOffset, out, outOffset, SineWin_getInstance().ff_sine_128, 0, Atrac3plusDsp$Companion_getInstance().ATRAC3P_MDCT_SIZE_0 / 2 | 0);
    }
    if ((windId & 1) !== 0) {
      FloatDSP_getInstance().vectorFmulReverse_6rz3gq$(out, outOffset + 160 | 0, out, outOffset + 160 | 0, SineWin_getInstance().ff_sine_64, 0, 64);
      var start = outOffset + 224 | 0;
      var end_0 = outOffset + 224 + 32 | 0;
      out.fill(0.0, start, end_0);
    }
     else {
      FloatDSP_getInstance().vectorFmulReverse_6rz3gq$(out, outOffset + 128 | 0, out, outOffset + 128 | 0, SineWin_getInstance().ff_sine_128, 0, Atrac3plusDsp$Companion_getInstance().ATRAC3P_MDCT_SIZE_0 / 2 | 0);
    }
  };
  Atrac3plusDsp.prototype.wavesSynth_0 = function (synthParams, wavesInfo, envelope, phaseShift, regOffset, out) {
    var waveParam = wavesInfo.startIndex_8be2vx$;
    var wn = 0;
    while (wn < wavesInfo.numWavs_8be2vx$) {
      var waveParam1 = ensureNotNull(synthParams.waves_8be2vx$[waveParam]);
      var amp = Atrac3plusDsp$Companion_getInstance().amp_sf_tab_0[waveParam1.ampSf_8be2vx$] * (synthParams.amplitudeMode_8be2vx$ === 0 ? (waveParam1.ampIndex_8be2vx$ + 1 | 0) / 15.13 : 1.0);
      var inc = waveParam1.freqIndex_8be2vx$;
      var pos = Atrac3plusDsp$Companion_getInstance().DEQUANT_PHASE_0(waveParam1.phaseIndex_8be2vx$) - Kotlin.imul(regOffset ^ 128, inc) & 2047;
      for (var i = 0; i <= 127; i++) {
        out[i] = out[i] + Atrac3plusDsp$Companion_getInstance().sine_table_0[pos] * amp;
        pos = pos + inc & 2047;
      }
      wn = wn + 1 | 0;
      waveParam = waveParam + 1 | 0;
    }
    if (phaseShift) {
      for (var i_0 = 0; i_0 <= 127; i_0++) {
        out[i_0] = -out[i_0];
      }
    }
    if (envelope.hasStartPoint_8be2vx$) {
      var pos_0 = (envelope.startPos_8be2vx$ << 2) - regOffset | 0;
      if (pos_0 > 0 && pos_0 <= 128) {
        out.fill(0.0, 0, pos_0);
        if (!envelope.hasStopPoint_8be2vx$ || envelope.startPos_8be2vx$ !== envelope.stopPos_8be2vx$) {
          out[pos_0 + 0 | 0] = out[pos_0 + 0 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[0];
          out[pos_0 + 1 | 0] = out[pos_0 + 1 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[32];
          out[pos_0 + 2 | 0] = out[pos_0 + 2 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[64];
          out[pos_0 + 3 | 0] = out[pos_0 + 3 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[96];
        }
      }
    }
    if (envelope.hasStopPoint_8be2vx$) {
      var pos_1 = (envelope.stopPos_8be2vx$ + 1 << 2) - regOffset | 0;
      if (pos_1 > 0 && pos_1 <= 128) {
        out[pos_1 - 4 | 0] = out[pos_1 - 4 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[96];
        out[pos_1 - 3 | 0] = out[pos_1 - 3 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[64];
        out[pos_1 - 2 | 0] = out[pos_1 - 2 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[32];
        out[pos_1 - 1 | 0] = out[pos_1 - 1 | 0] * Atrac3plusDsp$Companion_getInstance().hann_window_0[0];
        out.fill(0.0, pos_1, 128);
      }
    }
  };
  Atrac3plusDsp.prototype.generateTones_opvepx$ = function (ctx, chNum, sb, out, outOffset) {
    var wavreg1 = new Float32Array(128);
    var wavreg2 = new Float32Array(128);
    var channel = ensureNotNull(ctx.channels[chNum]);
    var tonesNow = channel.tonesInfoPrev_8be2vx$[sb];
    var tonesNext = channel.tonesInfo_8be2vx$[sb];
    if (tonesNext.pendEnv_8be2vx$.hasStartPoint_8be2vx$ && tonesNext.pendEnv_8be2vx$.startPos_8be2vx$ < tonesNext.pendEnv_8be2vx$.stopPos_8be2vx$) {
      tonesNext.currEnv_8be2vx$.hasStartPoint_8be2vx$ = true;
      tonesNext.currEnv_8be2vx$.startPos_8be2vx$ = tonesNext.pendEnv_8be2vx$.startPos_8be2vx$ + 32 | 0;
    }
     else if (tonesNow.pendEnv_8be2vx$.hasStartPoint_8be2vx$) {
      tonesNext.currEnv_8be2vx$.hasStartPoint_8be2vx$ = true;
      tonesNext.currEnv_8be2vx$.startPos_8be2vx$ = tonesNow.pendEnv_8be2vx$.startPos_8be2vx$;
    }
     else {
      tonesNext.currEnv_8be2vx$.hasStartPoint_8be2vx$ = false;
      tonesNext.currEnv_8be2vx$.startPos_8be2vx$ = 0;
    }
    if (tonesNow.pendEnv_8be2vx$.hasStopPoint_8be2vx$ && tonesNow.pendEnv_8be2vx$.stopPos_8be2vx$ >= tonesNext.currEnv_8be2vx$.startPos_8be2vx$) {
      tonesNext.currEnv_8be2vx$.hasStopPoint_8be2vx$ = true;
      tonesNext.currEnv_8be2vx$.stopPos_8be2vx$ = tonesNow.pendEnv_8be2vx$.stopPos_8be2vx$;
    }
     else if (tonesNext.pendEnv_8be2vx$.hasStopPoint_8be2vx$) {
      tonesNext.currEnv_8be2vx$.hasStopPoint_8be2vx$ = true;
      tonesNext.currEnv_8be2vx$.stopPos_8be2vx$ = tonesNext.pendEnv_8be2vx$.stopPos_8be2vx$ + 32 | 0;
    }
     else {
      tonesNext.currEnv_8be2vx$.hasStopPoint_8be2vx$ = false;
      tonesNext.currEnv_8be2vx$.stopPos_8be2vx$ = 64;
    }
    var reg1EnvNonzero = tonesNow.currEnv_8be2vx$.stopPos_8be2vx$ < 32 ? false : true;
    var reg2EnvNonzero = tonesNext.currEnv_8be2vx$.startPos_8be2vx$ >= 32 ? false : true;
    if (tonesNow.numWavs_8be2vx$ > 0 && reg1EnvNonzero) {
      this.wavesSynth_0(ctx.wavesInfoPrev, tonesNow, tonesNow.currEnv_8be2vx$, ctx.wavesInfoPrev.phaseShift_8be2vx$[sb] && chNum > 0, 128, wavreg1);
    }
    if (tonesNext.numWavs_8be2vx$ > 0 && reg2EnvNonzero) {
      this.wavesSynth_0(ctx.wavesInfo, tonesNext, tonesNext.currEnv_8be2vx$, ctx.wavesInfo.phaseShift_8be2vx$[sb] && chNum > 0, 0, wavreg2);
    }
    if (tonesNow.numWavs_8be2vx$ > 0 && tonesNext.numWavs_8be2vx$ > 0 && reg1EnvNonzero && reg2EnvNonzero) {
      FloatDSP_getInstance().vectorFmul_6rz3gq$(wavreg1, 0, wavreg1, 0, Atrac3plusDsp$Companion_getInstance().hann_window_0, 128, 128);
      FloatDSP_getInstance().vectorFmul_6rz3gq$(wavreg2, 0, wavreg2, 0, Atrac3plusDsp$Companion_getInstance().hann_window_0, 0, 128);
    }
     else {
      if (tonesNow.numWavs_8be2vx$ > 0 && !tonesNow.currEnv_8be2vx$.hasStopPoint_8be2vx$) {
        FloatDSP_getInstance().vectorFmul_6rz3gq$(wavreg1, 0, wavreg1, 0, Atrac3plusDsp$Companion_getInstance().hann_window_0, 128, 128);
      }
      if (tonesNext.numWavs_8be2vx$ > 0 && !tonesNext.currEnv_8be2vx$.hasStartPoint_8be2vx$) {
        FloatDSP_getInstance().vectorFmul_6rz3gq$(wavreg2, 0, wavreg2, 0, Atrac3plusDsp$Companion_getInstance().hann_window_0, 0, 128);
      }
    }
    for (var i = 0; i <= 127; i++) {
      out[outOffset + i | 0] = out[outOffset + i | 0] + (wavreg1[i] + wavreg2[i]);
    }
  };
  Atrac3plusDsp.prototype.ipqf_kkeiss$ = function (dctCtx, hist, in_0, out) {
    var tmp$, tmp$_0, tmp$_1;
    var idctIn = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    var idctOut = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    var end = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES;
    out.fill(0.0, 0, end);
    tmp$ = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES;
    for (var s = 0; s < tmp$; s++) {
      tmp$_0 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS;
      for (var sb = 0; sb < tmp$_0; sb++) {
        idctIn[sb] = in_0[Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES) + s | 0];
      }
      dctCtx.imdctHalf_41jbro$(idctOut, 0, idctIn, 0);
      for (var i = 0; i <= 7; i++) {
        hist.buf1[hist.pos][i] = idctOut[i + 8 | 0];
        hist.buf2[hist.pos][i] = idctOut[7 - i | 0];
      }
      var posNow = hist.pos;
      var posNext = Atrac3plusDsp$Companion_getInstance().mod23_lut_8be2vx$[posNow + 2 | 0];
      tmp$_1 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_PQF_FIR_LEN;
      for (var t = 0; t < tmp$_1; t++) {
        for (var i_0 = 0; i_0 <= 7; i_0++) {
          out[(s * 16 | 0) + i_0 + 0 | 0] = out[(s * 16 | 0) + i_0 + 0 | 0] + (hist.buf1[posNow][i_0] * Atrac3plusDsp$Companion_getInstance().ipqf_coeffs1_8be2vx$[t][i_0] + hist.buf2[posNext][i_0] * Atrac3plusDsp$Companion_getInstance().ipqf_coeffs2_8be2vx$[t][i_0]);
          out[(s * 16 | 0) + i_0 + 8 | 0] = out[(s * 16 | 0) + i_0 + 8 | 0] + (hist.buf1[posNow][7 - i_0 | 0] * Atrac3plusDsp$Companion_getInstance().ipqf_coeffs1_8be2vx$[t][i_0 + 8 | 0] + hist.buf2[posNext][7 - i_0 | 0] * Atrac3plusDsp$Companion_getInstance().ipqf_coeffs2_8be2vx$[t][i_0 + 8 | 0]);
        }
        posNow = Atrac3plusDsp$Companion_getInstance().mod23_lut_8be2vx$[posNext + 2 | 0];
        posNext = Atrac3plusDsp$Companion_getInstance().mod23_lut_8be2vx$[posNow + 2 | 0];
      }
      hist.pos = Atrac3plusDsp$Companion_getInstance().mod23_lut_8be2vx$[hist.pos];
    }
  };
  function Atrac3plusDsp$Companion() {
    Atrac3plusDsp$Companion_instance = this;
    this.ATRAC3P_MDCT_SIZE_0 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES * 2 | 0;
    this.sine_table_0 = new Float32Array(2048);
    this.hann_window_0 = new Float32Array(256);
    this.amp_sf_tab_0 = new Float32Array(64);
    this.TWOPI_0 = 2 * math.PI;
    this.ff_atrac3p_qu_to_spec_pos = new Int32Array([0, 16, 32, 48, 64, 80, 96, 112, 128, 160, 192, 224, 256, 288, 320, 352, 384, 448, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920, 2048]);
    this.ff_atrac3p_sf_tab = new Float32Array([0.027852058, 0.0350914, 0.04421234, 0.055704117, 0.0701828, 0.08842468, 0.11140823, 0.1403656, 0.17684937, 0.22281647, 0.2807312, 0.35369873, 0.44563293, 0.5614624, 0.70739746, 0.89126587, 1.1229248, 1.4147949, 1.7825317, 2.2458496, 2.8295898, 3.5650635, 4.491699, 5.6591797, 7.130127, 8.983398, 11.318359, 14.260254, 17.966797, 22.636719, 28.520508, 35.933594, 45.273438, 57.041016, 71.86719, 90.546875, 114.08203, 143.73438, 181.09375, 228.16406, 287.46875, 362.1875, 456.32812, 574.9375, 724.375, 912.65625, 1149.875, 1448.75, 1825.3125, 2299.75, 2897.5, 3650.625, 4599.5, 5795.0, 7301.25, 9199.0, 11590.0, 14602.5, 18398.0, 23180.0, 29205.0, 36796.0, 46360.0, 58410.0]);
    this.ff_atrac3p_mant_tab = new Float32Array([0.0, 0.74801636, 0.44882202, 0.32058716, 0.20400238, 0.1496048, 0.07239151, 0.035619736]);
    this.subband_to_powgrp_0 = new Int32Array([0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]);
    this.noise_tab_0 = new Float32Array([-0.01358032, -0.05593872, 0.01696777, -0.14871216, -0.26412964, -0.09893799, 0.25723267, 0.02008057, -0.7223511, -0.44351196, -0.2298584, 0.16833496, 0.46902466, 0.05917358, -0.15179443, 0.41299438, -0.01287842, 0.13360596, 0.4355774, -0.0953064, -0.5842285, 0.39266968, -0.08343506, -0.25604248, 0.2284851, 0.26013184, -0.6558838, 0.17288208, -0.08673096, -0.05203247, 0.07299805, -0.2866516, -0.35806274, 0.06552124, -0.09387207, 0.21099854, -0.28347778, -0.72402954, 0.05050659, -0.10635376, -0.1885376, 0.2972412, 0.20703125, -0.2979126, -0.37634277, 0.4797058, -0.09976196, 0.32641602, -0.29248047, -0.28237915, 0.26028442, -0.36157227, 0.22042847, -0.03222656, -0.37268066, -0.03759766, 0.09909058, 0.23284912, 0.19320679, 0.14453125, -0.02139282, -0.19702148, 0.31533813, -0.16741943, 0.35031128, -0.35656738, -0.6612854, -0.00701904, 0.20898438, 0.26837158, -0.33706665, -0.04568481, 0.12600708, 0.10284424, 0.07321167, -0.1828003, 0.38101196, 0.2130127, 0.04541016, 0.01156616, -0.26391602, -0.02346802, -0.22125244, 0.29760742, -0.3623352, -0.31314087, -0.13967896, -0.11276245, -0.19433594, 0.34490967, 0.0234375, 0.21963501, -0.027771, -0.67678833, -0.08999634, 0.14233398, -0.27697754, 0.5142212, -0.05047607, 0.48327637, 0.37167358, -0.60806274, 0.18728638, -0.1519165, 0.00637817, 0.02832031, -0.15618896, 0.6064453, 0.21826172, 0.06384277, -0.31863403, 0.08816528, 0.15447998, -0.07015991, -0.08154297, -0.40966797, -0.39785767, -0.11709595, 0.22052002, 0.18466187, -0.1725769, 0.03759766, -0.06195068, 0.0043335, 0.12176514, 0.3401184, 0.25610352, -0.052948, 0.41033936, 0.16854858, -0.76187134, 0.13845825, -0.19418335, -0.21524048, -0.4441223, -0.081604, -0.2819519, -0.01873779, 0.15524292, -0.37438965, -0.4486084, 0.43096924, -0.24746704, 0.49856567, 0.14859009, 0.3815918, 0.20541382, -0.39175415, -0.6585083, -0.4371643, 0.1303711, -0.05111694, 0.39956665, 0.21447754, -0.0486145, 0.33654785, 0.105896, -0.8808594, -0.30822754, 0.3857727, 0.30047607, 0.3883667, 0.09118652, -0.3647766, -0.01641846, -0.23031616, 0.2605896, 0.18859863, -0.21868896, -0.17861938, -0.2975464, 0.09777832, 0.10806274, -0.51605225, 7.6294E-4, 0.13259888, 0.11090088, -0.24084473, 0.24957275, 0.01379395, -0.04141235, -0.04937744, 0.5739441, 0.2741089, 0.2758789, 0.45013428, -0.32592773, 0.11160278, -0.00970459, 0.29092407, 0.03356934, -0.70925903, 0.04882812, 0.43499756, 0.07720947, -0.2755432, -0.01742554, -0.08413696, -0.0402832, -0.5285034, -0.07330322, 0.05181885, 0.21362305, -0.18765259, 0.07058716, -0.03009033, 0.32662964, 0.27023315, -0.2800293, 0.1756897, 0.03338623, 0.3024292, -0.03921509, 0.32174683, -0.2373352, 0.08575439, -0.38269043, 0.09194946, -0.0723877, 0.17941284, -0.51278687, -0.25146484, 0.1979065, -0.19195557, 0.16549683, 0.42456055, 0.3912964, -0.02868652, 0.17980957, 0.24902344, -0.7658386, -0.20959473, 0.61013794, 0.3701172, 0.3685913, -0.04486084, 0.10678101, -0.15994263, -0.05328369, 0.28463745, -0.06420898, -0.36987305, -0.28009033, -0.11764526, 0.04312134, -0.0803833, 0.04885864, -0.03067017, -4.2725E-4, 0.3428955, -0.0098877, 0.34838867, 0.3251648, -0.16271973, 0.38269043, 0.03240967, 0.12417603, -0.14331055, -0.34902954, -0.18325806, 0.29421997, 0.44284058, 0.751709, -0.67245483, -0.12176514, 0.2791443, -0.2980652, 0.19863892, 0.3008728, 0.22680664, -0.366333, -0.3253479, -0.575531, -0.16641235, 0.43811035, 0.08331299, 0.15942383, 0.26516724, -0.24240112, -0.11761475, -0.16827393, -0.14260864, 0.46343994, 0.11804199, -0.55514526, -0.02520752, -0.14309692, 0.00448608, 0.02749634, -0.30545044, 0.70965576, 0.45108032, 0.6643982, -0.68255615, -0.12496948, 0.09146118, -0.21109009, -0.23791504, 0.7994385, -0.35205078, -0.24963379, 0.18719482, -0.1907959, 0.07458496, 0.07623291, -0.28781128, -0.37121582, -0.19580078, -0.01773071, -0.1671753, 0.13040161, 0.14672852, 0.4237976, 0.03582764, 0.11431885, 0.05145264, 0.44702148, 0.08963013, 0.01367188, -0.54519653, -0.1269226, 0.21176147, 0.04925537, 0.30670166, -0.11029053, 0.19555664, -0.2774048, 0.23043823, 0.1555481, -0.19299316, -0.2572937, 0.17800903, -0.03579712, -0.05065918, -0.06933594, -0.09500122, -0.07821655, 0.2388916, -0.31900024, 0.0307312, -0.00415039, 0.6131592, 0.37176514, -0.13442993, -0.15536499, -0.19216919, -0.3789978, 0.19992065, 0.02630615, -0.12573242, 0.25927734, -0.0244751, 0.29629517, -0.40731812, -0.17333984, 0.24310303, -0.1060791, 0.14828491, 0.08792114, -0.18743896, -0.0557251, -0.04833984, 0.10473633, -0.2902832, -0.6768799, -0.28170776, -0.41687012, 0.05413818, -0.23284912, 0.09555054, -0.08969116, -0.15112305, 0.12738037, 0.35986328, 0.28948975, 0.30691528, 0.23956299, 0.06973267, -0.3119812, -0.18450928, 0.22280884, -0.21600342, 0.23522949, -0.6184082, -0.13012695, 0.26412964, 0.47320557, -0.2644043, 0.38757324, 0.17352295, -0.26104736, -0.258667, -0.1227417, -0.29733276, 0.07687378, 0.18588257, -0.08880615, 0.31185913, 0.0531311, -0.1088562, -0.14901733, -0.22323608, -0.08538818, 0.19812012, 0.19732666, -0.18927002, 0.29058838, 0.2555542, -0.48599243, 0.1876831, 0.01345825, 0.34887695, 0.21530151, 0.19857788, 0.18661499, -0.01394653, -0.09063721, -0.38781738, 0.27160645, -0.20379639, -0.3211975, -0.2388916, 0.27096558, 0.24951172, 0.07922363, 0.07479858, -0.50946045, 0.10220337, 0.5836487, -0.19503784, -0.18560791, -0.01165771, 0.47195435, 0.2243042, -0.38635254, -0.037323, -0.09179688, 0.06991577, 0.15106201, 0.20605469, -0.05969238, -0.4182129, 0.12231445, -0.04672241, -0.05117798, -0.11523438, -0.51849365, -0.04077148, 0.44284058, -0.64086914, 0.17019653, 0.02236938, 0.2284851, -0.23214722, -0.32354736, -0.14068604, -0.29690552, -0.19891357, 0.02774048, -0.20965576, -0.5219116, -0.19299316, -0.07290649, 0.49053955, -0.22302246, 0.056427, 0.13122559, -0.20819092, -0.835907, -0.08181763, 0.26797485, -9.1553E-4, -0.09457397, 0.17089844, -0.27020264, 0.30270386, 0.05496216, 0.09564209, -0.08590698, 0.02130127, 0.35931396, 0.21728516, -0.15396118, -0.05053711, 0.02719116, 0.1630249, 0.4321289, 0.10229492, -0.40820312, 0.21646118, 0.08435059, -0.1114502, -0.3996277, -0.05618286, -0.10223389, -0.60839844, 0.33724976, -0.06341553, -0.47369385, -0.32852173, 0.0524292, 0.1963501, -0.19137573, -0.6790161, 0.1618042, 0.05133057, -0.22283936, 0.09646606, 0.2428894, -0.45007324, 0.08804321, 0.14053345, 0.22619629, -0.01000977, 0.3635559, -0.19863892, -0.3036499, -0.24118042, -0.5746155, 0.26498413, 0.04345703, -0.09796143, -0.47714233, -0.23739624, 0.18737793, 0.08926392, -0.0279541, 0.00305176, -0.08700562, -0.38711548, 0.03222656, 0.10940552, -0.41906738, -0.01620483, -0.47061157, 0.3798523, -0.21624756, 0.47976685, -0.20046997, -0.6253357, -0.2690735, -0.02877808, 0.00671387, -0.29071045, -0.24685669, -0.15722656, -0.26055908, 0.29968262, 0.28225708, -0.08990479, -0.16748047, -0.46759033, -0.2506714, -0.25183105, -0.45932007, 0.05828857, 0.29006958, 0.23840332, -0.17974854, 0.26931763, 0.10696411, -0.06848145, -0.17126465, -0.10522461, -0.5538635, -0.4230652, -0.07608032, 0.24380493, 0.38586426, 0.16882324, 0.2675171, 0.17303467, 0.35809326, -0.22094727, -0.30703735, -0.28497314, -0.04321289, 0.15219116, -0.17071533, -0.39334106, 0.03439331, -0.10809326, -0.3059082, 0.26449585, -0.0741272, 0.13638306, -0.01062012, 0.27996826, 0.04397583, -0.05557251, -0.56933594, 0.03363037, -0.00949097, 0.5264282, -0.44329834, 0.28308105, -0.05499268, -0.23312378, -0.29870605, -0.05123901, 0.26831055, -0.35238647, -0.30993652, 0.34646606, -0.1977539, 0.44595337, 0.13769531, 0.45358276, 0.19961548, 0.42681885, 0.15722656, 0.00128174, 0.23757935, 0.4098816, 0.25164795, -0.00732422, -0.12405396, -0.4342041, -0.00402832, 0.34243774, 0.36264038, 0.18807983, -0.09301758, -0.10296631, 0.05532837, -0.31652832, 0.14337158, 0.35040283, 0.32540894, 0.05728149, -0.12030029, -0.25942993, -0.203125, -0.16491699, -0.46051025, -0.08004761, 0.50772095, 0.16168213, 0.2843933, 0.08105469, -0.19104004, 0.38589478, -0.16400146, -0.25454712, 0.20281982, -0.20730591, -0.06311035, 0.32937622, 0.15032959, -0.05340576, 0.3048706, -0.1164856, 0.38009644, -0.20062256, 0.43466187, 0.01150513, 0.35754395, -0.13146973, 0.67489624, 0.05212402, 0.2791443, -0.39431763, 0.7530823, -0.13366699, 0.24453735, 0.42248535, -0.6590576, -0.00546265, -0.03491211, -0.13659668, -0.08294678, -0.45666504, 0.2718811, 0.12731934, 0.6114807, 0.10449219, -0.2883606, 9.1553E-4, 0.2461853, 0.13119507, 0.05685425, 0.17355347, 0.42034912, 0.08514404, 0.24536133, 0.18951416, -0.19107056, -0.1503601, 0.02334595, 0.5498657, 0.32321167, -0.16104126, -0.0305481, 0.4359436, 0.1730957, 0.61053467, 0.24731445, 0.3333435, 0.15240479, 0.15588379, 0.3642578, -0.30407715, -0.13302612, 0.00427246, 0.04171753, -0.3317871, 0.3421631, -0.12463379, -0.02764893, 0.05905151, -0.31436157, 0.16531372, 0.34542847, -0.03292847, 0.12527466, -0.12313843, -0.13171387, 0.0475769, -0.45095825, -0.19085693, 0.35342407, -0.23239136, -0.34387207, 0.11264038, -0.15740967, 0.05273438, 0.74942017, 0.21505737, 0.08514404, -0.42391968, -0.1953125, 0.3529358, 0.25305176, 0.15731812, -0.7032471, -0.21591187, 0.35604858, 0.1413269, 0.11724854, 0.15853882, -0.24597168, 0.07019043, 0.02127075, 0.12658691, 0.06390381, -0.1229248, 0.15441895, -0.4764099, 0.06195068, 0.58981323, -0.15151978, -0.03604126, -0.45059204, -0.01672363, -0.4699707, 0.25750732, 0.18084717, 0.06661987, 0.13253784, 0.6782837, 0.1137085, 0.11325073, -0.04611206, -0.07791138, -0.365448, -0.06747437, -0.3159485, 0.16131592, 0.41983032, 0.11071777, -0.36889648, 0.30963135, -0.37875366, 0.585083, 0.00393677, 0.12338257, 0.03424072, -0.21728516, -0.12838745, -0.46981812, 0.0586853, -0.2501526, 0.27407837, 0.6524048, -0.34429932, -0.15179443, 0.14056396, 0.3350525, 0.28826904, 0.09921265, 0.3439026, 0.13656616, -0.23608398, 0.00863647, 0.02627563, -0.19119263, 0.1977539, -0.07214355, 0.07809448, 0.0345459, -0.03417969, 3.3569E-4, -0.23095703, 0.18673706, 0.0579834, 0.03814697, -0.04318237, 0.05487061, 0.08633423, 0.5595093, -0.06347656, 0.10333252, 0.25305176, 0.05853271, 0.12246704, -0.25543213, -0.34262085, -0.36437988, -0.21304321, -0.05093384, 0.027771, 0.07620239, -0.2121582, -0.09326172, 0.19021606, -0.40579224, -0.01193237, 0.19845581, -0.35336304, -0.07397461, 0.2010498, 0.08615112, -0.4437561, 0.11419678, 0.24453735, -0.16555786, -0.05081177, -0.0140686, 0.27893066, -0.18692017, 0.07473755, 0.03451538, -0.39733887, 0.21548462, -0.2253418, -0.3965149, -0.04989624, -0.57662964, 0.06390381, 0.62020874, -0.13470459, 0.04345703, -0.21862793, -0.02789307, 0.5169678, -0.2758789, 0.39004517, 0.09857178, -0.00738525, 0.3131714, 4.8828E-4, -0.46572876, 0.2953186, -0.10009766, -0.27856445, 0.03594971, 0.25048828, -0.7458496, -0.25350952, -0.03302002, 0.31188965, 0.01571655, 0.46710205, 0.21591187, 0.07260132, -0.42132568, -0.53900146, -0.13674927, -0.16571045, -0.34454346, 0.12359619, -0.11184692, 0.00967407, 0.34576416, -0.05761719, 0.34848022, 0.17645264, -0.39395142, 0.10339355, 0.18215942, 0.20697021, 0.591095, -0.11560059, -0.07385254, 0.10397339, 0.35437012, -0.2286377, 0.01794434, 0.17559814, -0.17495728, 0.12142944, 0.10928345, -1.0, -0.01379395, 0.21237183, -0.27035522, 0.27319336, -0.3706665, 0.4135437, -0.4005432, 0.00689697, 0.2632141, 0.39266968, 0.6529846, 0.41625977, -0.13909912, 0.78375244, -0.30941772, 0.20169067, -0.39367676, 0.94021606, -0.24066162, 0.05557251, -0.24533081, -0.05444336, -0.7675476, -0.1937561, -0.1104126, -0.17532349, 0.1600647, 0.0218811, 0.1746521, -0.04342651, -0.56777954, -0.4098816, 0.26687622, 0.11700439, -0.00344849, -0.05395508, 0.37426758, -0.40719604, -0.15032959, -0.01660156, 0.04196167, -0.04559326, -0.1296997, 0.12011719, 0.084198, -0.11199951, 0.3517456, 0.10275269, -0.25686646, 0.48446655, 0.03225708, 0.28408813, -0.18701172, 0.3628235, -0.0328064, 0.32302856, 0.17233276, 0.48269653, 0.3111267, -0.04946899, 0.12774658, 0.52685547, 0.10211182, 0.05953979, 0.05999756, 0.20144653, 0.00744629, 0.27316284, 0.24377441, 0.39672852, 0.01702881, -0.35513306, 0.11364746, -0.13555908, 0.48880005, -0.1541748, -0.0914917, -0.02615356, 0.46246338, -0.72250366, 0.22332764, 0.23849487, -0.25686646, -0.08514404, -0.02062988, -0.3449402, -0.02297974, -0.8038635, -0.08074951, -0.12689209, -0.06896973, 0.24099731, -0.35650635, -0.09558105, 0.2925415, 0.23132324, -0.16726685, 0.0, -0.2423706, 0.30899048, 0.29504395, -0.20898438, 0.17059326, -0.07672119, -0.14395142, 0.0557251, 0.20602417, -0.5155029, -0.03167725, -0.48840332, -0.20425415, 0.14144897, 0.07275391, -0.7666931, -0.22488403, 0.20651245, 0.03259277, 8.5449E-4, 0.03039551, 0.47555542, 0.3835144]);
    this.pwc_levs_0 = new Float32Array([3.96875, 3.15625, 2.5, 2.0, 1.59375, 1.25, 1.0, 0.78125, 0.625, 0.5, 0.40625, 0.3125, 0.25, 0.1875, 0.15625, 0.0]);
    this.subband_to_qu_0 = new Int32Array([0, 8, 12, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]);
    this.mod23_lut_8be2vx$ = new Int32Array([23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0]);
    this.ipqf_coeffs1_8be2vx$ = [new Float32Array([-5.8336207E-7, -8.060423E-7, -4.200541E-7, -4.4400572E-8, 3.226247E-8, 3.530856E-8, 1.2660377E-8, 1.0516783E-5, -1.1838618E-5, 6.005389E-7, 1.4333754E-6, 2.3108685E-6, 3.2569742E-6, 4.619242E-6, 6.389426E-6, 7.030297E-6]), new Float32Array([-9.162282E-6, -1.0502935E-5, -7.921279E-6, -4.1712024E-6, -2.633663E-6, -1.5432918E-6, -5.7168614E-7, 1.8111954E-6, 2.353085E-5, 2.780562E-5, 3.2302323E-5, 3.696892E-5, 4.1575615E-5, 4.5337845E-5, 4.6043948E-5, 4.858558E-5]), new Float32Array([-6.446455E-5, -6.830695E-5, -7.308147E-5, -7.612785E-5, -7.485075E-5, -7.020851E-5, -6.228515E-5, -5.827044E-5, -5.629633E-5, -4.988881E-5, -3.5615325E-5, -1.8532943E-5, 1.6657353E-6, 2.610587E-5, 5.3397067E-5, 8.079566E-5]), new Float32Array([-5.448855E-4, -5.253723E-4, -4.9731287E-4, -4.5778E-4, -4.0612387E-4, -3.4301577E-4, -2.6866337E-4, -1.82489E-4, -8.4307925E-5, 2.5081157E-5, 1.4135583E-4, 2.6649953E-4, 3.9945057E-4, 5.392845E-4, 6.8422867E-4, 8.309371E-4]), new Float32Array([-0.0014771431, -0.001283227, -0.0010566821, -7.9780724E-4, -5.0782406E-4, -1.8855913E-4, 1.5771533E-4, 5.2769453E-4, 9.186222E-4, 0.001326357, 0.0017469483, 0.0021754825, 0.0026067684, 0.0030352892, 0.0034549395, 0.0038591374]), new Float32Array([-0.0022995141, -0.001443546, -4.926657E-4, 5.506899E-4, 0.001682895, 0.0028992873, 0.004194315, 0.005561474, 0.006993512, 0.008482357, 0.010018963, 0.011593862, 0.013196872, 0.014817309, 0.016444042, 0.018065533]), new Float32Array([-0.034426283, -0.034281436, -0.033992987, -0.03356325, -0.032995768, -0.032295227, -0.031467363, -0.030518902, -0.02945766, -0.028291954, -0.027031265, -0.025685543, -0.024265358, -0.022781773, -0.021246184, -0.019670162]), new Float32Array([-0.0030586775, -0.0037203205, -0.0042847847, -0.0047529764, -0.0051268316, -0.0054091476, -0.0056034233, -0.005714261, -0.0057445862, -0.0057025906, -0.005592011, -0.0054194843, -0.0051914565, -0.0049146507, -0.0045959447, -0.004241827]), new Float32Array([-0.0016376863, -0.0017651899, -0.0018608454, -0.0019252141, -0.001959379, -0.0019653172, -0.0019450618, -0.0018990048, -0.00183808, -0.0017501717, -0.0016481078, -0.0015320742, -0.0014046903, -0.0012685474, -0.001125814, -9.794373E-4]), new Float32Array([-5.543238E-4, -5.5472925E-4, -5.478346E-4, -5.327692E-4, -5.113579E-4, -4.8466062E-4, -4.5358928E-4, -4.249969E-4, -3.694267E-4, -3.392619E-4, -3.0001783E-4, -2.5986304E-4, -2.197204E-4, -1.8116167E-4, -1.4691355E-4, -1.1279432E-4]), new Float32Array([-6.414739E-5, -6.174868E-5, -5.4267788E-5, -4.7133824E-5, -4.2927582E-5, -3.947731E-5, -3.6340745E-5, -2.9687517E-5, -4.9787737E-5, -4.157789E-5, -3.3864744E-5, -2.6534748E-5, -1.9841305E-5, -1.4789486E-5, -1.3131184E-5, -9.919887E-6]), new Float32Array([-6.2990207E-6, -7.270126E-6, -1.1984052E-5, -1.7348082E-5, -1.9907106E-5, -2.1348773E-5, -2.1961965E-5, -1.2203576E-5, -1.0840992E-5, 4.6299544E-7, 5.2588763E-7, 2.7792686E-7, -2.3649704E-7, -1.0897784E-6, -9.171448E-7, -5.22682E-7])];
    this.ipqf_coeffs2_8be2vx$ = [new Float32Array([5.22682E-7, 9.171448E-7, 1.0897784E-6, 2.3649704E-7, -2.7792686E-7, -5.2588763E-7, -4.6299544E-7, 1.0840992E-5, -1.2203576E-5, -2.1961965E-5, -2.1348773E-5, -1.9907106E-5, -1.7348082E-5, -1.1984052E-5, -7.270126E-6, -6.2990207E-6]), new Float32Array([9.919887E-6, 1.3131184E-5, 1.4789486E-5, 1.9841305E-5, 2.6534748E-5, 3.3864744E-5, 4.157789E-5, 4.9787737E-5, -2.9687517E-5, -3.6340745E-5, -3.947731E-5, -4.2927582E-5, -4.7133824E-5, -5.4267788E-5, -6.174868E-5, -6.414739E-5]), new Float32Array([1.1279432E-4, 1.4691355E-4, 1.8116167E-4, 2.197204E-4, 2.5986304E-4, 3.0001783E-4, 3.392619E-4, 3.694267E-4, -4.249969E-4, -4.5358928E-4, -4.8466062E-4, -5.113579E-4, -5.327692E-4, -5.478346E-4, -5.5472925E-4, -5.543238E-4]), new Float32Array([9.794373E-4, 0.001125814, 0.0012685474, 0.0014046903, 0.0015320742, 0.0016481078, 0.0017501717, 0.00183808, -0.0018990048, -0.0019450618, -0.0019653172, -0.001959379, -0.0019252141, -0.0018608454, -0.0017651899, -0.0016376863]), new Float32Array([0.004241827, 0.0045959447, 0.0049146507, 0.0051914565, 0.0054194843, 0.005592011, 0.0057025906, 0.0057445862, -0.005714261, -0.0056034233, -0.0054091476, -0.0051268316, -0.0047529764, -0.0042847847, -0.0037203205, -0.0030586775]), new Float32Array([0.019670162, 0.021246184, 0.022781773, 0.024265358, 0.025685543, 0.027031265, 0.028291954, 0.02945766, -0.030518902, -0.031467363, -0.032295227, -0.032995768, -0.03356325, -0.033992987, -0.034281436, -0.034426283]), new Float32Array([-0.018065533, -0.016444042, -0.014817309, -0.013196872, -0.011593862, -0.010018963, -0.008482357, -0.006993512, 0.005561474, 0.004194315, 0.0028992873, 0.001682895, 5.506899E-4, -4.926657E-4, -0.001443546, -0.0022995141]), new Float32Array([-0.0038591374, -0.0034549395, -0.0030352892, -0.0026067684, -0.0021754825, -0.0017469483, -0.001326357, -9.186222E-4, 5.2769453E-4, 1.5771533E-4, -1.8855913E-4, -5.0782406E-4, -7.9780724E-4, -0.0010566821, -0.001283227, -0.0014771431]), new Float32Array([-8.309371E-4, -6.8422867E-4, -5.392845E-4, -3.9945057E-4, -2.6649953E-4, -1.4135583E-4, -2.5081157E-5, 8.4307925E-5, -1.82489E-4, -2.6866337E-4, -3.4301577E-4, -4.0612387E-4, -4.5778E-4, -4.9731287E-4, -5.253723E-4, -5.448855E-4]), new Float32Array([-8.079566E-5, -5.3397067E-5, -2.610587E-5, -1.6657353E-6, 1.8532943E-5, 3.5615325E-5, 4.988881E-5, 5.629633E-5, -5.827044E-5, -6.228515E-5, -7.020851E-5, -7.485075E-5, -7.612785E-5, -7.308147E-5, -6.830695E-5, -6.446455E-5]), new Float32Array([-4.858558E-5, -4.6043948E-5, -4.5337845E-5, -4.1575615E-5, -3.696892E-5, -3.2302323E-5, -2.780562E-5, -2.353085E-5, 1.8111954E-6, -5.7168614E-7, -1.5432918E-6, -2.633663E-6, -4.1712024E-6, -7.921279E-6, -1.0502935E-5, -9.162282E-6]), new Float32Array([-7.030297E-6, -6.389426E-6, -4.619242E-6, -3.2569742E-6, -2.3108685E-6, -1.4333754E-6, -6.005389E-7, 1.1838618E-5, 1.0516783E-5, 1.2660377E-8, 3.530856E-8, 3.226247E-8, -4.4400572E-8, -4.200541E-7, -8.060423E-7, -5.8336207E-7])];
  }
  Atrac3plusDsp$Companion.prototype.DEQUANT_PHASE_0 = function (ph) {
    return (ph & 31) << 6;
  };
  Atrac3plusDsp$Companion.prototype.initWaveSynth = function () {
    for (var i = 0; i <= 2047; i++) {
      var tmp$ = this.sine_table_0;
      var x = this.TWOPI_0 * i / 2048;
      tmp$[i] = Math_0.sin(x);
    }
    for (var i_0 = 0; i_0 <= 255; i_0++) {
      var tmp$_0 = this.hann_window_0;
      var x_0 = this.TWOPI_0 * i_0 / 256;
      tmp$_0[i_0] = (1.0 - Math_0.cos(x_0)) * 0.5;
    }
    for (var i_1 = 0; i_1 <= 63; i_1++) {
      var tmp$_1 = this.amp_sf_tab_0;
      var x_1 = (i_1 - 3 | 0) / 4.0;
      tmp$_1[i_1] = Math_0.pow(2.0, x_1);
    }
  };
  Atrac3plusDsp$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Atrac3plusDsp$Companion_instance = null;
  function Atrac3plusDsp$Companion_getInstance() {
    if (Atrac3plusDsp$Companion_instance === null) {
      new Atrac3plusDsp$Companion();
    }
    return Atrac3plusDsp$Companion_instance;
  }
  Atrac3plusDsp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Atrac3plusDsp',
    interfaces: []
  };
  function AtracGainInfo() {
    this.numPoints = 0;
    this.levCode = new Int32Array(7);
    this.locCode = new Int32Array(7);
  }
  AtracGainInfo.prototype.clear = function () {
    this.numPoints = 0;
    for (var i = 0; i <= 6; i++) {
      this.levCode[i] = 0;
      this.locCode[i] = 0;
    }
  };
  AtracGainInfo.prototype.copy_wkc6m7$ = function (from) {
    this.numPoints = from.numPoints;
    arraycopy_0(from.levCode, 0, this.levCode, 0, this.levCode.length);
    arraycopy_0(from.locCode, 0, this.locCode, 0, this.locCode.length);
  };
  AtracGainInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AtracGainInfo',
    interfaces: []
  };
  var Array_0 = Array;
  function Channel(chNum) {
    this.chNum = chNum;
    this.numCodedVals = 0;
    this.fillMode = 0;
    this.splitPoint = 0;
    this.tableType = 0;
    this.quWordlen = new Int32Array(32);
    this.quSfIdx = new Int32Array(32);
    this.quTabIdx = new Int32Array(32);
    this.spectrum = new Int32Array(2048);
    this.powerLevs = new Int32Array(5);
    var array = Array_0(2);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    }
    this.wndShapeHist = array;
    this.wndShape = this.wndShapeHist[0];
    this.wndShapePrev = this.wndShapeHist[1];
    var array_0 = Array_0(2);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var array_1 = Array_0(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
      var tmp$_1;
      tmp$_1 = array_1.length - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
        array_1[i_1] = new AtracGainInfo();
      }
      array_0[i_0] = array_1;
    }
    this.gainDataHist_8be2vx$ = array_0;
    this.gainData_8be2vx$ = this.gainDataHist_8be2vx$[0];
    this.gainDataPrev_8be2vx$ = this.gainDataHist_8be2vx$[1];
    this.numGainSubbands = 0;
    var array_2 = Array_0(2);
    var tmp$_2;
    tmp$_2 = array_2.length - 1 | 0;
    for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
      var array_3 = Array_0(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
      var tmp$_3;
      tmp$_3 = array_3.length - 1 | 0;
      for (var i_3 = 0; i_3 <= tmp$_3; i_3++) {
        array_3[i_3] = new WavesData();
      }
      array_2[i_2] = array_3;
    }
    this.tonesInfoHist_8be2vx$ = array_2;
    this.tonesInfo_8be2vx$ = this.tonesInfoHist_8be2vx$[0];
    this.tonesInfoPrev_8be2vx$ = this.tonesInfoHist_8be2vx$[1];
  }
  Channel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Channel',
    interfaces: []
  };
  function ChannelUnit() {
    ChannelUnit$Companion_getInstance();
    this.ctx = new ChannelUnitContext();
    this.br_tvl096$_0 = this.br_tvl096$_0;
    this.dsp_0 = null;
    this.numChannels_0 = 0;
  }
  Object.defineProperty(ChannelUnit.prototype, 'br_0', {
    get: function () {
      if (this.br_tvl096$_0 == null)
        return throwUPAE('br');
      return this.br_tvl096$_0;
    },
    set: function (br) {
      this.br_tvl096$_0 = br;
    }
  });
  Object.defineProperty(ChannelUnit.prototype, 'numCtValues_0', {
    get: function () {
      if (!this.br_0.readBool()) {
        return this.ctx.usedQuantUnits;
      }
      var numCodedVals = this.br_0.read_za3lpa$(5);
      if (numCodedVals > this.ctx.usedQuantUnits) {
        var $this = ChannelUnit$Companion_getInstance().log_0;
        var level = LogLevel.ERROR;
        if ($this.isEnabled_ci8eq1$(level)) {
          $this.actualLog_t189ph$(level, format('Invalid number of code table indexes: %d', [numCodedVals]));
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
      return numCodedVals;
    }
  });
  ChannelUnit.prototype.setBitReader_95dlk7$ = function (br) {
    this.br_0 = br;
  };
  ChannelUnit.prototype.setDsp_w5lqns$ = function (dsp) {
    this.dsp_0 = dsp;
  };
  ChannelUnit.prototype.setNumChannels_za3lpa$ = function (numChannels) {
    this.numChannels_0 = numChannels;
  };
  ChannelUnit.prototype.decode = function () {
    var ret;
    this.ctx.numQuantUnits = this.br_0.read_za3lpa$(5) + 1 | 0;
    if (this.ctx.numQuantUnits > 28 && this.ctx.numQuantUnits < 32) {
      ChannelUnit$Companion_getInstance().log_0.error_61zpoe$(format('Invalid number of quantization units: %d', [this.ctx.numQuantUnits]));
      return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
    }
    this.ctx.muteFlag = this.br_0.readBool();
    ret = this.decodeQuantWordlen_0();
    if (ret < 0) {
      return ret;
    }
    this.ctx.numSubbands = Atrac3plusData2_getInstance().atrac3p_qu_to_subband_8be2vx$[this.ctx.numQuantUnits - 1 | 0] + 1 | 0;
    this.ctx.numCodedSubbands = this.ctx.usedQuantUnits > 0 ? Atrac3plusData2_getInstance().atrac3p_qu_to_subband_8be2vx$[this.ctx.usedQuantUnits - 1 | 0] + 1 | 0 : 0;
    ret = this.decodeScaleFactors_0();
    if (ret < 0) {
      return ret;
    }
    ret = this.decodeCodeTableIndexes_0();
    if (ret < 0) {
      return ret;
    }
    this.decodeSpectrum_0();
    if (this.numChannels_0 === 2) {
      this.getSubbandFlags_0(this.ctx.swapChannels, this.ctx.numCodedSubbands);
      this.getSubbandFlags_0(this.ctx.negateCoeffs, this.ctx.numCodedSubbands);
    }
    this.decodeWindowShape_0();
    ret = this.decodeGaincData_0();
    if (ret < 0) {
      return ret;
    }
    ret = this.decodeTonesInfo_0();
    if (ret < 0) {
      return ret;
    }
    this.ctx.noisePresent = this.br_0.readBool();
    if (this.ctx.noisePresent) {
      this.ctx.noiseLevelIndex = this.br_0.read_za3lpa$(4);
      this.ctx.noiseTableIndex = this.br_0.read_za3lpa$(4);
    }
    return 0;
  };
  ChannelUnit.prototype.numCodedUnits_0 = function (chan) {
    chan.fillMode = this.br_0.read_za3lpa$(2);
    if (chan.fillMode === 0) {
      chan.numCodedVals = this.ctx.numQuantUnits;
    }
     else {
      chan.numCodedVals = this.br_0.read_za3lpa$(5);
      if (chan.numCodedVals > this.ctx.numQuantUnits) {
        var $this = ChannelUnit$Companion_getInstance().log_0;
        var level = LogLevel.ERROR;
        if ($this.isEnabled_ci8eq1$(level)) {
          $this.actualLog_t189ph$(level, 'Invalid number of transmitted units');
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
      if (chan.fillMode === 3) {
        chan.splitPoint = this.br_0.read_za3lpa$(2) + (chan.chNum << 1) + 1 | 0;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.getDelta_0 = function (deltaBits) {
    return deltaBits <= 0 ? 0 : this.br_0.read_za3lpa$(deltaBits);
  };
  ChannelUnit.prototype.unpackVqShape_0 = function (startVal, shapeVec, dst, numValues) {
    if (numValues > 0) {
      dst[0] = startVal;
      dst[1] = startVal;
      dst[2] = startVal;
      for (var i = 3; i < numValues; i++) {
        dst[i] = startVal - shapeVec[Atrac3plusData2_getInstance().atrac3p_qu_num_to_seg_8be2vx$[i] - 1 | 0] | 0;
      }
    }
  };
  ChannelUnit.prototype.unpackSfVqShape_0 = function (dst, numValues) {
    var startVal = this.br_0.read_za3lpa$(6);
    this.unpackVqShape_0(startVal, Atrac3plusData2_getInstance().atrac3p_sf_shapes_8be2vx$[this.br_0.read_za3lpa$(6)], dst, numValues);
  };
  ChannelUnit.prototype.addWordlenWeights_0 = function (chan, weightIdx) {
    var tmp$, tmp$_0;
    var weigthsTab = Atrac3plusData2_getInstance().atrac3p_wl_weights_8be2vx$[(chan.chNum * 3 | 0) + weightIdx - 1 | 0];
    tmp$ = this.ctx.numQuantUnits;
    for (var i = 0; i < tmp$; i++) {
      tmp$_0 = chan.quWordlen;
      tmp$_0[i] = tmp$_0[i] + weigthsTab[i] | 0;
      if (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) {
        var $this = ChannelUnit$Companion_getInstance().log_0;
        var level = LogLevel.ERROR;
        if ($this.isEnabled_ci8eq1$(level)) {
          $this.actualLog_t189ph$(level, format('WL index out of range pos=%d, val=%d', [i, chan.quWordlen[i]]));
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeChannelWordlen_0 = function (chNum) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8;
    var ret;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    var weightIdx = 0;
    chan.fillMode = 0;
    tmp$ = this.br_0.read_za3lpa$(2);
    if (tmp$ === 0) {
      tmp$_0 = this.ctx.numQuantUnits;
      for (var i = 0; i < tmp$_0; i++) {
        chan.quWordlen[i] = this.br_0.read_za3lpa$(3);
      }
    }
     else if (tmp$ === 1)
      if (chNum > 0) {
        ret = this.numCodedUnits_0(chan);
        if (ret < 0) {
          return ret;
        }
        if (chan.numCodedVals > 0) {
          var vlcTab = ChannelUnit$Companion_getInstance().wl_vlc_tabs_0[this.br_0.read_za3lpa$(2)];
          tmp$_1 = chan.numCodedVals;
          for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
            var delta = vlcTab.getVLC2_poz3xs$(this.br_0);
            chan.quWordlen[i_0] = refChan.quWordlen[i_0] + delta & 7;
          }
        }
      }
       else {
        weightIdx = this.br_0.read_za3lpa$(2);
        ret = this.numCodedUnits_0(chan);
        if (ret < 0) {
          return ret;
        }
        if (chan.numCodedVals > 0) {
          var pos = this.br_0.read_za3lpa$(5);
          if (pos > chan.numCodedVals) {
            var $this = ChannelUnit$Companion_getInstance().log_0;
            var level = LogLevel.ERROR;
            if ($this.isEnabled_ci8eq1$(level)) {
              $this.actualLog_t189ph$(level, format('WL mode 1: invalid position %d', [pos]));
            }
            return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
          }
          var deltaBits = this.br_0.read_za3lpa$(2);
          var minVal = this.br_0.read_za3lpa$(3);
          for (var i_1 = 0; i_1 < pos; i_1++) {
            chan.quWordlen[i_1] = this.br_0.read_za3lpa$(3);
          }
          tmp$_2 = chan.numCodedVals;
          for (var i_2 = pos; i_2 < tmp$_2; i_2++) {
            chan.quWordlen[i_2] = minVal + this.getDelta_0(deltaBits) & 7;
          }
        }
      }
     else if (tmp$ === 2) {
      ret = this.numCodedUnits_0(chan);
      if (ret < 0) {
        return ret;
      }
      if (chNum > 0 && chan.numCodedVals > 0) {
        var vlcTab_0 = ensureNotNull(ChannelUnit$Companion_getInstance().wl_vlc_tabs_0[this.br_0.read_za3lpa$(2)]);
        var delta_0 = vlcTab_0.getVLC2_poz3xs$(this.br_0);
        chan.quWordlen[0] = refChan.quWordlen[0] + delta_0 & 7;
        tmp$_3 = chan.numCodedVals;
        for (var i_3 = 1; i_3 < tmp$_3; i_3++) {
          var diff = refChan.quWordlen[i_3] - refChan.quWordlen[i_3 - 1 | 0] | 0;
          delta_0 = vlcTab_0.getVLC2_poz3xs$(this.br_0);
          chan.quWordlen[i_3] = chan.quWordlen[i_3 - 1 | 0] + diff + delta_0 & 7;
        }
      }
       else if (chan.numCodedVals > 0) {
        var flag = this.br_0.readBool();
        var vlcTab_1 = ensureNotNull(ChannelUnit$Companion_getInstance().wl_vlc_tabs_0[this.br_0.read_za3lpa$(1)]);
        var startVal = this.br_0.read_za3lpa$(3);
        this.unpackVqShape_0(startVal, Atrac3plusData2_getInstance().atrac3p_wl_shapes_8be2vx$[startVal][this.br_0.read_za3lpa$(4)], chan.quWordlen, chan.numCodedVals);
        if (!flag) {
          tmp$_4 = chan.numCodedVals;
          for (var i_4 = 0; i_4 < tmp$_4; i_4++) {
            var delta_1 = vlcTab_1.getVLC2_poz3xs$(this.br_0);
            chan.quWordlen[i_4] = chan.quWordlen[i_4] + delta_1 & 7;
          }
        }
         else {
          var i_5;
          i_5 = 0;
          while (i_5 < (chan.numCodedVals & -2)) {
            if (!this.br_0.readBool()) {
              chan.quWordlen[i_5] = chan.quWordlen[i_5] + vlcTab_1.getVLC2_poz3xs$(this.br_0) & 7;
              chan.quWordlen[i_5 + 1 | 0] = chan.quWordlen[i_5 + 1 | 0] + vlcTab_1.getVLC2_poz3xs$(this.br_0) & 7;
            }
            i_5 = i_5 + 2 | 0;
          }
          if ((chan.numCodedVals & 1) !== 0) {
            chan.quWordlen[i_5] = chan.quWordlen[i_5] + vlcTab_1.getVLC2_poz3xs$(this.br_0) & 7;
          }
        }
      }
    }
     else if (tmp$ === 3) {
      weightIdx = this.br_0.read_za3lpa$(2);
      ret = this.numCodedUnits_0(chan);
      if (ret < 0) {
        return ret;
      }
      if (chan.numCodedVals > 0) {
        var vlcTab_2 = ensureNotNull(ChannelUnit$Companion_getInstance().wl_vlc_tabs_0[this.br_0.read_za3lpa$(2)]);
        chan.quWordlen[0] = this.br_0.read_za3lpa$(3);
        tmp$_5 = chan.numCodedVals;
        for (var i_6 = 1; i_6 < tmp$_5; i_6++) {
          var delta_2 = vlcTab_2.getVLC2_poz3xs$(this.br_0);
          chan.quWordlen[i_6] = chan.quWordlen[i_6 - 1 | 0] + delta_2 & 7;
        }
      }
    }
    if (chan.fillMode === 2) {
      tmp$_6 = chan.numCodedVals;
      tmp$_7 = this.ctx.numQuantUnits;
      for (var i_7 = tmp$_6; i_7 < tmp$_7; i_7++) {
        chan.quWordlen[i_7] = chNum > 0 ? this.br_0.read1() : 1;
      }
    }
     else if (chan.fillMode === 3) {
      var pos_0 = chNum > 0 ? chan.numCodedVals + chan.splitPoint | 0 : this.ctx.numQuantUnits - chan.splitPoint | 0;
      for (var i_8 = chan.numCodedVals; i_8 < pos_0; i_8++) {
        chan.quWordlen[i_8] = 1;
      }
    }
    if (weightIdx !== 0) {
      tmp$_8 = this.addWordlenWeights_0(chan, weightIdx);
    }
     else
      tmp$_8 = 0;
    return tmp$_8;
  };
  ChannelUnit.prototype.substractSfWeights_0 = function (chan, wtabIdx) {
    var tmp$, tmp$_0;
    var weigthsTab = Atrac3plusData2_getInstance().atrac3p_sf_weights_8be2vx$[wtabIdx - 1 | 0];
    tmp$ = this.ctx.usedQuantUnits;
    for (var i = 0; i < tmp$; i++) {
      tmp$_0 = chan.quSfIdx;
      tmp$_0[i] = tmp$_0[i] - weigthsTab[i] | 0;
      if (chan.quSfIdx[i] < 0 || chan.quSfIdx[i] > 63) {
        var $this = ChannelUnit$Companion_getInstance().log_0;
        var level = LogLevel.ERROR;
        if ($this.isEnabled_ci8eq1$(level)) {
          $this.actualLog_t189ph$(level, format('SF index out of range pos=%d, val=%d', [i, chan.quSfIdx[i]]));
        }
        return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeChannelSfIdx_0 = function (chNum) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    var weightIdx = 0;
    chan.fillMode = 0;
    tmp$ = this.br_0.read_za3lpa$(2);
    if (tmp$ === 0) {
      tmp$_0 = this.ctx.usedQuantUnits;
      for (var i = 0; i < tmp$_0; i++) {
        chan.quSfIdx[i] = this.br_0.read_za3lpa$(6);
      }
    }
     else if (tmp$ === 1)
      if (chNum > 0) {
        var vlcTab = ensureNotNull(ChannelUnit$Companion_getInstance().sf_vlc_tabs_0[this.br_0.read_za3lpa$(2)]);
        tmp$_1 = this.ctx.usedQuantUnits;
        for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
          var delta = vlcTab.getVLC2_poz3xs$(this.br_0);
          chan.quSfIdx[i_0] = refChan.quSfIdx[i_0] + delta & 63;
        }
      }
       else {
        weightIdx = this.br_0.read_za3lpa$(2);
        if (weightIdx === 3) {
          this.unpackSfVqShape_0(chan.quSfIdx, this.ctx.usedQuantUnits);
          var numLongVals = this.br_0.read_za3lpa$(5);
          var deltaBits = this.br_0.read_za3lpa$(2);
          var minVal = this.br_0.read_za3lpa$(4) - 7 | 0;
          for (var i_1 = 0; i_1 < numLongVals; i_1++) {
            chan.quSfIdx[i_1] = chan.quSfIdx[i_1] + this.br_0.read_za3lpa$(4) - 7 & 63;
          }
          tmp$_2 = this.ctx.usedQuantUnits;
          for (var i_2 = numLongVals; i_2 < tmp$_2; i_2++) {
            chan.quSfIdx[i_2] = chan.quSfIdx[i_2] + minVal + this.getDelta_0(deltaBits) & 63;
          }
        }
         else {
          var numLongVals_0 = this.br_0.read_za3lpa$(5);
          var deltaBits_0 = this.br_0.read_za3lpa$(3);
          var minVal_0 = this.br_0.read_za3lpa$(6);
          if (numLongVals_0 > this.ctx.usedQuantUnits || deltaBits_0 === 7) {
            ChannelUnit$Companion_getInstance().log_0.error_61zpoe$(format('SF mode 1: invalid parameters', []));
            return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
          }
          for (var i_3 = 0; i_3 < numLongVals_0; i_3++) {
            chan.quSfIdx[i_3] = this.br_0.read_za3lpa$(6);
          }
          tmp$_3 = this.ctx.usedQuantUnits;
          for (var i_4 = numLongVals_0; i_4 < tmp$_3; i_4++) {
            chan.quSfIdx[i_4] = minVal_0 + this.getDelta_0(deltaBits_0) & 63;
          }
        }
      }
     else if (tmp$ === 2) {
      if (chNum > 0) {
        var vlcTab_0 = ensureNotNull(ChannelUnit$Companion_getInstance().sf_vlc_tabs_0[this.br_0.read_za3lpa$(2)]);
        var delta_0 = vlcTab_0.getVLC2_poz3xs$(this.br_0);
        chan.quSfIdx[0] = refChan.quSfIdx[0] + delta_0 & 63;
        tmp$_4 = this.ctx.usedQuantUnits;
        for (var i_5 = 1; i_5 < tmp$_4; i_5++) {
          var diff = refChan.quSfIdx[i_5] - refChan.quSfIdx[i_5 - 1 | 0] | 0;
          delta_0 = vlcTab_0.getVLC2_poz3xs$(this.br_0);
          chan.quSfIdx[i_5] = chan.quSfIdx[i_5 - 1 | 0] + diff + delta_0 & 63;
        }
      }
       else if (chan.numCodedVals > 0) {
        var vlcTab_1 = ChannelUnit$Companion_getInstance().sf_vlc_tabs_0[this.br_0.read_za3lpa$(2) + 4 | 0];
        this.unpackSfVqShape_0(chan.quSfIdx, this.ctx.usedQuantUnits);
        tmp$_5 = this.ctx.usedQuantUnits;
        for (var i_6 = 0; i_6 < tmp$_5; i_6++) {
          var delta_1 = ensureNotNull(vlcTab_1).getVLC2_poz3xs$(this.br_0);
          chan.quSfIdx[i_6] = chan.quSfIdx[i_6] + signExtend(delta_1, 4) & 63;
        }
      }
    }
     else if (tmp$ === 3)
      if (chNum > 0) {
        tmp$_6 = this.ctx.usedQuantUnits;
        for (var i_7 = 0; i_7 < tmp$_6; i_7++) {
          chan.quSfIdx[i_7] = refChan.quSfIdx[i_7];
        }
      }
       else {
        weightIdx = this.br_0.read_za3lpa$(2);
        var vlcSel = this.br_0.read_za3lpa$(2);
        var vlcTab_2 = ensureNotNull(ChannelUnit$Companion_getInstance().sf_vlc_tabs_0[vlcSel]);
        if (weightIdx === 3) {
          vlcTab_2 = ensureNotNull(ChannelUnit$Companion_getInstance().sf_vlc_tabs_0[vlcSel + 4 | 0]);
          this.unpackSfVqShape_0(chan.quSfIdx, this.ctx.usedQuantUnits);
          var diff_0 = this.br_0.read_za3lpa$(4) + 56 & 63;
          chan.quSfIdx[0] = chan.quSfIdx[0] + diff_0 & 63;
          tmp$_7 = this.ctx.usedQuantUnits;
          for (var i_8 = 1; i_8 < tmp$_7; i_8++) {
            var delta_2 = vlcTab_2.getVLC2_poz3xs$(this.br_0);
            diff_0 = diff_0 + signExtend(delta_2, 4) & 63;
            chan.quSfIdx[i_8] = diff_0 + chan.quSfIdx[i_8] & 63;
          }
        }
         else {
          chan.quSfIdx[0] = this.br_0.read_za3lpa$(6);
          tmp$_8 = this.ctx.usedQuantUnits;
          for (var i_9 = 1; i_9 < tmp$_8; i_9++) {
            var delta_3 = vlcTab_2.getVLC2_poz3xs$(this.br_0);
            chan.quSfIdx[i_9] = chan.quSfIdx[i_9 - 1 | 0] + delta_3 & 63;
          }
        }
      }
    if (weightIdx !== 0 && weightIdx < 3) {
      tmp$_9 = this.substractSfWeights_0(chan, weightIdx);
    }
     else
      tmp$_9 = 0;
    return tmp$_9;
  };
  ChannelUnit.prototype.decodeQuantWordlen_0 = function () {
    var tmp$;
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      var $receiver = this.ctx.channels[chNum].quWordlen;
      var end;
      end = $receiver.length;
      $receiver.fill(0, 0, end);
      var ret = this.decodeChannelWordlen_0(chNum);
      if (ret < 0) {
        return ret;
      }
    }
    var i;
    i = this.ctx.numQuantUnits - 1 | 0;
    while (i >= 0 && (this.ctx.channels[0].quWordlen[i] === 0 && (this.numChannels_0 !== 2 || this.ctx.channels[1].quWordlen[i] === 0))) {
      i = i - 1 | 0;
    }
    this.ctx.usedQuantUnits = i + 1 | 0;
    return 0;
  };
  ChannelUnit.prototype.decodeScaleFactors_0 = function () {
    var tmp$;
    if (this.ctx.usedQuantUnits === 0) {
      return 0;
    }
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      var $receiver = this.ctx.channels[chNum].quSfIdx;
      var end;
      end = $receiver.length;
      $receiver.fill(0, 0, end);
      var ret = this.decodeChannelSfIdx_0(chNum);
      if (ret < 0) {
        return ret;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeChannelCodeTab_0 = function (chNum) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var vlcTab;
    var numVals;
    var mask = this.ctx.useFullTable ? 7 : 3;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    chan.tableType = this.br_0.read_za3lpa$(1);
    tmp$ = this.br_0.read_za3lpa$(2);
    if (tmp$ === 0) {
      var numBits = this.ctx.useFullTable ? 3 : 2;
      numVals = this.numCtValues_0;
      if (numVals < 0) {
        return numVals;
      }
      tmp$_0 = numVals;
      for (var i = 0; i < tmp$_0; i++) {
        if (chan.quWordlen[i] !== 0) {
          chan.quTabIdx[i] = this.br_0.read_za3lpa$(numBits);
        }
         else if (chNum > 0 && refChan.quWordlen[i] !== 0) {
          chan.quTabIdx[i] = this.br_0.read1();
        }
      }
    }
     else if (tmp$ === 1) {
      vlcTab = this.ctx.useFullTable ? ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[1]) : ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[0]);
      numVals = this.numCtValues_0;
      if (numVals < 0) {
        return numVals;
      }
      tmp$_1 = numVals;
      for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
        if (chan.quWordlen[i_0] !== 0) {
          chan.quTabIdx[i_0] = vlcTab.getVLC2_poz3xs$(this.br_0);
        }
         else if (chNum > 0 && refChan.quWordlen[i_0] !== 0) {
          chan.quTabIdx[i_0] = this.br_0.read1();
        }
      }
    }
     else if (tmp$ === 2) {
      var deltaVlc;
      if (this.ctx.useFullTable) {
        vlcTab = ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[1]);
        deltaVlc = ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[2]);
      }
       else {
        vlcTab = ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[0]);
        deltaVlc = ensureNotNull(ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[0]);
      }
      var pred = 0;
      numVals = this.numCtValues_0;
      if (numVals < 0) {
        return numVals;
      }
      tmp$_2 = numVals;
      for (var i_1 = 0; i_1 < tmp$_2; i_1++) {
        if (chan.quWordlen[i_1] !== 0) {
          chan.quTabIdx[i_1] = i_1 === 0 ? vlcTab.getVLC2_poz3xs$(this.br_0) : pred + deltaVlc.getVLC2_poz3xs$(this.br_0) & mask;
          pred = chan.quTabIdx[i_1];
        }
         else if (chNum > 0 && refChan.quWordlen[i_1] !== 0) {
          chan.quTabIdx[i_1] = this.br_0.read1();
        }
      }
    }
     else if (tmp$ === 3)
      if (chNum > 0) {
        vlcTab = this.ctx.useFullTable ? ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[3] : ChannelUnit$Companion_getInstance().ct_vlc_tabs_0[0];
        numVals = this.numCtValues_0;
        if (numVals < 0) {
          return numVals;
        }
        tmp$_3 = numVals;
        for (var i_2 = 0; i_2 < tmp$_3; i_2++) {
          if (chan.quWordlen[i_2] !== 0) {
            chan.quTabIdx[i_2] = refChan.quTabIdx[i_2] + vlcTab.getVLC2_poz3xs$(this.br_0) & mask;
          }
           else if (chNum > 0 && refChan.quWordlen[i_2] !== 0) {
            chan.quTabIdx[i_2] = this.br_0.read1();
          }
        }
      }
    return 0;
  };
  ChannelUnit.prototype.decodeCodeTableIndexes_0 = function () {
    var tmp$;
    if (this.ctx.usedQuantUnits === 0) {
      return 0;
    }
    this.ctx.useFullTable = this.br_0.readBool();
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      var $receiver = this.ctx.channels[chNum].quTabIdx;
      var end;
      end = $receiver.length;
      $receiver.fill(0, 0, end);
      var ret = this.decodeChannelCodeTab_0(chNum);
      if (ret < 0) {
        return ret;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeQuSpectra_0 = function (tab, vlcTab, out, outOffset, numSpecs) {
    var groupSize = tab.groupSize;
    var numCoeffs = tab.numCoeffs;
    var bits = tab.bits;
    var isSigned = tab.isSigned;
    var mask = (1 << bits) - 1 | 0;
    var pos = 0;
    while (pos < numSpecs) {
      if (groupSize === 1 || this.br_0.readBool()) {
        for (var j = 0; j < groupSize; j++) {
          var val = vlcTab.getVLC2_poz3xs$(this.br_0);
          for (var i = 0; i < numCoeffs; i++) {
            var cf = val & mask;
            if (isSigned) {
              cf = signExtend(cf, bits);
            }
             else if (cf !== 0 && this.br_0.readBool()) {
              cf = -cf;
            }
            out[outOffset + pos | 0] = cf;
            pos = pos + 1 | 0;
            val = val >> bits;
          }
        }
      }
       else {
        pos = pos + Kotlin.imul(groupSize, numCoeffs) | 0;
      }
    }
  };
  ChannelUnit.prototype.decodeSpectrum_0 = function () {
    var tmp$, tmp$_0;
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      var chan = this.ctx.channels[chNum];
      var $receiver = chan.spectrum;
      var end;
      end = $receiver.length;
      $receiver.fill(0, 0, end);
      var $receiver_0 = chan.powerLevs;
      var value = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_POWER_COMP_OFF;
      var end_0;
      end_0 = $receiver_0.length;
      $receiver_0.fill(value, 0, end_0);
      tmp$_0 = this.ctx.usedQuantUnits;
      for (var qu = 0; qu < tmp$_0; qu++) {
        var numSpecs = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu + 1 | 0] - Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu] | 0;
        var wordlen = chan.quWordlen[qu];
        var codetab = chan.quTabIdx[qu];
        if (wordlen > 0) {
          if (!this.ctx.useFullTable) {
            codetab = Atrac3plusData2_getInstance().atrac3p_ct_restricted_to_full_8be2vx$[chan.tableType][wordlen - 1 | 0][codetab];
          }
          var tabIndex = (((chan.tableType * 8 | 0) + codetab | 0) * 7 | 0) + wordlen - 1 | 0;
          var tab = Atrac3plusData1_getInstance().atrac3p_spectra_tabs_8be2vx$[tabIndex];
          if (tab.redirect >= 0) {
            tabIndex = tab.redirect;
          }
          this.decodeQuSpectra_0(tab, ensureNotNull(ChannelUnit$Companion_getInstance().spec_vlc_tabs_0[tabIndex]), chan.spectrum, Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu], numSpecs);
        }
         else if (chNum > 0 && this.ctx.channels[0].quWordlen[qu] !== 0 && codetab === 0) {
          arraycopy_0(this.ctx.channels[0].spectrum, Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu], chan.spectrum, Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu], numSpecs);
          chan.quWordlen[qu] = this.ctx.channels[0].quWordlen[qu];
        }
      }
      if (this.ctx.usedQuantUnits > 2) {
        var numSpecs_0 = Atrac3plusData2_getInstance().atrac3p_subband_to_num_powgrps_8be2vx$[this.ctx.numCodedSubbands - 1 | 0];
        for (var i = 0; i < numSpecs_0; i++) {
          chan.powerLevs[i] = this.br_0.read_za3lpa$(4);
        }
      }
    }
  };
  ChannelUnit.prototype.getSubbandFlags_0 = function (out, numFlags) {
    var result = this.br_0.readBool();
    if (result) {
      if (this.br_0.readBool()) {
        for (var i = 0; i < numFlags; i++) {
          out[i] = this.br_0.readBool();
        }
      }
       else {
        for (var i_0 = 0; i_0 < numFlags; i_0++) {
          out[i_0] = true;
        }
      }
    }
     else {
      for (var i_1 = 0; i_1 < numFlags; i_1++) {
        out[i_1] = false;
      }
    }
    return result;
  };
  ChannelUnit.prototype.decodeWindowShape_0 = function () {
    var tmp$;
    tmp$ = this.numChannels_0;
    for (var i = 0; i < tmp$; i++) {
      this.getSubbandFlags_0(this.ctx.channels[i].wndShape, this.ctx.numSubbands);
    }
  };
  ChannelUnit.prototype.decodeGaincNPoints_0 = function (chNum, codedSubbands) {
    var tmp$;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    tmp$ = this.br_0.read_za3lpa$(2);
    if (tmp$ === 0) {
      for (var i = 0; i < codedSubbands; i++) {
        chan.gainData_8be2vx$[i].numPoints = this.br_0.read_za3lpa$(3);
      }
    }
     else if (tmp$ === 1) {
      for (var i_0 = 0; i_0 < codedSubbands; i_0++) {
        chan.gainData_8be2vx$[i_0].numPoints = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[0].getVLC2_poz3xs$(this.br_0);
      }
    }
     else if (tmp$ === 2)
      if (chNum > 0) {
        for (var i_1 = 0; i_1 < codedSubbands; i_1++) {
          var delta = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[1].getVLC2_poz3xs$(this.br_0);
          chan.gainData_8be2vx$[i_1].numPoints = refChan.gainData_8be2vx$[i_1].numPoints + delta & 7;
        }
      }
       else {
        chan.gainData_8be2vx$[0].numPoints = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[0].getVLC2_poz3xs$(this.br_0);
        for (var i_2 = 1; i_2 < codedSubbands; i_2++) {
          var delta_0 = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[1].getVLC2_poz3xs$(this.br_0);
          chan.gainData_8be2vx$[i_2].numPoints = chan.gainData_8be2vx$[i_2 - 1 | 0].numPoints + delta_0 & 7;
        }
      }
     else if (tmp$ === 3)
      if (chNum > 0) {
        for (var i_3 = 0; i_3 < codedSubbands; i_3++) {
          chan.gainData_8be2vx$[i_3].numPoints = refChan.gainData_8be2vx$[i_3].numPoints;
        }
      }
       else {
        var deltaBits = this.br_0.read_za3lpa$(2);
        var minVal = this.br_0.read_za3lpa$(3);
        for (var i_4 = 0; i_4 < codedSubbands; i_4++) {
          chan.gainData_8be2vx$[i_4].numPoints = minVal + this.getDelta_0(deltaBits) | 0;
          if (chan.gainData_8be2vx$[i_4].numPoints > 7) {
            return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
          }
        }
      }
    return 0;
  };
  ChannelUnit.prototype.gaincLevelMode1m_0 = function (dst) {
    var tmp$;
    if (dst.numPoints > 0) {
      dst.levCode[0] = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[2].getVLC2_poz3xs$(this.br_0);
    }
    tmp$ = dst.numPoints;
    for (var i = 1; i < tmp$; i++) {
      var delta = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[3].getVLC2_poz3xs$(this.br_0);
      dst.levCode[i] = dst.levCode[i - 1 | 0] + delta & 15;
    }
  };
  ChannelUnit.prototype.gaincLevelMode3s_0 = function (dst, ref) {
    var tmp$;
    tmp$ = dst.numPoints;
    for (var i = 0; i < tmp$; i++) {
      dst.levCode[i] = i >= ref.numPoints ? 7 : ref.levCode[i];
    }
  };
  ChannelUnit.prototype.decodeGaincLevels_0 = function (chNum, codedSubbands) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    tmp$ = this.br_0.read_za3lpa$(2);
    if (tmp$ === 0) {
      for (var sb = 0; sb < codedSubbands; sb++) {
        tmp$_0 = chan.gainData_8be2vx$[sb].numPoints;
        for (var i = 0; i < tmp$_0; i++) {
          chan.gainData_8be2vx$[sb].levCode[i] = this.br_0.read_za3lpa$(4);
        }
      }
    }
     else if (tmp$ === 1)
      if (chNum > 0) {
        for (var sb_0 = 0; sb_0 < codedSubbands; sb_0++) {
          tmp$_1 = chan.gainData_8be2vx$[sb_0].numPoints;
          for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
            var delta = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[5].getVLC2_poz3xs$(this.br_0);
            var pred = i_0 >= refChan.gainData_8be2vx$[sb_0].numPoints ? 7 : refChan.gainData_8be2vx$[sb_0].levCode[i_0];
            chan.gainData_8be2vx$[sb_0].levCode[i_0] = pred + delta & 15;
          }
        }
      }
       else {
        for (var sb_1 = 0; sb_1 < codedSubbands; sb_1++) {
          this.gaincLevelMode1m_0(chan.gainData_8be2vx$[sb_1]);
        }
      }
     else if (tmp$ === 2)
      if (chNum > 0) {
        for (var sb_2 = 0; sb_2 < codedSubbands; sb_2++) {
          if (chan.gainData_8be2vx$[sb_2].numPoints > 0) {
            if (this.br_0.readBool()) {
              this.gaincLevelMode1m_0(chan.gainData_8be2vx$[sb_2]);
            }
             else {
              this.gaincLevelMode3s_0(chan.gainData_8be2vx$[sb_2], refChan.gainData_8be2vx$[sb_2]);
            }
          }
        }
      }
       else {
        if (chan.gainData_8be2vx$[0].numPoints > 0) {
          this.gaincLevelMode1m_0(chan.gainData_8be2vx$[0]);
        }
        for (var sb_3 = 1; sb_3 < codedSubbands; sb_3++) {
          tmp$_2 = chan.gainData_8be2vx$[sb_3].numPoints;
          for (var i_1 = 0; i_1 < tmp$_2; i_1++) {
            var delta_0 = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[4].getVLC2_poz3xs$(this.br_0);
            var pred_0 = i_1 >= chan.gainData_8be2vx$[sb_3 - 1 | 0].numPoints ? 7 : chan.gainData_8be2vx$[sb_3 - 1 | 0].levCode[i_1];
            chan.gainData_8be2vx$[sb_3].levCode[i_1] = pred_0 + delta_0 & 15;
          }
        }
      }
     else if (tmp$ === 3)
      if (chNum > 0) {
        for (var sb_4 = 0; sb_4 < codedSubbands; sb_4++) {
          this.gaincLevelMode3s_0(chan.gainData_8be2vx$[sb_4], refChan.gainData_8be2vx$[sb_4]);
        }
      }
       else {
        var deltaBits = this.br_0.read_za3lpa$(2);
        var minVal = this.br_0.read_za3lpa$(4);
        for (var sb_5 = 0; sb_5 < codedSubbands; sb_5++) {
          tmp$_3 = chan.gainData_8be2vx$[sb_5].numPoints;
          for (var i_2 = 0; i_2 < tmp$_3; i_2++) {
            chan.gainData_8be2vx$[sb_5].levCode[i_2] = minVal + this.getDelta_0(deltaBits) | 0;
            if (chan.gainData_8be2vx$[sb_5].levCode[i_2] > 15) {
              return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
            }
          }
        }
      }
    return 0;
  };
  ChannelUnit.prototype.gaincLocMode0_0 = function (dst, pos) {
    if (pos === 0 || dst.locCode[pos - 1 | 0] < 15) {
      dst.locCode[pos] = this.br_0.read_za3lpa$(5);
    }
     else if (dst.locCode[pos - 1 | 0] >= 30) {
      dst.locCode[pos] = 31;
    }
     else {
      var deltaBits = CodecUtils_getInstance().avLog2_za3lpa$(30 - dst.locCode[pos - 1 | 0] | 0) + 1 | 0;
      dst.locCode[pos] = dst.locCode[pos - 1 | 0] + this.br_0.read_za3lpa$(deltaBits) + 1 | 0;
    }
  };
  ChannelUnit.prototype.gaincLocMode1_0 = function (dst) {
    var tmp$;
    if (dst.numPoints > 0) {
      dst.locCode[0] = this.br_0.read_za3lpa$(5);
      tmp$ = dst.numPoints;
      for (var i = 1; i < tmp$; i++) {
        var tab = dst.levCode[i] <= dst.levCode[i - 1 | 0] ? ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[7] : ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[9];
        dst.locCode[i] = dst.locCode[i - 1 | 0] + tab.getVLC2_poz3xs$(this.br_0) | 0;
      }
    }
  };
  ChannelUnit.prototype.decodeGaincLocCodes_0 = function (chNum, codedSubbands) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6;
    var chan = this.ctx.channels[chNum];
    var refChan = this.ctx.channels[0];
    var codingMode = this.br_0.read_za3lpa$(2);
    if (codingMode === 0) {
      for (var sb = 0; sb < codedSubbands; sb++) {
        tmp$ = chan.gainData_8be2vx$[sb].numPoints;
        for (var i = 0; i < tmp$; i++) {
          this.gaincLocMode0_0(chan.gainData_8be2vx$[sb], i);
        }
      }
    }
     else if (codingMode === 1)
      if (chNum > 0) {
        for (var sb_0 = 0; sb_0 < codedSubbands; sb_0++) {
          if (chan.gainData_8be2vx$[sb_0].numPoints <= 0) {
            continue;
          }
          var dst = chan.gainData_8be2vx$[sb_0];
          var ref = refChan.gainData_8be2vx$[sb_0];
          var delta = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[10].getVLC2_poz3xs$(this.br_0);
          var pred = ref.numPoints > 0 ? ref.locCode[0] : 0;
          dst.locCode[0] = pred + delta & 31;
          tmp$_0 = dst.numPoints;
          for (var i_0 = 1; i_0 < tmp$_0; i_0++) {
            var moreThanRef = i_0 >= ref.numPoints;
            if (dst.levCode[i_0] > dst.levCode[i_0 - 1 | 0]) {
              if (moreThanRef) {
                delta = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[9].getVLC2_poz3xs$(this.br_0);
                dst.locCode[i_0] = dst.locCode[i_0 - 1 | 0] + delta | 0;
              }
               else {
                if (this.br_0.readBool()) {
                  this.gaincLocMode0_0(dst, i_0);
                }
                 else {
                  dst.locCode[i_0] = ref.locCode[i_0];
                }
              }
            }
             else {
              var tab = moreThanRef ? ensureNotNull(ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[7]) : ensureNotNull(ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[10]);
              delta = tab.getVLC2_poz3xs$(this.br_0);
              if (moreThanRef) {
                dst.locCode[i_0] = dst.locCode[i_0 - 1 | 0] + delta | 0;
              }
               else {
                dst.locCode[i_0] = ref.locCode[i_0] + delta & 31;
              }
            }
          }
        }
      }
       else {
        for (var sb_1 = 0; sb_1 < codedSubbands; sb_1++) {
          this.gaincLocMode1_0(chan.gainData_8be2vx$[sb_1]);
        }
      }
     else if (codingMode === 2)
      if (chNum > 0) {
        for (var sb_2 = 0; sb_2 < codedSubbands; sb_2++) {
          if (chan.gainData_8be2vx$[sb_2].numPoints <= 0) {
            continue;
          }
          var dst_0 = chan.gainData_8be2vx$[sb_2];
          var ref_0 = refChan.gainData_8be2vx$[sb_2];
          if (dst_0.numPoints > ref_0.numPoints || this.br_0.readBool()) {
            this.gaincLocMode1_0(dst_0);
          }
           else {
            tmp$_1 = chan.gainData_8be2vx$[sb_2].numPoints;
            for (var i_1 = 0; i_1 < tmp$_1; i_1++) {
              dst_0.locCode[i_1] = ref_0.locCode[i_1];
            }
          }
        }
      }
       else {
        tmp$_2 = chan.gainData_8be2vx$[0].numPoints;
        for (var i_2 = 0; i_2 < tmp$_2; i_2++) {
          this.gaincLocMode0_0(chan.gainData_8be2vx$[0], i_2);
        }
        for (var sb_3 = 1; sb_3 < codedSubbands; sb_3++) {
          if (chan.gainData_8be2vx$[sb_3].numPoints <= 0) {
            continue;
          }
          var dst_1 = chan.gainData_8be2vx$[sb_3];
          var delta_0 = ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[6].getVLC2_poz3xs$(this.br_0);
          var pred_0 = chan.gainData_8be2vx$[sb_3 - 1 | 0].numPoints > 0 ? chan.gainData_8be2vx$[sb_3 - 1 | 0].locCode[0] : 0;
          dst_1.locCode[0] = pred_0 + delta_0 & 31;
          tmp$_3 = dst_1.numPoints;
          for (var i_3 = 1; i_3 < tmp$_3; i_3++) {
            var moreThanRef_0 = i_3 >= chan.gainData_8be2vx$[sb_3 - 1 | 0].numPoints;
            var tab_0 = ensureNotNull(ChannelUnit$Companion_getInstance().gain_vlc_tabs_0[(dst_1.levCode[i_3] > dst_1.levCode[i_3 - 1 | 0] ? 2 : 0) + (moreThanRef_0 ? 1 : 0) + 6 | 0]);
            delta_0 = tab_0.getVLC2_poz3xs$(this.br_0);
            if (moreThanRef_0) {
              dst_1.locCode[i_3] = dst_1.locCode[i_3 - 1 | 0] + delta_0 | 0;
            }
             else {
              dst_1.locCode[i_3] = chan.gainData_8be2vx$[sb_3 - 1 | 0].locCode[i_3] + delta_0 & 31;
            }
          }
        }
      }
     else if (codingMode === 3)
      if (chNum > 0) {
        for (var sb_4 = 0; sb_4 < codedSubbands; sb_4++) {
          tmp$_4 = chan.gainData_8be2vx$[sb_4].numPoints;
          for (var i_4 = 0; i_4 < tmp$_4; i_4++) {
            if (i_4 >= refChan.gainData_8be2vx$[sb_4].numPoints) {
              this.gaincLocMode0_0(chan.gainData_8be2vx$[sb_4], i_4);
            }
             else {
              chan.gainData_8be2vx$[sb_4].locCode[i_4] = refChan.gainData_8be2vx$[sb_4].locCode[i_4];
            }
          }
        }
      }
       else {
        var deltaBits = this.br_0.read_za3lpa$(2) + 1 | 0;
        var minVal = this.br_0.read_za3lpa$(5);
        for (var sb_5 = 0; sb_5 < codedSubbands; sb_5++) {
          tmp$_5 = chan.gainData_8be2vx$[sb_5].numPoints;
          for (var i_5 = 0; i_5 < tmp$_5; i_5++) {
            chan.gainData_8be2vx$[sb_5].locCode[i_5] = minVal + i_5 + this.br_0.read_za3lpa$(deltaBits) | 0;
          }
        }
      }
    for (var sb_6 = 0; sb_6 < codedSubbands; sb_6++) {
      var dst_2 = chan.gainData_8be2vx$[sb_6];
      tmp$_6 = chan.gainData_8be2vx$[sb_6].numPoints;
      for (var i_6 = 0; i_6 < tmp$_6; i_6++) {
        if (dst_2.locCode[i_6] < 0 || dst_2.locCode[i_6] > 31 || (i_6 > 0 && dst_2.locCode[i_6] <= dst_2.locCode[i_6 - 1 | 0])) {
          ChannelUnit$Companion_getInstance().log_0.error_61zpoe$(format('Invalid gain location: ch=%d, sb=%d, pos=%d, val=%d', [chNum, sb_6, i_6, dst_2.locCode[i_6]]));
          return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
        }
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeGaincData_0 = function () {
    var tmp$, tmp$_0, tmp$_1;
    var ret;
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      tmp$_0 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS;
      for (var i = 0; i < tmp$_0; i++) {
        this.ctx.channels[chNum].gainData_8be2vx$[i].clear();
      }
      if (this.br_0.readBool()) {
        var codedSubbands = this.br_0.read_za3lpa$(4) + 1 | 0;
        if (this.br_0.readBool()) {
          this.ctx.channels[chNum].numGainSubbands = this.br_0.read_za3lpa$(4) + 1 | 0;
        }
         else {
          this.ctx.channels[chNum].numGainSubbands = codedSubbands;
        }
        ret = this.decodeGaincNPoints_0(chNum, codedSubbands);
        if (ret < 0) {
          return ret;
        }
        ret = this.decodeGaincLevels_0(chNum, codedSubbands);
        if (ret < 0) {
          return ret;
        }
        ret = this.decodeGaincLocCodes_0(chNum, codedSubbands);
        if (ret < 0) {
          return ret;
        }
        if (codedSubbands > 0) {
          tmp$_1 = this.ctx.channels[chNum].numGainSubbands;
          for (var sb = codedSubbands; sb < tmp$_1; sb++) {
            this.ctx.channels[chNum].gainData_8be2vx$[sb].copy_wkc6m7$(this.ctx.channels[chNum].gainData_8be2vx$[sb - 1 | 0]);
          }
        }
      }
       else {
        this.ctx.channels[chNum].numGainSubbands = 0;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeTonesEnvelope_0 = function (chNum, bandHasTones) {
    var tmp$, tmp$_0;
    var dst = this.ctx.channels[chNum].tonesInfo_8be2vx$;
    var ref = this.ctx.channels[0].tonesInfo_8be2vx$;
    if (chNum === 0 || !this.br_0.readBool()) {
      tmp$ = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb = 0; sb < tmp$; sb++) {
        if (!bandHasTones[sb]) {
          continue;
        }
        dst[sb].pendEnv_8be2vx$.hasStartPoint_8be2vx$ = this.br_0.readBool();
        dst[sb].pendEnv_8be2vx$.startPos_8be2vx$ = dst[sb].pendEnv_8be2vx$.hasStartPoint_8be2vx$ ? this.br_0.read_za3lpa$(5) : -1;
        dst[sb].pendEnv_8be2vx$.hasStopPoint_8be2vx$ = this.br_0.readBool();
        dst[sb].pendEnv_8be2vx$.stopPos_8be2vx$ = dst[sb].pendEnv_8be2vx$.hasStopPoint_8be2vx$ ? this.br_0.read_za3lpa$(5) : 32;
      }
    }
     else {
      tmp$_0 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_0 = 0; sb_0 < tmp$_0; sb_0++) {
        if (!bandHasTones[sb_0]) {
          continue;
        }
        dst[sb_0].pendEnv_8be2vx$.copy_ocikne$(ref[sb_0].pendEnv_8be2vx$);
      }
    }
  };
  ChannelUnit.prototype.decodeBandNumwavs_0 = function (chNum, bandHasTones) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    var dst = this.ctx.channels[chNum].tonesInfo_8be2vx$;
    var ref = this.ctx.channels[0].tonesInfo_8be2vx$;
    var mode = this.br_0.read_za3lpa$(chNum + 1 | 0);
    if (mode === 0) {
      tmp$ = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb = 0; sb < tmp$; sb++) {
        if (bandHasTones[sb]) {
          dst[sb].numWavs_8be2vx$ = this.br_0.read_za3lpa$(4);
        }
      }
    }
     else if (mode === 1) {
      tmp$_0 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_0 = 0; sb_0 < tmp$_0; sb_0++) {
        if (bandHasTones[sb_0]) {
          dst[sb_0].numWavs_8be2vx$ = ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[1].getVLC2_poz3xs$(this.br_0);
        }
      }
    }
     else if (mode === 2) {
      tmp$_1 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_1 = 0; sb_1 < tmp$_1; sb_1++) {
        if (bandHasTones[sb_1]) {
          var delta = ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[2].getVLC2_poz3xs$(this.br_0);
          delta = signExtend(delta, 3);
          dst[sb_1].numWavs_8be2vx$ = ref[sb_1].numWavs_8be2vx$ + delta & 15;
        }
      }
    }
     else if (mode === 3) {
      tmp$_2 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_2 = 0; sb_2 < tmp$_2; sb_2++) {
        if (bandHasTones[sb_2]) {
          dst[sb_2].numWavs_8be2vx$ = ref[sb_2].numWavs_8be2vx$;
        }
      }
    }
    tmp$_3 = this.ctx.wavesInfo.numToneBands_8be2vx$;
    for (var sb_3 = 0; sb_3 < tmp$_3; sb_3++) {
      if (bandHasTones[sb_3]) {
        if ((this.ctx.wavesInfo.tonesIndex_8be2vx$ + dst[sb_3].numWavs_8be2vx$ | 0) > 48) {
          ChannelUnit$Companion_getInstance().log_0.error_61zpoe$(format('Too many tones: %d (max. 48)', [this.ctx.wavesInfo.tonesIndex_8be2vx$ + dst[sb_3].numWavs_8be2vx$ | 0]));
          return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
        }
        dst[sb_3].startIndex_8be2vx$ = this.ctx.wavesInfo.tonesIndex_8be2vx$;
        tmp$_4 = this.ctx.wavesInfo;
        tmp$_4.tonesIndex_8be2vx$ = tmp$_4.tonesIndex_8be2vx$ + dst[sb_3].numWavs_8be2vx$ | 0;
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeTonesFrequency_0 = function (chNum, bandHasTones) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var dst = this.ctx.channels[chNum].tonesInfo_8be2vx$;
    var ref = this.ctx.channels[0].tonesInfo_8be2vx$;
    if (chNum === 0 || !this.br_0.readBool()) {
      tmp$ = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb = 0; sb < tmp$; sb++) {
        if (!bandHasTones[sb] || dst[sb].numWavs_8be2vx$ === 0) {
          continue;
        }
        var iwav = dst[sb].startIndex_8be2vx$;
        var direction = dst[sb].numWavs_8be2vx$ > 1 ? this.br_0.readBool() : false;
        if (direction) {
          if (dst[sb].numWavs_8be2vx$ > 0) {
            ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + dst[sb].numWavs_8be2vx$ - 1 | 0]).freqIndex_8be2vx$ = this.br_0.read_za3lpa$(10);
          }
          for (var i = dst[sb].numWavs_8be2vx$ - 2 | 0; i >= 0; i--) {
            var nbits = CodecUtils_getInstance().avLog2_za3lpa$(ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i + 1 | 0]).freqIndex_8be2vx$) + 1 | 0;
            ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i | 0]).freqIndex_8be2vx$ = this.br_0.read_za3lpa$(nbits);
          }
        }
         else {
          tmp$_0 = dst[sb].numWavs_8be2vx$;
          for (var i_0 = 0; i_0 < tmp$_0; i_0++) {
            if (i_0 === 0 || ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i_0 - 1 | 0]).freqIndex_8be2vx$ < 512) {
              ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i_0 | 0]).freqIndex_8be2vx$ = this.br_0.read_za3lpa$(10);
            }
             else {
              var nbits_0 = CodecUtils_getInstance().avLog2_za3lpa$(1023 - ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i_0 - 1 | 0]).freqIndex_8be2vx$ | 0) + 1 | 0;
              ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav + i_0 | 0]).freqIndex_8be2vx$ = this.br_0.read_za3lpa$(nbits_0) + 1024 - (1 << nbits_0) | 0;
            }
          }
        }
      }
    }
     else {
      tmp$_1 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_0 = 0; sb_0 < tmp$_1; sb_0++) {
        if (!bandHasTones[sb_0] || dst[sb_0].numWavs_8be2vx$ === 0) {
          continue;
        }
        var iwav_0 = ref[sb_0].startIndex_8be2vx$;
        var owav = dst[sb_0].startIndex_8be2vx$;
        tmp$_2 = dst[sb_0].numWavs_8be2vx$;
        for (var i_1 = 0; i_1 < tmp$_2; i_1++) {
          var delta = ensureNotNull(ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[6]).getVLC2_poz3xs$(this.br_0);
          delta = signExtend(delta, 8);
          var pred = i_1 < ref[sb_0].numWavs_8be2vx$ ? ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav_0 + i_1 | 0]).freqIndex_8be2vx$ : ref[sb_0].numWavs_8be2vx$ > 0 ? ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[iwav_0 + ref[sb_0].numWavs_8be2vx$ - 1 | 0]).freqIndex_8be2vx$ : 0;
          ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[owav + i_1 | 0]).freqIndex_8be2vx$ = pred + delta & 1023;
        }
      }
    }
  };
  ChannelUnit.prototype.decodeTonesAmplitude_0 = function (chNum, bandHasTones) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
    var dst = this.ctx.channels[chNum].tonesInfo_8be2vx$;
    var ref = this.ctx.channels[0].tonesInfo_8be2vx$;
    var refwaves = new Int32Array(48);
    if (chNum > 0) {
      tmp$ = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb = 0; sb < tmp$; sb++) {
        if (!bandHasTones[sb] || dst[sb].numWavs_8be2vx$ === 0) {
          continue;
        }
        var wsrc = dst[sb].startIndex_8be2vx$;
        var wref = ref[sb].startIndex_8be2vx$;
        tmp$_0 = dst[sb].numWavs_8be2vx$;
        for (var j = 0; j < tmp$_0; j++) {
          var fi = 0;
          var maxdiff = 1024;
          tmp$_1 = ref[sb].numWavs_8be2vx$;
          for (var i = 0; i < tmp$_1; i++) {
            var diff = abs(ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[wsrc + j | 0]).freqIndex_8be2vx$ - ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[wref + i | 0]).freqIndex_8be2vx$ | 0);
            if (diff < maxdiff) {
              maxdiff = diff;
              fi = i;
            }
          }
          if (maxdiff < 8) {
            refwaves[dst[sb].startIndex_8be2vx$ + j | 0] = fi + ref[sb].startIndex_8be2vx$ | 0;
          }
           else if (j < ref[sb].numWavs_8be2vx$) {
            refwaves[dst[sb].startIndex_8be2vx$ + j | 0] = j + ref[sb].startIndex_8be2vx$ | 0;
          }
           else {
            refwaves[dst[sb].startIndex_8be2vx$ + j | 0] = -1;
          }
        }
      }
    }
    var mode = this.br_0.read_za3lpa$(chNum + 1 | 0);
    if (mode === 0) {
      tmp$_2 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_0 = 0; sb_0 < tmp$_2; sb_0++) {
        if (!bandHasTones[sb_0] || dst[sb_0].numWavs_8be2vx$ === 0) {
          continue;
        }
        if (this.ctx.wavesInfo.amplitudeMode_8be2vx$ !== 0) {
          tmp$_3 = dst[sb_0].numWavs_8be2vx$;
          for (var i_0 = 0; i_0 < tmp$_3; i_0++) {
            ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_0].startIndex_8be2vx$ + i_0 | 0]).ampSf_8be2vx$ = this.br_0.read_za3lpa$(6);
          }
        }
         else {
          ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_0].startIndex_8be2vx$]).ampSf_8be2vx$ = this.br_0.read_za3lpa$(6);
        }
      }
    }
     else if (mode === 1) {
      tmp$_4 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_1 = 0; sb_1 < tmp$_4; sb_1++) {
        if (!bandHasTones[sb_1] || dst[sb_1].numWavs_8be2vx$ === 0) {
          continue;
        }
        if (this.ctx.wavesInfo.amplitudeMode_8be2vx$ !== 0) {
          tmp$_5 = dst[sb_1].numWavs_8be2vx$;
          for (var i_1 = 0; i_1 < tmp$_5; i_1++) {
            ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_1].startIndex_8be2vx$ + i_1 | 0]).ampSf_8be2vx$ = ensureNotNull(ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[3]).getVLC2_poz3xs$(this.br_0) + 20 | 0;
          }
        }
         else {
          ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_1].startIndex_8be2vx$]).ampSf_8be2vx$ = ensureNotNull(ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[4]).getVLC2_poz3xs$(this.br_0) + 24 | 0;
        }
      }
    }
     else if (mode === 2) {
      tmp$_6 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_2 = 0; sb_2 < tmp$_6; sb_2++) {
        if (!bandHasTones[sb_2] || dst[sb_2].numWavs_8be2vx$ === 0) {
          continue;
        }
        tmp$_7 = dst[sb_2].numWavs_8be2vx$;
        for (var i_2 = 0; i_2 < tmp$_7; i_2++) {
          var delta = ensureNotNull(ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[5]).getVLC2_poz3xs$(this.br_0);
          delta = signExtend(delta, 5);
          var pred = refwaves[dst[sb_2].startIndex_8be2vx$ + i_2 | 0] >= 0 ? ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[refwaves[dst[sb_2].startIndex_8be2vx$ + i_2 | 0]]).ampSf_8be2vx$ : 34;
          ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_2].startIndex_8be2vx$ + i_2 | 0]).ampSf_8be2vx$ = pred + delta & 63;
        }
      }
    }
     else if (mode === 3) {
      tmp$_8 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var sb_3 = 0; sb_3 < tmp$_8; sb_3++) {
        if (!bandHasTones[sb_3]) {
          continue;
        }
        tmp$_9 = dst[sb_3].numWavs_8be2vx$;
        for (var i_3 = 0; i_3 < tmp$_9; i_3++) {
          ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[dst[sb_3].startIndex_8be2vx$ + i_3 | 0]).ampSf_8be2vx$ = refwaves[dst[sb_3].startIndex_8be2vx$ + i_3 | 0] >= 0 ? ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[refwaves[dst[sb_3].startIndex_8be2vx$ + i_3 | 0]]).ampSf_8be2vx$ : 32;
        }
      }
    }
  };
  ChannelUnit.prototype.decodeTonesPhase_0 = function (chNum, bandHasTones) {
    var tmp$, tmp$_0;
    var dst = this.ctx.channels[chNum].tonesInfo_8be2vx$;
    tmp$ = this.ctx.wavesInfo.numToneBands_8be2vx$;
    for (var sb = 0; sb < tmp$; sb++) {
      if (!bandHasTones[sb]) {
        continue;
      }
      var wparam = dst[sb].startIndex_8be2vx$;
      tmp$_0 = dst[sb].numWavs_8be2vx$;
      for (var i = 0; i < tmp$_0; i++) {
        ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[wparam + i | 0]).phaseIndex_8be2vx$ = this.br_0.read_za3lpa$(5);
      }
    }
  };
  ChannelUnit.prototype.decodeTonesInfo_0 = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    tmp$ = this.numChannels_0;
    for (var chNum = 0; chNum < tmp$; chNum++) {
      tmp$_0 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS;
      for (var i = 0; i < tmp$_0; i++) {
        this.ctx.channels[chNum].tonesInfo_8be2vx$[i].clear();
      }
    }
    this.ctx.wavesInfo.tonesPresent_8be2vx$ = this.br_0.readBool();
    if (!this.ctx.wavesInfo.tonesPresent_8be2vx$) {
      return 0;
    }
    tmp$_1 = get_indices(this.ctx.wavesInfo.waves_8be2vx$);
    tmp$_2 = tmp$_1.first;
    tmp$_3 = tmp$_1.last;
    tmp$_4 = tmp$_1.step;
    for (var i_0 = tmp$_2; i_0 <= tmp$_3; i_0 += tmp$_4) {
      ensureNotNull(this.ctx.wavesInfo.waves_8be2vx$[i_0]).clear();
    }
    this.ctx.wavesInfo.amplitudeMode_8be2vx$ = this.br_0.read1();
    if (this.ctx.wavesInfo.amplitudeMode_8be2vx$ === 0) {
      ChannelUnit$Companion_getInstance().log_0.error_61zpoe$('GHA amplitude mode 0');
      return Atrac3plusDecoder$Companion_getInstance().AT3P_ERROR;
    }
    this.ctx.wavesInfo.numToneBands_8be2vx$ = ChannelUnit$Companion_getInstance().tone_vlc_tabs_0[0].getVLC2_poz3xs$(this.br_0) + 1 | 0;
    if (this.numChannels_0 === 2) {
      this.getSubbandFlags_0(this.ctx.wavesInfo.toneSharing_8be2vx$, this.ctx.wavesInfo.numToneBands_8be2vx$);
      this.getSubbandFlags_0(this.ctx.wavesInfo.toneMaster_8be2vx$, this.ctx.wavesInfo.numToneBands_8be2vx$);
      if (this.getSubbandFlags_0(this.ctx.wavesInfo.phaseShift_8be2vx$, this.ctx.wavesInfo.numToneBands_8be2vx$)) {
        ChannelUnit$Companion_getInstance().log_0.warn_61zpoe$('GHA Phase shifting');
      }
    }
    this.ctx.wavesInfo.tonesIndex_8be2vx$ = 0;
    tmp$_5 = this.numChannels_0;
    for (var chNum_0 = 0; chNum_0 < tmp$_5; chNum_0++) {
      var bandHasTones = Kotlin.booleanArray(16);
      tmp$_6 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var i_1 = 0; i_1 < tmp$_6; i_1++) {
        bandHasTones[i_1] = chNum_0 === 0 ? true : !this.ctx.wavesInfo.toneSharing_8be2vx$[i_1];
      }
      this.decodeTonesEnvelope_0(chNum_0, bandHasTones);
      var ret = this.decodeBandNumwavs_0(chNum_0, bandHasTones);
      if (ret < 0) {
        return ret;
      }
      this.decodeTonesFrequency_0(chNum_0, bandHasTones);
      this.decodeTonesAmplitude_0(chNum_0, bandHasTones);
      this.decodeTonesPhase_0(chNum_0, bandHasTones);
    }
    if (this.numChannels_0 === 2) {
      tmp$_7 = this.ctx.wavesInfo.numToneBands_8be2vx$;
      for (var i_2 = 0; i_2 < tmp$_7; i_2++) {
        if (this.ctx.wavesInfo.toneSharing_8be2vx$[i_2]) {
          this.ctx.channels[1].tonesInfo_8be2vx$[i_2].copy_v02ikp$(this.ctx.channels[0].tonesInfo_8be2vx$[i_2]);
        }
        if (this.ctx.wavesInfo.toneMaster_8be2vx$[i_2]) {
          var tmp = new WavesData();
          tmp.copy_v02ikp$(this.ctx.channels[0].tonesInfo_8be2vx$[i_2]);
          this.ctx.channels[0].tonesInfo_8be2vx$[i_2].copy_v02ikp$(this.ctx.channels[1].tonesInfo_8be2vx$[i_2]);
          this.ctx.channels[1].tonesInfo_8be2vx$[i_2].copy_v02ikp$(tmp);
        }
      }
    }
    return 0;
  };
  ChannelUnit.prototype.decodeResidualSpectrum_skr1d0$ = function (out) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var sbRNGindex = new Int32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    if (this.ctx.muteFlag) {
      tmp$ = this.numChannels_0;
      for (var ch = 0; ch < tmp$; ch++) {
        var $receiver = out[ch];
        var end;
        end = $receiver.length;
        $receiver.fill(0.0, 0, end);
      }
      return;
    }
    var RNGindex = {v: 0};
    tmp$_0 = this.ctx.usedQuantUnits;
    for (var qu = 0; qu < tmp$_0; qu++) {
      RNGindex.v = RNGindex.v + (this.ctx.channels[0].quSfIdx[qu] + this.ctx.channels[1].quSfIdx[qu]) | 0;
    }
    var sb = 0;
    while (sb < this.ctx.numCodedSubbands) {
      sbRNGindex[sb] = RNGindex.v & 1020;
      sb = sb + 1 | 0;
      RNGindex.v = RNGindex.v + 128 | 0;
    }
    tmp$_1 = this.numChannels_0;
    for (var ch_0 = 0; ch_0 < tmp$_1; ch_0++) {
      var $receiver_0 = out[ch_0];
      var end_0 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES;
      $receiver_0.fill(0.0, 0, end_0);
      tmp$_2 = this.ctx.usedQuantUnits;
      for (var qu_0 = 0; qu_0 < tmp$_2; qu_0++) {
        var src = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu_0];
        var dst = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu_0];
        var nspeclines = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu_0 + 1 | 0] - Atrac3plusDsp$Companion_getInstance().ff_atrac3p_qu_to_spec_pos[qu_0] | 0;
        if (this.ctx.channels[ch_0].quWordlen[qu_0] > 0) {
          var q = Atrac3plusDsp$Companion_getInstance().ff_atrac3p_sf_tab[this.ctx.channels[ch_0].quSfIdx[qu_0]] * Atrac3plusDsp$Companion_getInstance().ff_atrac3p_mant_tab[this.ctx.channels[ch_0].quWordlen[qu_0]];
          for (var i = 0; i < nspeclines; i++) {
            out[ch_0][dst + i | 0] = this.ctx.channels[ch_0].spectrum[src + i | 0] * q;
          }
        }
      }
      tmp$_3 = this.ctx.numCodedSubbands;
      for (var sb_0 = 0; sb_0 < tmp$_3; sb_0++) {
        ensureNotNull(this.dsp_0).powerCompensation_3elc8n$(this.ctx, ch_0, out[ch_0], sbRNGindex[sb_0], sb_0);
      }
    }
    if (this.ctx.unitType === Atrac3plusDecoder$Companion_getInstance().CH_UNIT_STEREO) {
      var tmp = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
      tmp$_4 = this.ctx.numCodedSubbands;
      for (var sb_1 = 0; sb_1 < tmp$_4; sb_1++) {
        if (this.ctx.swapChannels[sb_1]) {
          arraycopy(out[0], Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), tmp, 0, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
          arraycopy(out[1], Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), out[0], Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
          arraycopy(tmp, 0, out[1], Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
        }
        if (this.ctx.negateCoeffs[sb_1]) {
          tmp$_5 = Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES;
          for (var i_0 = 0; i_0 < tmp$_5; i_0++) {
            out[1][Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES) + i_0 | 0] = -out[1][Kotlin.imul(sb_1, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES) + i_0 | 0];
          }
        }
      }
    }
  };
  ChannelUnit.prototype.reconstructFrame_ejwxa6$ = function (at3pContext) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = this.numChannels_0;
    for (var ch = 0; ch < tmp$; ch++) {
      tmp$_0 = this.ctx.numSubbands;
      for (var sb = 0; sb < tmp$_0; sb++) {
        ensureNotNull(this.dsp_0).imdct_5fy4gt$(ensureNotNull(at3pContext.mdctCtx), at3pContext.samples[ch], Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), at3pContext.mdctBuf[ch], Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), (this.ctx.channels[ch].wndShapePrev[sb] ? 2 : 0) + (this.ctx.channels[ch].wndShape[sb] ? 1 : 0) | 0, sb);
        ensureNotNull(at3pContext.gaincCtx).gainCompensation_l9uvma$(at3pContext.mdctBuf[ch], Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), this.ctx.prevBuf[ch], Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES), this.ctx.channels[ch].gainDataPrev_8be2vx$[sb], this.ctx.channels[ch].gainData_8be2vx$[sb], Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES, at3pContext.timeBuf[ch], Kotlin.imul(sb, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES));
      }
      var $receiver = this.ctx.prevBuf[ch];
      var start = Kotlin.imul(this.ctx.numSubbands, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
      var end = this.ctx.prevBuf[ch].length;
      $receiver.fill(0.0, start, end);
      var $receiver_0 = at3pContext.timeBuf[ch];
      var start_0 = Kotlin.imul(this.ctx.numSubbands, Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES);
      var end_0 = at3pContext.timeBuf[ch].length;
      $receiver_0.fill(0.0, start_0, end_0);
      if (this.ctx.wavesInfo.tonesPresent_8be2vx$ || this.ctx.wavesInfoPrev.tonesPresent_8be2vx$) {
        tmp$_1 = this.ctx.numSubbands;
        for (var sb_0 = 0; sb_0 < tmp$_1; sb_0++) {
          if (this.ctx.channels[ch].tonesInfo_8be2vx$[sb_0].numWavs_8be2vx$ > 0 || this.ctx.channels[ch].tonesInfoPrev_8be2vx$[sb_0].numWavs_8be2vx$ > 0) {
            ensureNotNull(this.dsp_0).generateTones_opvepx$(this.ctx, ch, sb_0, at3pContext.timeBuf[ch], sb_0 * 128 | 0);
          }
        }
      }
      ensureNotNull(this.dsp_0).ipqf_kkeiss$(ensureNotNull(at3pContext.ipqfDctCtx), this.ctx.ipqfCtx[ch], at3pContext.timeBuf[ch], at3pContext.outpBuf[ch]);
    }
    tmp$_2 = this.numChannels_0;
    for (var ch_0 = 0; ch_0 < tmp$_2; ch_0++) {
      var tmp1 = this.ctx.channels[ch_0].wndShape;
      this.ctx.channels[ch_0].wndShape = this.ctx.channels[ch_0].wndShapePrev;
      this.ctx.channels[ch_0].wndShapePrev = tmp1;
      var tmp2 = this.ctx.channels[ch_0].gainData_8be2vx$;
      this.ctx.channels[ch_0].gainData_8be2vx$ = this.ctx.channels[ch_0].gainDataPrev_8be2vx$;
      this.ctx.channels[ch_0].gainDataPrev_8be2vx$ = tmp2;
      var tmp3 = this.ctx.channels[ch_0].tonesInfo_8be2vx$;
      this.ctx.channels[ch_0].tonesInfo_8be2vx$ = this.ctx.channels[ch_0].tonesInfoPrev_8be2vx$;
      this.ctx.channels[ch_0].tonesInfoPrev_8be2vx$ = tmp3;
    }
    var tmp = this.ctx.wavesInfo;
    this.ctx.wavesInfo = this.ctx.wavesInfoPrev;
    this.ctx.wavesInfoPrev = tmp;
  };
  function ChannelUnit$Companion() {
    ChannelUnit$Companion_instance = this;
    this.log_0 = Atrac3plusDecoder$Companion_getInstance().log;
    this.gain_cbs_0 = [Atrac3plusData2_getInstance().atrac3p_huff_gain_npoints1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_npoints1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev2_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev3_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev4_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc3_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc4_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc2_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc5_cb_8be2vx$];
    this.gain_xlats_0 = [null, Atrac3plusData2_getInstance().atrac3p_huff_gain_npoints2_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev1_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev2_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev3_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_lev4_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc3_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc1_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc4_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc2_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_gain_loc5_xlat_8be2vx$];
    var array = Array_0(11);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var vlc = new VLC();
      this.buildCanonicalHuff_0(this.gain_cbs_0[i], this.gain_xlats_0[i], vlc);
      array[i] = vlc;
    }
    this.gain_vlc_tabs_0 = array;
    this.tone_cbs_0 = [Atrac3plusData2_getInstance().atrac3p_huff_tonebands_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_numwavs1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_numwavs2_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf1_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf2_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf3_cb_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_freq_cb_8be2vx$];
    this.tone_xlats_0 = [null, null, Atrac3plusData2_getInstance().atrac3p_huff_numwavs2_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf1_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf2_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_wav_ampsf3_xlat_8be2vx$, Atrac3plusData2_getInstance().atrac3p_huff_freq_xlat_8be2vx$];
    var array_0 = Array_0(7);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var vlc_0 = new VLC();
      this.buildCanonicalHuff_0(this.tone_cbs_0[i_0], this.tone_xlats_0[i_0], vlc_0);
      array_0[i_0] = vlc_0;
    }
    this.tone_vlc_tabs_0 = array_0;
    this.wl_nb_bits_0 = new Int32Array([2, 3, 5, 5]);
    this.wl_nb_codes_0 = new Int32Array([3, 5, 8, 8]);
    this.wl_bits_0 = [Atrac3plusData2_getInstance().atrac3p_wl_huff_bits1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_bits2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_bits3_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_bits4_8be2vx$];
    this.wl_codes_0 = [Atrac3plusData2_getInstance().atrac3p_wl_huff_code1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_code2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_code3_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_code4_8be2vx$];
    this.wl_xlats_0 = [Atrac3plusData2_getInstance().atrac3p_wl_huff_xlat1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_wl_huff_xlat2_8be2vx$, null, null];
    this.ct_nb_bits_0 = new Int32Array([3, 4, 4, 4]);
    this.ct_nb_codes_0 = new Int32Array([4, 8, 8, 8]);
    this.ct_bits_0 = [Atrac3plusData2_getInstance().atrac3p_ct_huff_bits1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_bits2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_bits2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_bits3_8be2vx$];
    this.ct_codes_0 = [Atrac3plusData2_getInstance().atrac3p_ct_huff_code1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_code2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_code2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_ct_huff_code3_8be2vx$];
    this.ct_xlats_0 = [null, null, Atrac3plusData2_getInstance().atrac3p_ct_huff_xlat1_8be2vx$, null];
    this.sf_nb_bits_0 = new Int32Array([9, 9, 9, 9, 6, 6, 7, 7]);
    this.sf_nb_codes_0 = new Int32Array([64, 64, 64, 64, 16, 16, 16, 16]);
    this.sf_bits_0 = [Atrac3plusData2_getInstance().atrac3p_sf_huff_bits1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits3_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits4_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits4_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits5_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_bits6_8be2vx$];
    this.sf_codes_0 = [Atrac3plusData2_getInstance().atrac3p_sf_huff_code1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code2_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code3_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code4_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code4_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code5_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_code6_8be2vx$];
    this.sf_xlats_0 = [Atrac3plusData2_getInstance().atrac3p_sf_huff_xlat1_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_xlat2_8be2vx$, null, null, Atrac3plusData2_getInstance().atrac3p_sf_huff_xlat4_8be2vx$, Atrac3plusData2_getInstance().atrac3p_sf_huff_xlat5_8be2vx$, null, null];
    var array_1 = Array_0(4);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      var $receiver = new VLC();
      $receiver.initVLCSparse_g46b0u$(this.wl_nb_bits_0[i_1], this.wl_nb_codes_0[i_1], this.wl_bits_0[i_1], this.wl_codes_0[i_1], this.wl_xlats_0[i_1]);
      array_1[i_1] = $receiver;
    }
    this.wl_vlc_tabs_0 = array_1;
    var array_2 = Array_0(8);
    var tmp$_2;
    tmp$_2 = array_2.length - 1 | 0;
    for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
      var $receiver_0 = new VLC();
      $receiver_0.initVLCSparse_g46b0u$(this.sf_nb_bits_0[i_2], this.sf_nb_codes_0[i_2], this.sf_bits_0[i_2], this.sf_codes_0[i_2], this.sf_xlats_0[i_2]);
      array_2[i_2] = $receiver_0;
    }
    this.sf_vlc_tabs_0 = array_2;
    var array_3 = Array_0(4);
    var tmp$_3;
    tmp$_3 = array_3.length - 1 | 0;
    for (var i_3 = 0; i_3 <= tmp$_3; i_3++) {
      var $receiver_1 = new VLC();
      $receiver_1.initVLCSparse_g46b0u$(this.ct_nb_bits_0[i_3], this.ct_nb_codes_0[i_3], this.ct_bits_0[i_3], this.ct_codes_0[i_3], this.ct_xlats_0[i_3]);
      array_3[i_3] = $receiver_1;
    }
    this.ct_vlc_tabs_0 = array_3;
    var array_4 = Array_0(112);
    var tmp$_4;
    tmp$_4 = array_4.length - 1 | 0;
    for (var i_4 = 0; i_4 <= tmp$_4; i_4++) {
      var init$result;
      var atrac3pSpecCodeTab = Atrac3plusData1_getInstance().atrac3p_spectra_tabs_8be2vx$[i_4];
      if (atrac3pSpecCodeTab.cb != null) {
        var vlc_1 = new VLC();
        this.buildCanonicalHuff_0(ensureNotNull(atrac3pSpecCodeTab.cb), atrac3pSpecCodeTab.xlat, vlc_1);
        init$result = vlc_1;
      }
       else {
        init$result = null;
      }
      array_4[i_4] = init$result;
    }
    this.spec_vlc_tabs_0 = array_4;
  }
  ChannelUnit$Companion.prototype.buildCanonicalHuff_0 = function (cb, xlat, vlc) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var codes = new Int32Array(256);
    var bits = new Int32Array(256);
    var cbIndex = 0;
    var index = 0;
    var code = 0;
    var minLen = cb[tmp$ = cbIndex, cbIndex = tmp$ + 1 | 0, tmp$];
    var maxLen = cb[tmp$_0 = cbIndex, cbIndex = tmp$_0 + 1 | 0, tmp$_0];
    for (var b = minLen; b <= maxLen; b++) {
      for (var i = cb[tmp$_1 = cbIndex, cbIndex = tmp$_1 + 1 | 0, tmp$_1]; i >= 1; i--) {
        bits[index] = b;
        codes[index] = (tmp$_2 = code, code = tmp$_2 + 1 | 0, tmp$_2);
        index = index + 1 | 0;
      }
      code = code << 1;
    }
    return vlc.initVLCSparse_g46b0u$(maxLen, index, bits, codes, xlat);
  };
  ChannelUnit$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ChannelUnit$Companion_instance = null;
  function ChannelUnit$Companion_getInstance() {
    if (ChannelUnit$Companion_instance === null) {
      new ChannelUnit$Companion();
    }
    return ChannelUnit$Companion_instance;
  }
  ChannelUnit.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChannelUnit',
    interfaces: []
  };
  function ChannelUnitContext() {
    this.unitType = 0;
    this.numQuantUnits = 0;
    this.numSubbands = 0;
    this.usedQuantUnits = 0;
    this.numCodedSubbands = 0;
    this.muteFlag = false;
    this.useFullTable = false;
    this.noisePresent = false;
    this.noiseLevelIndex = 0;
    this.noiseTableIndex = 0;
    this.swapChannels = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    this.negateCoeffs = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    this.channels = [new Channel(0), new Channel(1)];
    this.waveSynthHist = [new WaveSynthParams(), new WaveSynthParams()];
    this.wavesInfo = this.waveSynthHist[0];
    this.wavesInfoPrev = this.waveSynthHist[1];
    this.ipqfCtx = [new ChannelUnitContext$IPQFChannelContext(), new ChannelUnitContext$IPQFChannelContext()];
    var array = Array_0(2);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES);
    }
    this.prevBuf = array;
  }
  function ChannelUnitContext$IPQFChannelContext() {
    var array = Array_0(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_PQF_FIR_LEN * 2 | 0);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Float32Array(8);
    }
    this.buf1 = array;
    var array_0 = Array_0(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_PQF_FIR_LEN * 2 | 0);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new Float32Array(8);
    }
    this.buf2 = array_0;
    this.pos = 0;
  }
  ChannelUnitContext$IPQFChannelContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IPQFChannelContext',
    interfaces: []
  };
  ChannelUnitContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChannelUnitContext',
    interfaces: []
  };
  function Context() {
    this.br = null;
    this.dsp = null;
    this.channelUnits = Kotlin.newArray(16, null);
    this.numChannelBlocks = 2;
    this.outputChannels = 0;
    this.gaincCtx = null;
    this.mdctCtx = null;
    this.ipqfDctCtx = null;
    var array = Array_0(2);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES);
    }
    this.samples = array;
    var array_0 = Array_0(2);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES + Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBAND_SAMPLES | 0);
    }
    this.mdctBuf = array_0;
    var array_1 = Array_0(2);
    var tmp$_1;
    tmp$_1 = array_1.length - 1 | 0;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      array_1[i_1] = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES);
    }
    this.timeBuf = array_1;
    var array_2 = Array_0(2);
    var tmp$_2;
    tmp$_2 = array_2.length - 1 | 0;
    for (var i_2 = 0; i_2 <= tmp$_2; i_2++) {
      array_2[i_2] = new Float32Array(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_FRAME_SAMPLES);
    }
    this.outpBuf = array_2;
  }
  Context.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Context',
    interfaces: []
  };
  function WaveEnvelope() {
    this.hasStartPoint_8be2vx$ = false;
    this.hasStopPoint_8be2vx$ = false;
    this.startPos_8be2vx$ = 0;
    this.stopPos_8be2vx$ = 0;
  }
  WaveEnvelope.prototype.clear = function () {
    this.hasStartPoint_8be2vx$ = false;
    this.hasStopPoint_8be2vx$ = false;
    this.startPos_8be2vx$ = 0;
    this.stopPos_8be2vx$ = 0;
  };
  WaveEnvelope.prototype.copy_ocikne$ = function (from) {
    this.hasStartPoint_8be2vx$ = from.hasStartPoint_8be2vx$;
    this.hasStopPoint_8be2vx$ = from.hasStopPoint_8be2vx$;
    this.startPos_8be2vx$ = from.startPos_8be2vx$;
    this.stopPos_8be2vx$ = from.stopPos_8be2vx$;
  };
  WaveEnvelope.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WaveEnvelope',
    interfaces: []
  };
  function WaveParam() {
    this.freqIndex_8be2vx$ = 0;
    this.ampSf_8be2vx$ = 0;
    this.ampIndex_8be2vx$ = 0;
    this.phaseIndex_8be2vx$ = 0;
  }
  WaveParam.prototype.clear = function () {
    this.freqIndex_8be2vx$ = 0;
    this.ampSf_8be2vx$ = 0;
    this.ampIndex_8be2vx$ = 0;
    this.phaseIndex_8be2vx$ = 0;
  };
  WaveParam.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WaveParam',
    interfaces: []
  };
  function WaveSynthParams() {
    this.tonesPresent_8be2vx$ = false;
    this.amplitudeMode_8be2vx$ = 0;
    this.numToneBands_8be2vx$ = 0;
    this.toneSharing_8be2vx$ = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    this.toneMaster_8be2vx$ = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    this.phaseShift_8be2vx$ = Kotlin.booleanArray(Atrac3plusDecoder$Companion_getInstance().ATRAC3P_SUBBANDS);
    this.tonesIndex_8be2vx$ = 0;
    this.waves_8be2vx$ = Kotlin.newArray(48, null);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$ = get_indices(this.waves_8be2vx$);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var i = tmp$_0; i <= tmp$_1; i += tmp$_2) {
      this.waves_8be2vx$[i] = new WaveParam();
    }
  }
  WaveSynthParams.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WaveSynthParams',
    interfaces: []
  };
  function WavesData() {
    this.pendEnv_8be2vx$ = null;
    this.currEnv_8be2vx$ = null;
    this.numWavs_8be2vx$ = 0;
    this.startIndex_8be2vx$ = 0;
    this.pendEnv_8be2vx$ = new WaveEnvelope();
    this.currEnv_8be2vx$ = new WaveEnvelope();
  }
  WavesData.prototype.clear = function () {
    this.pendEnv_8be2vx$.clear();
    this.currEnv_8be2vx$.clear();
    this.numWavs_8be2vx$ = 0;
    this.startIndex_8be2vx$ = 0;
  };
  WavesData.prototype.copy_v02ikp$ = function (from) {
    this.pendEnv_8be2vx$.copy_ocikne$(from.pendEnv_8be2vx$);
    this.currEnv_8be2vx$.copy_ocikne$(from.currEnv_8be2vx$);
    this.numWavs_8be2vx$ = from.numWavs_8be2vx$;
    this.startIndex_8be2vx$ = from.startIndex_8be2vx$;
  };
  WavesData.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WavesData',
    interfaces: []
  };
  function Atrac3PlusUtil() {
    Atrac3PlusUtil_instance = this;
    this.log = Logger.Companion.invoke_61zpoe$('Atrac3PlusUtil');
    this.AT3_MAGIC = 624;
    this.AT3_PLUS_MAGIC = 65534;
    this.RIFF_MAGIC = 1179011410;
    this.WAVE_MAGIC = 1163280727;
    this.FMT_CHUNK_MAGIC = 544501094;
    this.FACT_CHUNK_MAGIC = 1952670054;
    this.SMPL_CHUNK_MAGIC = 1819307379;
    this.DATA_CHUNK_MAGIC = 1635017060;
    this.ATRAC3_CONTEXT_READ_SIZE_OFFSET = 160;
    this.ATRAC3_CONTEXT_REQUIRED_SIZE_OFFSET = 164;
    this.ATRAC3_CONTEXT_DECODE_RESULT_OFFSET = 188;
    this.PSP_ATRAC_ALLDATA_IS_ON_MEMORY = -1;
    this.PSP_ATRAC_NONLOOP_STREAM_DATA_IS_ON_MEMORY = -2;
    this.PSP_ATRAC_LOOP_STREAM_DATA_IS_ON_MEMORY = -3;
    this.PSP_ATRAC_STATUS_NONLOOP_STREAM_DATA = 0;
    this.PSP_ATRAC_STATUS_LOOP_STREAM_DATA = 1;
    this.ATRAC_HEADER_HASH_LENGTH = 512;
    this.ERROR_ATRAC_UNKNOWN_FORMAT = -2140995578;
    this.ERROR_ATRAC_INVALID_SIZE = -2140995567;
    this.PSP_CODEC_AT3PLUS = 4096;
    this.PSP_CODEC_AT3 = 4097;
    this.PSP_CODEC_MP3 = 4098;
    this.PSP_CODEC_AAC = 4099;
  }
  Atrac3PlusUtil.prototype.readUnaligned32_0 = function (mem, addr) {
    mem.position = Kotlin.Long.fromInt(addr);
    return readS32_le(mem);
  };
  Atrac3PlusUtil.prototype.read8_hsu5ns$ = function ($receiver, addr) {
    $receiver.position = Kotlin.Long.fromInt(addr);
    return readU8($receiver);
  };
  Atrac3PlusUtil.prototype.read16_hsu5ns$ = function ($receiver, addr) {
    $receiver.position = Kotlin.Long.fromInt(addr);
    return readU16_le($receiver);
  };
  Atrac3PlusUtil.prototype.analyzeRiffFile_rta5a5$ = function (mem, addr, length, info) {
    var tmp$, tmp$_0, tmp$_1;
    var result = this.ERROR_ATRAC_UNKNOWN_FORMAT;
    var currentAddr = addr;
    var bufferSize = length;
    info.atracEndSample = -1;
    info.numLoops = 0;
    info.inputFileDataOffset = 0;
    if (bufferSize < 12) {
      this.log.error_61zpoe$(format('Atrac buffer too small %d', [bufferSize]));
      return this.ERROR_ATRAC_INVALID_SIZE;
    }
    var magic = this.readUnaligned32_0(mem, currentAddr);
    var WAVEMagic = this.readUnaligned32_0(mem, currentAddr + 8 | 0);
    if (magic !== this.RIFF_MAGIC || WAVEMagic !== this.WAVE_MAGIC) {
      this.log.error_61zpoe$(String_format('Not a RIFF/WAVE format!'));
      return this.ERROR_ATRAC_UNKNOWN_FORMAT;
    }
    info.inputFileSize = this.readUnaligned32_0(mem, currentAddr + 4 | 0) + 8 | 0;
    info.inputDataSize = info.inputFileSize;
    var $this = this.log;
    var level = LogLevel.TRACE;
    if ($this.isEnabled_ci8eq1$(level)) {
      $this.actualLog_t189ph$(level, format('FileSize 0x%X', [info.inputFileSize]));
    }
    currentAddr = currentAddr + 12 | 0;
    bufferSize = bufferSize - 12 | 0;
    var foundData = false;
    while (bufferSize >= 8 && !foundData) {
      var chunkMagic = this.readUnaligned32_0(mem, currentAddr);
      var chunkSize = this.readUnaligned32_0(mem, currentAddr + 4 | 0);
      currentAddr = currentAddr + 8 | 0;
      bufferSize = bufferSize - 8 | 0;
      if (chunkMagic === this.DATA_CHUNK_MAGIC) {
        foundData = true;
        info.inputFileDataOffset = currentAddr - addr | 0;
        info.inputDataSize = chunkSize;
        var $this_0 = this.log;
        var level_0 = LogLevel.TRACE;
        if ($this_0.isEnabled_ci8eq1$(level_0)) {
          $this_0.actualLog_t189ph$(level_0, format('DATA Chunk: data offset=0x%X, data size=0x%X', [info.inputFileDataOffset, info.inputDataSize]));
        }
      }
       else if (chunkMagic === this.FMT_CHUNK_MAGIC) {
        if (chunkSize >= 16) {
          var compressionCode = this.read16_hsu5ns$(mem, currentAddr);
          info.atracChannels = this.read16_hsu5ns$(mem, currentAddr + 2 | 0);
          info.atracSampleRate = this.readUnaligned32_0(mem, currentAddr + 4 | 0);
          info.atracBitrate = this.readUnaligned32_0(mem, currentAddr + 8 | 0);
          info.atracBytesPerFrame = this.read16_hsu5ns$(mem, currentAddr + 12 | 0);
          var hiBytesPerSample = this.read16_hsu5ns$(mem, currentAddr + 14 | 0);
          var extraDataSize = this.read16_hsu5ns$(mem, currentAddr + 16 | 0);
          if (extraDataSize === 14) {
            info.atracCodingMode = this.read16_hsu5ns$(mem, currentAddr + 18 + 6 | 0);
          }
          if (LogLevel.TRACE.index <= this.log.processedLevel.index) {
            var $this_1 = this.log;
            var level_1 = LogLevel.TRACE;
            if ($this_1.isEnabled_ci8eq1$(level_1)) {
              $this_1.actualLog_t189ph$(level_1, format("WAVE format: magic=0x%08X('%s'), chunkSize=%d, compressionCode=0x%04X, channels=%d, sampleRate=%d, bitrate=%d, bytesPerFrame=0x%X, hiBytesPerSample=%d, codingMode=%d", [chunkMagic, this.getStringFromInt32_0(chunkMagic), chunkSize, compressionCode, info.atracChannels, info.atracSampleRate, info.atracBitrate, info.atracBytesPerFrame, hiBytesPerSample, info.atracCodingMode]));
            }
            var restChunk = new StringBuilder();
            for (var i = 16; i < chunkSize; i++) {
              var b = this.read8_hsu5ns$(mem, currentAddr + i | 0);
              restChunk.append_gw00v9$(format(' %02X', [b]));
            }
            if (restChunk.length > 0) {
              var $this_2 = this.log;
              var level_2 = LogLevel.TRACE;
              if ($this_2.isEnabled_ci8eq1$(level_2)) {
                $this_2.actualLog_t189ph$(level_2, format('Additional chunk data:%s', [restChunk]));
              }
            }
          }
          if (compressionCode === this.AT3_MAGIC) {
            result = this.PSP_CODEC_AT3;
          }
           else if (compressionCode === this.AT3_PLUS_MAGIC) {
            result = this.PSP_CODEC_AT3PLUS;
          }
           else {
            return this.ERROR_ATRAC_UNKNOWN_FORMAT;
          }
        }
      }
       else if (chunkMagic === this.FACT_CHUNK_MAGIC) {
        if (chunkSize >= 8) {
          info.atracEndSample = this.readUnaligned32_0(mem, currentAddr);
          if (info.atracEndSample > 0) {
            info.atracEndSample = info.atracEndSample - 1 | 0;
          }
          if (chunkSize >= 12) {
            info.atracSampleOffset = this.readUnaligned32_0(mem, currentAddr + 8 | 0);
          }
           else {
            info.atracSampleOffset = this.readUnaligned32_0(mem, currentAddr + 4 | 0);
          }
          var $this_3 = this.log;
          var level_3 = LogLevel.TRACE;
          if ($this_3.isEnabled_ci8eq1$(level_3)) {
            $this_3.actualLog_t189ph$(level_3, format('FACT Chunk: chunkSize=%d, endSample=0x%X, sampleOffset=0x%X', [chunkSize, info.atracEndSample, info.atracSampleOffset]));
          }
        }
      }
       else if (chunkMagic === this.SMPL_CHUNK_MAGIC)
        if (chunkSize >= 36) {
          var checkNumLoops = this.readUnaligned32_0(mem, currentAddr + 28 | 0);
          if (chunkSize >= (36 + (checkNumLoops * 24 | 0) | 0)) {
            info.numLoops = checkNumLoops;
            var array = Array_0(info.numLoops);
            var tmp$_2;
            tmp$_2 = array.length - 1 | 0;
            for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
              array[i_0] = new Atrac3PlusUtil$LoopInfo();
            }
            info.loops = array;
            var loopInfoAddr = currentAddr + 36 | 0;
            tmp$ = info.numLoops;
            for (var i_1 = 0; i_1 < tmp$; i_1++) {
              var loop = info.loops[i_1];
              info.loops[i_1] = loop;
              loop.cuePointID = this.readUnaligned32_0(mem, loopInfoAddr);
              loop.type = this.readUnaligned32_0(mem, loopInfoAddr + 4 | 0);
              loop.startSample = this.readUnaligned32_0(mem, loopInfoAddr + 8 | 0) - info.atracSampleOffset | 0;
              loop.endSample = this.readUnaligned32_0(mem, loopInfoAddr + 12 | 0) - info.atracSampleOffset | 0;
              loop.fraction = this.readUnaligned32_0(mem, loopInfoAddr + 16 | 0);
              loop.playCount = this.readUnaligned32_0(mem, loopInfoAddr + 20 | 0);
              var $this_4 = this.log;
              var level_4 = LogLevel.TRACE;
              if ($this_4.isEnabled_ci8eq1$(level_4)) {
                $this_4.actualLog_t189ph$(level_4, format('Loop #%d: %s', [i_1, loop.toString()]));
              }
              loopInfoAddr = loopInfoAddr + 24 | 0;
            }
          }
        }
      if (chunkSize > bufferSize) {
        break;
      }
      currentAddr = currentAddr + chunkSize | 0;
      bufferSize = bufferSize - chunkSize | 0;
    }
    tmp$_0 = info.loops;
    for (tmp$_1 = 0; tmp$_1 !== tmp$_0.length; ++tmp$_1) {
      var loop_0 = tmp$_0[tmp$_1];
      if (loop_0.endSample > info.atracEndSample) {
        loop_0.endSample = info.atracEndSample;
      }
    }
    return result;
  };
  Atrac3PlusUtil.prototype.getStringFromInt32_0 = function (chunkMagic) {
    return contentToString(Kotlin.charArrayOf(toChar(extract8(chunkMagic, 0)), toChar(extract8(chunkMagic, 8)), toChar(extract8(chunkMagic, 16)), toChar(extract8(chunkMagic, 24))));
  };
  function Atrac3PlusUtil$LoopInfo() {
    this.cuePointID = 0;
    this.type = 0;
    this.startSample = 0;
    this.endSample = 0;
    this.fraction = 0;
    this.playCount = 0;
  }
  Atrac3PlusUtil$LoopInfo.prototype.toString = function () {
    return format('LoopInfo[cuePointID %d, type %d, startSample 0x%X, endSample 0x%X, fraction %d, playCount %d]', [this.cuePointID, this.type, this.startSample, this.endSample, this.fraction, this.playCount]);
  };
  Atrac3PlusUtil$LoopInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LoopInfo',
    interfaces: []
  };
  function Atrac3PlusUtil$AtracFileInfo(atracBitrate, atracChannels, atracSampleRate, atracBytesPerFrame, atracEndSample, atracSampleOffset, atracCodingMode, inputFileDataOffset, inputFileSize, inputDataSize, loopNum, numLoops, loops) {
    if (atracBitrate === void 0)
      atracBitrate = 64;
    if (atracChannels === void 0)
      atracChannels = 2;
    if (atracSampleRate === void 0)
      atracSampleRate = 44100;
    if (atracBytesPerFrame === void 0)
      atracBytesPerFrame = 560;
    if (atracEndSample === void 0)
      atracEndSample = 0;
    if (atracSampleOffset === void 0)
      atracSampleOffset = 0;
    if (atracCodingMode === void 0)
      atracCodingMode = 0;
    if (inputFileDataOffset === void 0)
      inputFileDataOffset = 0;
    if (inputFileSize === void 0)
      inputFileSize = 0;
    if (inputDataSize === void 0)
      inputDataSize = 0;
    if (loopNum === void 0)
      loopNum = 0;
    if (numLoops === void 0)
      numLoops = 0;
    if (loops === void 0)
      loops = [];
    this.atracBitrate = atracBitrate;
    this.atracChannels = atracChannels;
    this.atracSampleRate = atracSampleRate;
    this.atracBytesPerFrame = atracBytesPerFrame;
    this.atracEndSample = atracEndSample;
    this.atracSampleOffset = atracSampleOffset;
    this.atracCodingMode = atracCodingMode;
    this.inputFileDataOffset = inputFileDataOffset;
    this.inputFileSize = inputFileSize;
    this.inputDataSize = inputDataSize;
    this.loopNum = loopNum;
    this.numLoops = numLoops;
    this.loops = loops;
  }
  Atrac3PlusUtil$AtracFileInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AtracFileInfo',
    interfaces: []
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component1 = function () {
    return this.atracBitrate;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component2 = function () {
    return this.atracChannels;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component3 = function () {
    return this.atracSampleRate;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component4 = function () {
    return this.atracBytesPerFrame;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component5 = function () {
    return this.atracEndSample;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component6 = function () {
    return this.atracSampleOffset;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component7 = function () {
    return this.atracCodingMode;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component8 = function () {
    return this.inputFileDataOffset;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component9 = function () {
    return this.inputFileSize;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component10 = function () {
    return this.inputDataSize;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component11 = function () {
    return this.loopNum;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component12 = function () {
    return this.numLoops;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.component13 = function () {
    return this.loops;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.copy_xxzl3v$ = function (atracBitrate, atracChannels, atracSampleRate, atracBytesPerFrame, atracEndSample, atracSampleOffset, atracCodingMode, inputFileDataOffset, inputFileSize, inputDataSize, loopNum, numLoops, loops) {
    return new Atrac3PlusUtil$AtracFileInfo(atracBitrate === void 0 ? this.atracBitrate : atracBitrate, atracChannels === void 0 ? this.atracChannels : atracChannels, atracSampleRate === void 0 ? this.atracSampleRate : atracSampleRate, atracBytesPerFrame === void 0 ? this.atracBytesPerFrame : atracBytesPerFrame, atracEndSample === void 0 ? this.atracEndSample : atracEndSample, atracSampleOffset === void 0 ? this.atracSampleOffset : atracSampleOffset, atracCodingMode === void 0 ? this.atracCodingMode : atracCodingMode, inputFileDataOffset === void 0 ? this.inputFileDataOffset : inputFileDataOffset, inputFileSize === void 0 ? this.inputFileSize : inputFileSize, inputDataSize === void 0 ? this.inputDataSize : inputDataSize, loopNum === void 0 ? this.loopNum : loopNum, numLoops === void 0 ? this.numLoops : numLoops, loops === void 0 ? this.loops : loops);
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.toString = function () {
    return 'AtracFileInfo(atracBitrate=' + Kotlin.toString(this.atracBitrate) + (', atracChannels=' + Kotlin.toString(this.atracChannels)) + (', atracSampleRate=' + Kotlin.toString(this.atracSampleRate)) + (', atracBytesPerFrame=' + Kotlin.toString(this.atracBytesPerFrame)) + (', atracEndSample=' + Kotlin.toString(this.atracEndSample)) + (', atracSampleOffset=' + Kotlin.toString(this.atracSampleOffset)) + (', atracCodingMode=' + Kotlin.toString(this.atracCodingMode)) + (', inputFileDataOffset=' + Kotlin.toString(this.inputFileDataOffset)) + (', inputFileSize=' + Kotlin.toString(this.inputFileSize)) + (', inputDataSize=' + Kotlin.toString(this.inputDataSize)) + (', loopNum=' + Kotlin.toString(this.loopNum)) + (', numLoops=' + Kotlin.toString(this.numLoops)) + (', loops=' + Kotlin.toString(this.loops)) + ')';
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.atracBitrate) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracChannels) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracSampleRate) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracBytesPerFrame) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracEndSample) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracSampleOffset) | 0;
    result = result * 31 + Kotlin.hashCode(this.atracCodingMode) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputFileDataOffset) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputFileSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputDataSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.loopNum) | 0;
    result = result * 31 + Kotlin.hashCode(this.numLoops) | 0;
    result = result * 31 + Kotlin.hashCode(this.loops) | 0;
    return result;
  };
  Atrac3PlusUtil$AtracFileInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.atracBitrate, other.atracBitrate) && Kotlin.equals(this.atracChannels, other.atracChannels) && Kotlin.equals(this.atracSampleRate, other.atracSampleRate) && Kotlin.equals(this.atracBytesPerFrame, other.atracBytesPerFrame) && Kotlin.equals(this.atracEndSample, other.atracEndSample) && Kotlin.equals(this.atracSampleOffset, other.atracSampleOffset) && Kotlin.equals(this.atracCodingMode, other.atracCodingMode) && Kotlin.equals(this.inputFileDataOffset, other.inputFileDataOffset) && Kotlin.equals(this.inputFileSize, other.inputFileSize) && Kotlin.equals(this.inputDataSize, other.inputDataSize) && Kotlin.equals(this.loopNum, other.loopNum) && Kotlin.equals(this.numLoops, other.numLoops) && Kotlin.equals(this.loops, other.loops)))));
  };
  Atrac3PlusUtil.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Atrac3PlusUtil',
    interfaces: []
  };
  var Atrac3PlusUtil_instance = null;
  function Atrac3PlusUtil_getInstance() {
    if (Atrac3PlusUtil_instance === null) {
      new Atrac3PlusUtil();
    }
    return Atrac3PlusUtil_instance;
  }
  function Arrays() {
    Arrays_instance = this;
  }
  Arrays.prototype.sort_273xr4$ = function (buf, fromIndex, toIndex) {
    var sorted = sortedArray(buf.slice(fromIndex, toIndex));
    arraycopy_1(sorted, 0, buf, fromIndex, toIndex - fromIndex | 0);
  };
  Arrays.prototype.fill_u4kcgn$ = function (array, i) {
    var end;
    end = array.length;
    array.fill(i, 0, end);
  };
  Arrays.prototype.fill_vu8mq7$ = function (array, i) {
    var end;
    end = array.length;
    array.fill(i, 0, end);
  };
  Arrays.prototype.fill_4sycs1$ = function (array, start, end, i) {
    array.fill(i, start, end);
  };
  Arrays.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Arrays',
    interfaces: []
  };
  var Arrays_instance = null;
  function Arrays_getInstance() {
    if (Arrays_instance === null) {
      new Arrays();
    }
    return Arrays_instance;
  }
  function BitBuffer(length) {
    this.bits_0 = new Int32Array(length);
    this.readIndex_0 = 0;
    this.writeIndex_0 = 0;
    this.bitsRead_11uxwm$_0 = 0;
    this.bitsWritten_b0hhq7$_0 = 0;
  }
  Object.defineProperty(BitBuffer.prototype, 'bitsRead', {
    get: function () {
      return this.bitsRead_11uxwm$_0;
    },
    set: function (bitsRead) {
      this.bitsRead_11uxwm$_0 = bitsRead;
    }
  });
  Object.defineProperty(BitBuffer.prototype, 'bitsWritten', {
    get: function () {
      return this.bitsWritten_b0hhq7$_0;
    },
    set: function (bitsWritten) {
      this.bitsWritten_b0hhq7$_0 = bitsWritten;
    }
  });
  Object.defineProperty(BitBuffer.prototype, 'bytesRead', {
    get: function () {
      return this.bitsRead >>> 3;
    }
  });
  Object.defineProperty(BitBuffer.prototype, 'bytesWritten', {
    get: function () {
      return this.bitsWritten >>> 3;
    }
  });
  BitBuffer.prototype.read1 = function () {
    this.bitsRead = this.bitsRead + 1 | 0;
    var bit = this.bits_0[this.readIndex_0];
    this.readIndex_0 = this.readIndex_0 + 1 | 0;
    if (this.readIndex_0 >= this.bits_0.length)
      this.readIndex_0 = 0;
    return bit;
  };
  BitBuffer.prototype.read_za3lpa$ = function (n) {
    var n_0 = n;
    var value = 0;
    while (n_0 > 0) {
      value = (value << 1) + this.read1() | 0;
      n_0 = n_0 - 1 | 0;
    }
    return value;
  };
  BitBuffer.prototype.skip_za3lpa$ = function (n) {
    this.bitsRead = this.bitsRead + n | 0;
    this.readIndex_0 = this.readIndex_0 + n | 0;
    while (this.readIndex_0 < 0)
      this.readIndex_0 = this.readIndex_0 + this.bits_0.length | 0;
    while (this.readIndex_0 >= this.bits_0.length)
      this.readIndex_0 = this.readIndex_0 - this.bits_0.length | 0;
  };
  BitBuffer.prototype.writeBit_0 = function (n) {
    this.bits_0[this.writeIndex_0] = n;
    this.writeIndex_0 = this.writeIndex_0 + 1 | 0;
    this.bitsWritten = this.bitsWritten + 1 | 0;
    if (this.writeIndex_0 >= this.bits_0.length)
      this.writeIndex_0 = 0;
  };
  BitBuffer.prototype.writeByte_za3lpa$ = function (n) {
    for (var bit = 7; bit >= 0; bit--)
      this.writeBit_0(n >> bit & 1);
  };
  BitBuffer.prototype.readBool = function () {
    return this.read1() !== 0;
  };
  BitBuffer.prototype.peek_za3lpa$ = function (n) {
    var read = this.read_za3lpa$(n);
    this.skip_za3lpa$(-n);
    return read;
  };
  BitBuffer.prototype.toString = function () {
    return format('BitBuffer readIndex=%d, writeIndex=%d, readCount=%d', [this.readIndex_0, this.writeIndex_0, this.bitsRead]);
  };
  BitBuffer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitBuffer',
    interfaces: [IBitReader]
  };
  function BitReader(mem, addr, size) {
    this.mem = mem;
    this.addr_0 = addr;
    this.size_0 = size;
    this.initialAddr_0 = this.addr_0;
    this.initialSize_0 = this.size_0;
    this.bits_0 = 0;
    this.value_0 = 0;
    this.direction_0 = 1;
  }
  Object.defineProperty(BitReader.prototype, 'bitsLeft', {
    get: function () {
      return (this.size_0 << 3) + this.bits_0 | 0;
    }
  });
  Object.defineProperty(BitReader.prototype, 'bytesRead', {
    get: function () {
      var bytesRead = this.addr_0 - this.initialAddr_0 | 0;
      if (this.bits_0 === 8) {
        bytesRead = bytesRead - 1 | 0;
      }
      return bytesRead;
    }
  });
  Object.defineProperty(BitReader.prototype, 'bitsRead', {
    get: function () {
      return ((this.addr_0 - this.initialAddr_0 | 0) * 8 | 0) - this.bits_0 | 0;
    }
  });
  BitReader.prototype.readBool = function () {
    return this.read1() !== 0;
  };
  BitReader.prototype.read1 = function () {
    if (this.bits_0 <= 0) {
      this.value_0 = this.mem.read8_za3lpa$(this.addr_0);
      this.addr_0 = this.addr_0 + this.direction_0 | 0;
      this.size_0 = this.size_0 - 1 | 0;
      this.bits_0 = 8;
    }
    var bit = this.value_0 >> 7;
    this.bits_0 = this.bits_0 - 1 | 0;
    this.value_0 = this.value_0 << 1 & 255;
    return bit;
  };
  BitReader.prototype.read_za3lpa$ = function (n) {
    var n_0 = n;
    var read;
    if (n_0 <= this.bits_0) {
      read = this.value_0 >> 8 - n_0;
      this.bits_0 = this.bits_0 - n_0 | 0;
      this.value_0 = this.value_0 << n_0 & 255;
    }
     else {
      read = 0;
      while (n_0 > 0) {
        read = (read << 1) + this.read1() | 0;
        n_0 = n_0 - 1 | 0;
      }
    }
    return read;
  };
  BitReader.prototype.readByte = function () {
    if (this.bits_0 === 8) {
      this.bits_0 = 0;
      return this.value_0;
    }
    if (this.bits_0 > 0) {
      this.skip_za3lpa$(this.bits_0);
    }
    var read = this.mem.read8_za3lpa$(this.addr_0);
    this.addr_0 = this.addr_0 + this.direction_0 | 0;
    this.size_0 = this.size_0 - 1 | 0;
    return read;
  };
  BitReader.prototype.peek_za3lpa$ = function (n) {
    var read = this.read_za3lpa$(n);
    this.skip_za3lpa$(-n);
    return read;
  };
  BitReader.prototype.skip_za3lpa$ = function (n) {
    this.bits_0 = this.bits_0 - n | 0;
    if (n >= 0) {
      while (this.bits_0 < 0) {
        this.addr_0 = this.addr_0 + this.direction_0 | 0;
        this.size_0 = this.size_0 - 1 | 0;
        this.bits_0 = this.bits_0 + 8 | 0;
      }
    }
     else {
      while (this.bits_0 > 8) {
        this.addr_0 = this.addr_0 - this.direction_0 | 0;
        this.size_0 = this.size_0 + 1 | 0;
        this.bits_0 = this.bits_0 - 8 | 0;
      }
    }
    if (this.bits_0 > 0) {
      this.value_0 = this.mem.read8_za3lpa$(this.addr_0 - this.direction_0 | 0);
      this.value_0 = this.value_0 << 8 - this.bits_0 & 255;
    }
  };
  BitReader.prototype.seek_za3lpa$ = function (n) {
    this.addr_0 = this.initialAddr_0 + n | 0;
    this.size_0 = this.initialSize_0 - n | 0;
    this.bits_0 = 0;
  };
  BitReader.prototype.setDirection_za3lpa$ = function (direction) {
    this.direction_0 = direction;
    this.bits_0 = 0;
  };
  BitReader.prototype.byteAlign = function () {
    if (this.bits_0 > 0 && this.bits_0 < 8) {
      this.skip_za3lpa$(this.bits_0);
    }
  };
  BitReader.prototype.toString = function () {
    return format('BitReader addr=0x%08X, bits=%d, size=0x%X, bits read %d', [this.addr_0, this.bits_0, this.size_0, this.bitsRead]);
  };
  BitReader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitReader',
    interfaces: [IBitReader]
  };
  function CodecUtils() {
    CodecUtils_instance = this;
    this.FLT_EPSILON = 1.1920929E-7;
    this.M_SQRT1_2 = 0.70710677;
    this.M_PI = math.PI;
    this.M_SQRT2 = 1.4142135;
    this.ff_log2_tab = new Int32Array([0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]);
    this.log2_0 = Math_0.log(2.0);
  }
  CodecUtils.prototype.convertSampleFloatToInt16_0 = function (sample) {
    var a = numberToInt(sample * 32768.0 + 0.5);
    var a_0 = Math_0.max(a, -32768);
    return Math_0.min(a_0, 32767) & 65535;
  };
  CodecUtils.prototype.writeOutput_mfygvn$ = function (samples, output, numberOfSamples, decodedChannels, outputChannels) {
    if (outputChannels === 1) {
      for (var i = 0; i < numberOfSamples; i++) {
        var sample = this.convertSampleFloatToInt16_0(samples[0][i]);
        write16_le(output, sample);
      }
    }
     else if (outputChannels === 2)
      if (decodedChannels === 1) {
        for (var i_0 = 0; i_0 < numberOfSamples; i_0++) {
          var sample_0 = this.convertSampleFloatToInt16_0(samples[0][i_0]);
          write16_le(output, sample_0);
          write16_le(output, sample_0);
        }
      }
       else {
        for (var i_1 = 0; i_1 < numberOfSamples; i_1++) {
          var lsample = this.convertSampleFloatToInt16_0(samples[0][i_1]);
          var rsample = this.convertSampleFloatToInt16_0(samples[1][i_1]);
          write16_le(output, lsample);
          write16_le(output, rsample);
        }
      }
  };
  CodecUtils.prototype.avLog2_za3lpa$ = function (n) {
    return n === 0 ? 0 : 31 - countLeadingZeros(n) | 0;
  };
  CodecUtils.prototype.log2f_mx4ult$ = function (n) {
    return Math_0.log(n) / this.log2_0;
  };
  CodecUtils.prototype.lrintf_mx4ult$ = function (n) {
    return numberToInt(rint(n));
  };
  CodecUtils.prototype.exp2f_mx4ult$ = function (n) {
    return Math_0.pow(2.0, n);
  };
  CodecUtils.prototype.sqrtf_mx4ult$ = function (n) {
    return Math_0.sqrt(n);
  };
  CodecUtils.prototype.cosf_mx4ult$ = function (n) {
    return Math_0.cos(n);
  };
  CodecUtils.prototype.sinf_mx4ult$ = function (n) {
    return Math_0.sin(n);
  };
  CodecUtils.prototype.atanf_mx4ult$ = function (n) {
    return Math_0.atan(n);
  };
  CodecUtils.prototype.atan2f_dleff0$ = function (y, x) {
    return Math_0.atan2(y, x);
  };
  CodecUtils.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'CodecUtils',
    interfaces: []
  };
  var CodecUtils_instance = null;
  function CodecUtils_getInstance() {
    if (CodecUtils_instance === null) {
      new CodecUtils();
    }
    return CodecUtils_instance;
  }
  function Dct32() {
    Dct32_instance = this;
    this.COS0_0 = 0.5006029982351963 / 2;
    this.COS0_1 = 0.5054709598975436 / 2;
    this.COS0_2 = 0.5154473099226246 / 2;
    this.COS0_3 = 0.5310425910897841 / 2;
    this.COS0_4 = 0.5531038960344445 / 2;
    this.COS0_5 = 0.5829349682061339 / 2;
    this.COS0_6 = 0.6225041230356648 / 2;
    this.COS0_7 = 0.6748083414550058 / 2;
    this.COS0_8 = 0.7445362710022985 / 2;
    this.COS0_9 = 0.839349645415527 / 2;
    this.COS0_10 = 0.9725682378619607 / 2;
    this.COS0_11 = 1.1694399334328849 / 4;
    this.COS0_12 = 1.4841646163141662 / 4;
    this.COS0_13 = 2.0577810099534117 / 8;
    this.COS0_14 = 3.407608418468719 / 8;
    this.COS0_15 = 10.190008123548056 / 32;
    this.COS1_0 = 0.5024192861881557 / 2;
    this.COS1_1 = 0.5224986149396889 / 2;
    this.COS1_2 = 0.5669440348163577 / 2;
    this.COS1_3 = 0.6468217833599901 / 2;
    this.COS1_4 = 0.7881546234512502 / 2;
    this.COS1_5 = 1.0606776859903475 / 4;
    this.COS1_6 = 1.722447098238334 / 4;
    this.COS1_7 = 5.101148618689164 / 16;
    this.COS2_0 = 0.5097955791041592 / 2;
    this.COS2_1 = 0.6013448869350453 / 2;
    this.COS2_2 = 0.8999762231364157 / 2;
    this.COS2_3 = 2.5629154477415064 / 8;
    this.COS3_0 = 0.541196100146197 / 2;
    this.COS3_1 = 1.3065629648763766 / 4;
    this.COS4_0 = 0.7071067811865476 / 2;
  }
  Dct32.prototype.BF_0 = function (val, a, b, c, s) {
    var tmp0 = val[a] + val[b];
    var tmp1 = val[a] - val[b];
    val[a] = tmp0;
    val[b] = tmp1 * c * (1 << s);
  };
  Dct32.prototype.BF0_0 = function (tab, tabOffset, val, a, b, c, s) {
    var tmp0 = tab[tabOffset + a | 0] + tab[tabOffset + b | 0];
    var tmp1 = tab[tabOffset + a | 0] - tab[tabOffset + b | 0];
    val[a] = tmp0;
    val[b] = tmp1 * c * (1 << s);
  };
  Dct32.prototype.BF1_0 = function (val, a, b, c, d) {
    this.BF_0(val, a, b, this.COS4_0, 1);
    this.BF_0(val, c, d, -this.COS4_0, 1);
    val[c] = val[c] + val[d];
  };
  Dct32.prototype.BF2_0 = function (val, a, b, c, d) {
    this.BF_0(val, a, b, this.COS4_0, 1);
    this.BF_0(val, c, d, -this.COS4_0, 1);
    val[c] = val[c] + val[d];
    val[a] = val[a] + val[c];
    val[c] = val[c] + val[b];
    val[b] = val[b] + val[d];
  };
  Dct32.prototype.ADD_0 = function (val, a, b) {
    val[a] = val[a] + val[b];
  };
  Dct32.prototype.dct32_41jbro$ = function (out, outOffset, tab, tabOffset) {
    var val = new Float32Array(32);
    this.BF0_0(tab, tabOffset, val, 0, 31, this.COS0_0, 1);
    this.BF0_0(tab, tabOffset, val, 15, 16, this.COS0_15, 5);
    this.BF_0(val, 0, 15, this.COS1_0, 1);
    this.BF_0(val, 16, 31, -this.COS1_0, 1);
    this.BF0_0(tab, tabOffset, val, 7, 24, this.COS0_7, 1);
    this.BF0_0(tab, tabOffset, val, 8, 23, this.COS0_8, 1);
    this.BF_0(val, 7, 8, this.COS1_7, 4);
    this.BF_0(val, 23, 24, -this.COS1_7, 4);
    this.BF_0(val, 0, 7, this.COS2_0, 1);
    this.BF_0(val, 8, 15, -this.COS2_0, 1);
    this.BF_0(val, 16, 23, this.COS2_0, 1);
    this.BF_0(val, 24, 31, -this.COS2_0, 1);
    this.BF0_0(tab, tabOffset, val, 3, 28, this.COS0_3, 1);
    this.BF0_0(tab, tabOffset, val, 12, 19, this.COS0_12, 2);
    this.BF_0(val, 3, 12, this.COS1_3, 1);
    this.BF_0(val, 19, 28, -this.COS1_3, 1);
    this.BF0_0(tab, tabOffset, val, 4, 27, this.COS0_4, 1);
    this.BF0_0(tab, tabOffset, val, 11, 20, this.COS0_11, 2);
    this.BF_0(val, 4, 11, this.COS1_4, 1);
    this.BF_0(val, 20, 27, -this.COS1_4, 1);
    this.BF_0(val, 3, 4, this.COS2_3, 3);
    this.BF_0(val, 11, 12, -this.COS2_3, 3);
    this.BF_0(val, 19, 20, this.COS2_3, 3);
    this.BF_0(val, 27, 28, -this.COS2_3, 3);
    this.BF_0(val, 0, 3, this.COS3_0, 1);
    this.BF_0(val, 4, 7, -this.COS3_0, 1);
    this.BF_0(val, 8, 11, this.COS3_0, 1);
    this.BF_0(val, 12, 15, -this.COS3_0, 1);
    this.BF_0(val, 16, 19, this.COS3_0, 1);
    this.BF_0(val, 20, 23, -this.COS3_0, 1);
    this.BF_0(val, 24, 27, this.COS3_0, 1);
    this.BF_0(val, 28, 31, -this.COS3_0, 1);
    this.BF0_0(tab, tabOffset, val, 1, 30, this.COS0_1, 1);
    this.BF0_0(tab, tabOffset, val, 14, 17, this.COS0_14, 3);
    this.BF_0(val, 1, 14, this.COS1_1, 1);
    this.BF_0(val, 17, 30, -this.COS1_1, 1);
    this.BF0_0(tab, tabOffset, val, 6, 25, this.COS0_6, 1);
    this.BF0_0(tab, tabOffset, val, 9, 22, this.COS0_9, 1);
    this.BF_0(val, 6, 9, this.COS1_6, 2);
    this.BF_0(val, 22, 25, -this.COS1_6, 2);
    this.BF_0(val, 1, 6, this.COS2_1, 1);
    this.BF_0(val, 9, 14, -this.COS2_1, 1);
    this.BF_0(val, 17, 22, this.COS2_1, 1);
    this.BF_0(val, 25, 30, -this.COS2_1, 1);
    this.BF0_0(tab, tabOffset, val, 2, 29, this.COS0_2, 1);
    this.BF0_0(tab, tabOffset, val, 13, 18, this.COS0_13, 3);
    this.BF_0(val, 2, 13, this.COS1_2, 1);
    this.BF_0(val, 18, 29, -this.COS1_2, 1);
    this.BF0_0(tab, tabOffset, val, 5, 26, this.COS0_5, 1);
    this.BF0_0(tab, tabOffset, val, 10, 21, this.COS0_10, 1);
    this.BF_0(val, 5, 10, this.COS1_5, 2);
    this.BF_0(val, 21, 26, -this.COS1_5, 2);
    this.BF_0(val, 2, 5, this.COS2_2, 1);
    this.BF_0(val, 10, 13, -this.COS2_2, 1);
    this.BF_0(val, 18, 21, this.COS2_2, 1);
    this.BF_0(val, 26, 29, -this.COS2_2, 1);
    this.BF_0(val, 1, 2, this.COS3_1, 2);
    this.BF_0(val, 5, 6, -this.COS3_1, 2);
    this.BF_0(val, 9, 10, this.COS3_1, 2);
    this.BF_0(val, 13, 14, -this.COS3_1, 2);
    this.BF_0(val, 17, 18, this.COS3_1, 2);
    this.BF_0(val, 21, 22, -this.COS3_1, 2);
    this.BF_0(val, 25, 26, this.COS3_1, 2);
    this.BF_0(val, 29, 30, -this.COS3_1, 2);
    this.BF1_0(val, 0, 1, 2, 3);
    this.BF2_0(val, 4, 5, 6, 7);
    this.BF1_0(val, 8, 9, 10, 11);
    this.BF2_0(val, 12, 13, 14, 15);
    this.BF1_0(val, 16, 17, 18, 19);
    this.BF2_0(val, 20, 21, 22, 23);
    this.BF1_0(val, 24, 25, 26, 27);
    this.BF2_0(val, 28, 29, 30, 31);
    this.ADD_0(val, 8, 12);
    this.ADD_0(val, 12, 10);
    this.ADD_0(val, 10, 14);
    this.ADD_0(val, 14, 9);
    this.ADD_0(val, 9, 13);
    this.ADD_0(val, 13, 11);
    this.ADD_0(val, 11, 15);
    out[outOffset + 0 | 0] = val[0];
    out[outOffset + 16 | 0] = val[1];
    out[outOffset + 8 | 0] = val[2];
    out[outOffset + 24 | 0] = val[3];
    out[outOffset + 4 | 0] = val[4];
    out[outOffset + 20 | 0] = val[5];
    out[outOffset + 12 | 0] = val[6];
    out[outOffset + 28 | 0] = val[7];
    out[outOffset + 2 | 0] = val[8];
    out[outOffset + 18 | 0] = val[9];
    out[outOffset + 10 | 0] = val[10];
    out[outOffset + 26 | 0] = val[11];
    out[outOffset + 6 | 0] = val[12];
    out[outOffset + 22 | 0] = val[13];
    out[outOffset + 14 | 0] = val[14];
    out[outOffset + 30 | 0] = val[15];
    this.ADD_0(val, 24, 28);
    this.ADD_0(val, 28, 26);
    this.ADD_0(val, 26, 30);
    this.ADD_0(val, 30, 25);
    this.ADD_0(val, 25, 29);
    this.ADD_0(val, 29, 27);
    this.ADD_0(val, 27, 31);
    out[outOffset + 1 | 0] = val[16] + val[24];
    out[outOffset + 17 | 0] = val[17] + val[25];
    out[outOffset + 9 | 0] = val[18] + val[26];
    out[outOffset + 25 | 0] = val[19] + val[27];
    out[outOffset + 5 | 0] = val[20] + val[28];
    out[outOffset + 21 | 0] = val[21] + val[29];
    out[outOffset + 13 | 0] = val[22] + val[30];
    out[outOffset + 29 | 0] = val[23] + val[31];
    out[outOffset + 3 | 0] = val[24] + val[20];
    out[outOffset + 19 | 0] = val[25] + val[21];
    out[outOffset + 11 | 0] = val[26] + val[22];
    out[outOffset + 27 | 0] = val[27] + val[23];
    out[outOffset + 7 | 0] = val[28] + val[18];
    out[outOffset + 23 | 0] = val[29] + val[19];
    out[outOffset + 15 | 0] = val[30] + val[17];
    out[outOffset + 31 | 0] = val[31];
  };
  Dct32.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Dct32',
    interfaces: []
  };
  var Dct32_instance = null;
  function Dct32_getInstance() {
    if (Dct32_instance === null) {
      new Dct32();
    }
    return Dct32_instance;
  }
  function FFT() {
    FFT$Companion_getInstance();
    this.nbits_8be2vx$ = 0;
    this.inverse_8be2vx$ = false;
    this.revtab_8be2vx$ = new Int32Array(0);
    this.tmpBuf_8be2vx$ = new Float32Array(0);
    this.mdctSize_8be2vx$ = 0;
    this.mdctBits_8be2vx$ = 0;
    this.tcos_8be2vx$ = new Float32Array(0);
    this.tsin_8be2vx$ = new Float32Array(0);
  }
  FFT.prototype.copy_6lu03$ = function (that) {
    this.nbits_8be2vx$ = that.nbits_8be2vx$;
    this.inverse_8be2vx$ = that.inverse_8be2vx$;
    this.copy_2vb79e$(this.revtab_8be2vx$, that.revtab_8be2vx$);
    this.copy_7u45pk$(this.tmpBuf_8be2vx$, that.tmpBuf_8be2vx$);
    this.mdctSize_8be2vx$ = that.mdctSize_8be2vx$;
    this.mdctBits_8be2vx$ = that.mdctBits_8be2vx$;
    this.copy_7u45pk$(this.tcos_8be2vx$, that.tcos_8be2vx$);
    this.copy_7u45pk$(this.tsin_8be2vx$, that.tsin_8be2vx$);
  };
  FFT.prototype.copy_2vb79e$ = function (dst, src) {
    arraycopy_0(src, 0, dst, 0, src.length);
  };
  FFT.prototype.copy_7u45pk$ = function (dst, src) {
    arraycopy(src, 0, dst, 0, src.length);
  };
  FFT.prototype.fftInit_0 = function (nbits, inverse) {
    if (nbits < 2 || nbits > 16) {
      this.revtab_8be2vx$ = new Int32Array(0);
      this.tmpBuf_8be2vx$ = new Float32Array(0);
      return -1;
    }
    this.nbits_8be2vx$ = nbits;
    this.inverse_8be2vx$ = inverse;
    var n = 1 << nbits;
    this.revtab_8be2vx$ = new Int32Array(n);
    this.tmpBuf_8be2vx$ = new Float32Array(n * 2 | 0);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_16_0, 16);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_32_0, 32);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_64_0, 64);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_128_0, 128);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_256_0, 256);
    FFT$Companion_getInstance().initFfCosTabs_0(FFT$Companion_getInstance().ff_cos_512_0, 512);
    for (var i = 0; i < n; i++) {
      this.revtab_8be2vx$[-FFT$Companion_getInstance().splitRadixPermutation_0(i, n, inverse) & n - 1] = i;
    }
    return 0;
  };
  FFT.prototype.mdctInit_x0zet3$ = function (nbits, inverse, scale) {
    var scale_0 = scale;
    var n = 1 << nbits;
    this.mdctBits_8be2vx$ = nbits;
    this.mdctSize_8be2vx$ = n;
    var n4 = n >> 2;
    var ret = this.fftInit_0(this.mdctBits_8be2vx$ - 2 | 0, inverse);
    if (ret < 0) {
      return ret;
    }
    this.tcos_8be2vx$ = new Float32Array(n4);
    this.tsin_8be2vx$ = new Float32Array(n4);
    var theta = 1.0 / 8.0 + (scale_0 < 0 ? n4 : 0);
    var x = scale_0;
    var x_0 = Math_0.abs(x);
    scale_0 = Math_0.sqrt(x_0);
    for (var i = 0; i < n4; i++) {
      var alpha = 2.0 * math.PI * (i + theta) / n;
      this.tcos_8be2vx$[i] = -Math_0.cos(alpha) * scale_0;
      this.tsin_8be2vx$[i] = -Math_0.sin(alpha) * scale_0;
    }
    return 0;
  };
  FFT.prototype.imdctCalc_41jbro$ = function (output, outputOffset, input, inputOffset) {
    var n = 1 << this.mdctBits_8be2vx$;
    var n2 = n >> 1;
    var n4 = n >> 2;
    this.imdctHalf_41jbro$(output, outputOffset + n4 | 0, input, inputOffset);
    for (var k = 0; k < n4; k++) {
      output[outputOffset + k | 0] = -output[outputOffset + n2 - k - 1 | 0];
      output[outputOffset + n - k - 1 | 0] = output[outputOffset + n2 + k | 0];
    }
  };
  FFT.prototype.imdctHalf_41jbro$ = function (output, outputOffset, input, inputOffset) {
    var n = 1 << this.mdctBits_8be2vx$;
    var n2 = n >> 1;
    var n4 = n >> 2;
    var n8 = n >> 3;
    var in1 = 0;
    var in2 = n2 - 1 | 0;
    for (var k = 0; k < n4; k++) {
      var j = ensureNotNull(this.revtab_8be2vx$)[k];
      FFT$Companion_getInstance().CMUL_0(output, outputOffset + (j * 2 | 0) | 0, outputOffset + (j * 2 | 0) + 1 | 0, input[inputOffset + in2 | 0], input[inputOffset + in1 | 0], this.tcos_8be2vx$[k], this.tsin_8be2vx$[k]);
      in1 = in1 + 2 | 0;
      in2 = in2 - 2 | 0;
    }
    this.fftCalcFloat_9752rg$(output, outputOffset);
    var r = new Float32Array(4);
    for (var k_0 = 0; k_0 < n8; k_0++) {
      FFT$Companion_getInstance().CMUL_0(r, 0, 3, output[outputOffset + ((n8 - k_0 - 1 | 0) * 2 | 0) + 1 | 0], output[outputOffset + ((n8 - k_0 - 1 | 0) * 2 | 0) + 0 | 0], this.tsin_8be2vx$[n8 - k_0 - 1 | 0], this.tcos_8be2vx$[n8 - k_0 - 1 | 0]);
      FFT$Companion_getInstance().CMUL_0(r, 2, 1, output[outputOffset + ((n8 + k_0 | 0) * 2 | 0) + 1 | 0], output[outputOffset + ((n8 + k_0 | 0) * 2 | 0) + 0 | 0], this.tsin_8be2vx$[n8 + k_0 | 0], this.tcos_8be2vx$[n8 + k_0 | 0]);
      output[outputOffset + ((n8 - k_0 - 1 | 0) * 2 | 0) + 0 | 0] = r[0];
      output[outputOffset + ((n8 - k_0 - 1 | 0) * 2 | 0) + 1 | 0] = r[1];
      output[outputOffset + ((n8 + k_0 | 0) * 2 | 0) + 0 | 0] = r[2];
      output[outputOffset + ((n8 + k_0 | 0) * 2 | 0) + 1 | 0] = r[3];
    }
  };
  FFT.prototype.fft4_0 = function (z, o) {
    var t3 = z[o + 0 | 0] - z[o + 2 | 0];
    var t1 = z[o + 0 | 0] + z[o + 2 | 0];
    var t8 = z[o + 6 | 0] - z[o + 4 | 0];
    var t6 = z[o + 6 | 0] + z[o + 4 | 0];
    z[o + 4 | 0] = t1 - t6;
    z[o + 0 | 0] = t1 + t6;
    var t4 = z[o + 1 | 0] - z[o + 3 | 0];
    var t2 = z[o + 1 | 0] + z[o + 3 | 0];
    var t7 = z[o + 5 | 0] - z[o + 7 | 0];
    var t5 = z[o + 5 | 0] + z[o + 7 | 0];
    z[o + 7 | 0] = t4 - t8;
    z[o + 3 | 0] = t4 + t8;
    z[o + 6 | 0] = t3 - t7;
    z[o + 2 | 0] = t3 + t7;
    z[o + 5 | 0] = t2 - t5;
    z[o + 1 | 0] = t2 + t5;
  };
  FFT.prototype.fft8_0 = function (z, o) {
    this.fft4_0(z, o);
    var t1 = z[o + 8 | 0] + z[o + 10 | 0];
    z[o + 10 | 0] = z[o + 8 | 0] - z[o + 10 | 0];
    var t2 = z[o + 9 | 0] + z[o + 11 | 0];
    z[o + 11 | 0] = z[o + 9 | 0] - z[o + 11 | 0];
    var t5 = z[o + 12 | 0] + z[o + 14 | 0];
    z[o + 14 | 0] = z[o + 12 | 0] - z[o + 14 | 0];
    var t6 = z[o + 13 | 0] + z[o + 15 | 0];
    z[o + 15 | 0] = z[o + 13 | 0] - z[o + 15 | 0];
    var t3 = t5 - t1;
    t5 = t5 + t1;
    z[o + 8 | 0] = z[o + 0 | 0] - t5;
    z[o + 0 | 0] = z[o + 0 | 0] + t5;
    z[o + 13 | 0] = z[o + 5 | 0] - t3;
    z[o + 5 | 0] = z[o + 5 | 0] + t3;
    var t4 = t2 - t6;
    t6 = t2 + t6;
    z[o + 12 | 0] = z[o + 4 | 0] - t4;
    z[o + 4 | 0] = z[o + 4 | 0] + t4;
    z[o + 9 | 0] = z[o + 1 | 0] - t6;
    z[o + 1 | 0] = z[o + 1 | 0] + t6;
    t1 = z[o + 10 | 0] * FFT$Companion_getInstance().sqrthalf_0 + z[o + 11 | 0] * FFT$Companion_getInstance().sqrthalf_0;
    t2 = -z[o + 10 | 0] * FFT$Companion_getInstance().sqrthalf_0 + z[o + 11 | 0] * FFT$Companion_getInstance().sqrthalf_0;
    t5 = z[o + 14 | 0] * FFT$Companion_getInstance().sqrthalf_0 - z[o + 15 | 0] * FFT$Companion_getInstance().sqrthalf_0;
    t6 = z[o + 14 | 0] * FFT$Companion_getInstance().sqrthalf_0 + z[o + 15 | 0] * FFT$Companion_getInstance().sqrthalf_0;
    t3 = t5 - t1;
    t5 = t5 + t1;
    z[o + 10 | 0] = z[o + 2 | 0] - t5;
    z[o + 2 | 0] = z[o + 2 | 0] + t5;
    z[o + 15 | 0] = z[o + 7 | 0] - t3;
    z[o + 7 | 0] = z[o + 7 | 0] + t3;
    t4 = t2 - t6;
    t6 = t2 + t6;
    z[o + 14 | 0] = z[o + 6 | 0] - t4;
    z[o + 6 | 0] = z[o + 6 | 0] + t4;
    z[o + 11 | 0] = z[o + 3 | 0] - t6;
    z[o + 3 | 0] = z[o + 3 | 0] + t6;
  };
  FFT.prototype.pass_0 = function (z, o, cos, n) {
    var n_0 = n;
    var o0 = o;
    var o1 = o + ((2 * n_0 | 0) * 2 | 0) | 0;
    var o2 = o + ((4 * n_0 | 0) * 2 | 0) | 0;
    var o3 = o + ((6 * n_0 | 0) * 2 | 0) | 0;
    var wre = 0;
    var wim = 2 * n_0 | 0;
    n_0 = n_0 - 1 | 0;
    var t1 = z[o2 + 0 | 0];
    var t2 = z[o2 + 1 | 0];
    var t5 = z[o3 + 0 | 0];
    var t6 = z[o3 + 1 | 0];
    var t3 = t5 - t1;
    t5 = t5 + t1;
    z[o2 + 0 | 0] = z[o0 + 0 | 0] - t5;
    z[o0 + 0 | 0] = z[o0 + 0 | 0] + t5;
    z[o3 + 1 | 0] = z[o1 + 1 | 0] - t3;
    z[o1 + 1 | 0] = z[o1 + 1 | 0] + t3;
    var t4 = t2 - t6;
    t6 = t2 + t6;
    z[o3 + 0 | 0] = z[o1 + 0 | 0] - t4;
    z[o1 + 0 | 0] = z[o1 + 0 | 0] + t4;
    z[o2 + 1 | 0] = z[o0 + 1 | 0] - t6;
    z[o0 + 1 | 0] = z[o0 + 1 | 0] + t6;
    t1 = z[o2 + 2 | 0] * cos[wre + 1 | 0] + z[o2 + 3 | 0] * cos[wim - 1 | 0];
    t2 = -z[o2 + 2 | 0] * cos[wim - 1 | 0] + z[o2 + 3 | 0] * cos[wre + 1 | 0];
    t5 = z[o3 + 2 | 0] * cos[wre + 1 | 0] - z[o3 + 3 | 0] * cos[wim - 1 | 0];
    t6 = z[o3 + 2 | 0] * cos[wim - 1 | 0] + z[o3 + 3 | 0] * cos[wre + 1 | 0];
    t3 = t5 - t1;
    t5 = t5 + t1;
    z[o2 + 2 | 0] = z[o0 + 2 | 0] - t5;
    z[o0 + 2 | 0] = z[o0 + 2 | 0] + t5;
    z[o3 + 3 | 0] = z[o1 + 3 | 0] - t3;
    z[o1 + 3 | 0] = z[o1 + 3 | 0] + t3;
    t4 = t2 - t6;
    t6 = t2 + t6;
    z[o3 + 2 | 0] = z[o1 + 2 | 0] - t4;
    z[o1 + 2 | 0] = z[o1 + 2 | 0] + t4;
    z[o2 + 3 | 0] = z[o0 + 3 | 0] - t6;
    z[o0 + 3 | 0] = z[o0 + 3 | 0] + t6;
    do {
      o0 = o0 + 4 | 0;
      o1 = o1 + 4 | 0;
      o2 = o2 + 4 | 0;
      o3 = o3 + 4 | 0;
      wre = wre + 2 | 0;
      wim = wim - 2 | 0;
      t1 = z[o2 + 0 | 0] * cos[wre] + z[o2 + 1 | 0] * cos[wim];
      t2 = -z[o2 + 0 | 0] * cos[wim] + z[o2 + 1 | 0] * cos[wre];
      t5 = z[o3 + 0 | 0] * cos[wre] - z[o3 + 1 | 0] * cos[wim];
      t6 = z[o3 + 0 | 0] * cos[wim] + z[o3 + 1 | 0] * cos[wre];
      t3 = t5 - t1;
      t5 = t5 + t1;
      z[o2 + 0 | 0] = z[o0 + 0 | 0] - t5;
      z[o0 + 0 | 0] = z[o0 + 0 | 0] + t5;
      z[o3 + 1 | 0] = z[o1 + 1 | 0] - t3;
      z[o1 + 1 | 0] = z[o1 + 1 | 0] + t3;
      t4 = t2 - t6;
      t6 = t2 + t6;
      z[o3 + 0 | 0] = z[o1 + 0 | 0] - t4;
      z[o1 + 0 | 0] = z[o1 + 0 | 0] + t4;
      z[o2 + 1 | 0] = z[o0 + 1 | 0] - t6;
      z[o0 + 1 | 0] = z[o0 + 1 | 0] + t6;
      t1 = z[o2 + 2 | 0] * cos[wre + 1 | 0] + z[o2 + 3 | 0] * cos[wim - 1 | 0];
      t2 = -z[o2 + 2 | 0] * cos[wim - 1 | 0] + z[o2 + 3 | 0] * cos[wre + 1 | 0];
      t5 = z[o3 + 2 | 0] * cos[wre + 1 | 0] - z[o3 + 3 | 0] * cos[wim - 1 | 0];
      t6 = z[o3 + 2 | 0] * cos[wim - 1 | 0] + z[o3 + 3 | 0] * cos[wre + 1 | 0];
      t3 = t5 - t1;
      t5 = t5 + t1;
      z[o2 + 2 | 0] = z[o0 + 2 | 0] - t5;
      z[o0 + 2 | 0] = z[o0 + 2 | 0] + t5;
      z[o3 + 3 | 0] = z[o1 + 3 | 0] - t3;
      z[o1 + 3 | 0] = z[o1 + 3 | 0] + t3;
      t4 = t2 - t6;
      t6 = t2 + t6;
      z[o3 + 2 | 0] = z[o1 + 2 | 0] - t4;
      z[o1 + 2 | 0] = z[o1 + 2 | 0] + t4;
      z[o2 + 3 | 0] = z[o0 + 3 | 0] - t6;
      z[o0 + 3 | 0] = z[o0 + 3 | 0] + t6;
    }
     while ((n_0 = n_0 - 1 | 0, n_0) !== 0);
  };
  FFT.prototype.fft16_0 = function (z, o) {
    this.fft8_0(z, o);
    this.fft4_0(z, o + 16 | 0);
    this.fft4_0(z, o + 24 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_16_0, 2);
  };
  FFT.prototype.fft32_0 = function (z, o) {
    this.fft16_0(z, o);
    this.fft8_0(z, o + 32 | 0);
    this.fft8_0(z, o + 48 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_32_0, 4);
  };
  FFT.prototype.fft64_0 = function (z, o) {
    this.fft32_0(z, o);
    this.fft16_0(z, o + 64 | 0);
    this.fft16_0(z, o + 96 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_64_0, 8);
  };
  FFT.prototype.fft128_0 = function (z, o) {
    this.fft64_0(z, o);
    this.fft32_0(z, o + 128 | 0);
    this.fft32_0(z, o + 192 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_128_0, 16);
  };
  FFT.prototype.fft256_0 = function (z, o) {
    this.fft128_0(z, o);
    this.fft64_0(z, o + 256 | 0);
    this.fft64_0(z, o + 384 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_256_0, 32);
  };
  FFT.prototype.fft512_0 = function (z, o) {
    this.fft256_0(z, o);
    this.fft128_0(z, o + 512 | 0);
    this.fft128_0(z, o + 768 | 0);
    this.pass_0(z, o, FFT$Companion_getInstance().ff_cos_512_0, 64);
  };
  FFT.prototype.fftCalcFloat_9752rg$ = function (z, o) {
    var tmp$;
    tmp$ = this.nbits_8be2vx$;
    if (tmp$ === 2)
      this.fft4_0(z, 0);
    else if (tmp$ === 3)
      this.fft8_0(z, o);
    else if (tmp$ === 4)
      this.fft16_0(z, 0);
    else if (tmp$ === 5)
      this.fft32_0(z, 0);
    else if (tmp$ === 6)
      this.fft64_0(z, o);
    else if (tmp$ === 7)
      this.fft128_0(z, o);
    else if (tmp$ === 8)
      this.fft256_0(z, 0);
    else if (tmp$ === 9)
      this.fft512_0(z, 0);
    else {
      var $this = FFT$Companion_getInstance().log_0;
      var level = LogLevel.ERROR;
      if ($this.isEnabled_ci8eq1$(level)) {
        $this.actualLog_t189ph$(level, format('FFT nbits=%d not implemented', [this.nbits_8be2vx$]));
      }
    }
  };
  FFT.prototype.mdctCalc_41jbro$ = function (output, outputOffset, input, inputOffset) {
    var n = 1 << this.mdctBits_8be2vx$;
    var n2 = n >> 1;
    var n4 = n >> 2;
    var n8 = n >> 3;
    var n3 = 3 * n4 | 0;
    for (var i = 0; i < n8; i++) {
      var re = -input[inputOffset + (2 * i | 0) + n3 | 0] - input[inputOffset + n3 - 1 - (2 * i | 0) | 0];
      var im = -input[inputOffset + n4 + (2 * i | 0) | 0] + input[inputOffset + n4 - 1 - (2 * i | 0) | 0];
      var j = ensureNotNull(this.revtab_8be2vx$)[i];
      FFT$Companion_getInstance().CMUL_0(output, outputOffset + (2 * j | 0) + 0 | 0, outputOffset + (2 * j | 0) + 1 | 0, re, im, -this.tcos_8be2vx$[i], this.tsin_8be2vx$[i]);
      re = input[inputOffset + (2 * i | 0) | 0] - input[inputOffset + n2 - 1 - (2 * i | 0) | 0];
      im = -input[inputOffset + n2 + (2 * i | 0) | 0] - input[inputOffset + n - 1 - (2 * i | 0) | 0];
      j = ensureNotNull(this.revtab_8be2vx$)[n8 + i | 0];
      FFT$Companion_getInstance().CMUL_0(output, outputOffset + (2 * j | 0) + 0 | 0, outputOffset + (2 * j | 0) + 1 | 0, re, im, -this.tcos_8be2vx$[n8 + i | 0], this.tsin_8be2vx$[n8 + i | 0]);
    }
    this.fftCalcFloat_9752rg$(output, outputOffset);
    var r = new Float32Array(4);
    for (var i_0 = 0; i_0 < n8; i_0++) {
      FFT$Companion_getInstance().CMUL_0(r, 3, 0, output[outputOffset + ((n8 - i_0 - 1 | 0) * 2 | 0) + 0 | 0], output[outputOffset + ((n8 - i_0 - 1 | 0) * 2 | 0) + 1 | 0], -this.tsin_8be2vx$[n8 - i_0 - 1 | 0], -this.tcos_8be2vx$[n8 - i_0 - 1 | 0]);
      FFT$Companion_getInstance().CMUL_0(r, 1, 2, output[outputOffset + ((n8 + i_0 | 0) * 2 | 0) + 0 | 0], output[outputOffset + ((n8 + i_0 | 0) * 2 | 0) + 1 | 0], -this.tsin_8be2vx$[n8 + i_0 | 0], -this.tcos_8be2vx$[n8 + i_0 | 0]);
      output[outputOffset + ((n8 - i_0 - 1 | 0) * 2 | 0) + 0 | 0] = r[0];
      output[outputOffset + ((n8 - i_0 - 1 | 0) * 2 | 0) + 1 | 0] = r[1];
      output[outputOffset + ((n8 + i_0 | 0) * 2 | 0) + 0 | 0] = r[2];
      output[outputOffset + ((n8 + i_0 | 0) * 2 | 0) + 1 | 0] = r[3];
    }
  };
  function FFT$Companion() {
    FFT$Companion_instance = this;
    this.log_0 = Logger.Companion.invoke_61zpoe$('FFT');
    this.M_SQRT1_2 = 0.7071067811865476;
    this.sqrthalf_0 = this.M_SQRT1_2;
    this.ff_cos_16_0 = new Float32Array(16 / 2 | 0);
    this.ff_cos_32_0 = new Float32Array(32 / 2 | 0);
    this.ff_cos_64_0 = new Float32Array(64 / 2 | 0);
    this.ff_cos_128_0 = new Float32Array(128 / 2 | 0);
    this.ff_cos_256_0 = new Float32Array(256 / 2 | 0);
    this.ff_cos_512_0 = new Float32Array(512 / 2 | 0);
  }
  FFT$Companion.prototype.initFfCosTabs_0 = function (tab, m) {
    var tmp$, tmp$_0;
    var freq = 2 * math.PI / m;
    tmp$ = m / 4 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var x = i * freq;
      tab[i] = Math_0.cos(x);
    }
    tmp$_0 = m / 4 | 0;
    for (var i_0 = 1; i_0 < tmp$_0; i_0++) {
      tab[(m / 2 | 0) - i_0 | 0] = tab[i_0];
    }
  };
  FFT$Companion.prototype.splitRadixPermutation_0 = function (i, n, inverse) {
    if (n <= 2) {
      return i & 1;
    }
    var m = n >> 1;
    if ((i & m) === 0) {
      return this.splitRadixPermutation_0(i, m, inverse) * 2 | 0;
    }
    m = m >> 1;
    return (this.splitRadixPermutation_0(i, m, inverse) * 4 | 0) + (inverse === ((i & m) === 0) ? 1 : -1) | 0;
  };
  FFT$Companion.prototype.CMUL_0 = function (d, dre, dim, are, aim, bre, bim) {
    d[dre] = are * bre - aim * bim;
    d[dim] = are * bim + aim * bre;
  };
  FFT$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var FFT$Companion_instance = null;
  function FFT$Companion_getInstance() {
    if (FFT$Companion_instance === null) {
      new FFT$Companion();
    }
    return FFT$Companion_instance;
  }
  FFT.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FFT',
    interfaces: []
  };
  function FloatDSP() {
    FloatDSP_instance = this;
  }
  FloatDSP.prototype.vectorFmul_6rz3gq$ = function (dst, dstOffset, src0, src0Offset, src1, src1Offset, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = src0[src0Offset + i | 0] * src1[src1Offset + i | 0];
    }
  };
  FloatDSP.prototype.vectorFmacScalar_1nb84h$ = function (dst, dstOffset, src, srcOffset, mul, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = dst[dstOffset + i | 0] + src[srcOffset + i | 0] * mul;
    }
  };
  FloatDSP.prototype.vectorFmulScalar_1nb84h$ = function (dst, dstOffset, src, srcOffset, mul, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = src[srcOffset + i | 0] * mul;
    }
  };
  FloatDSP.prototype.vectorDmulScalar_elzf7i$ = function (dst, dstOffset, src, srcOffset, mul, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = src[srcOffset + i | 0] * mul;
    }
  };
  FloatDSP.prototype.vectorFmulWindow_yvm5b6$ = function (dst, dstOffset, src0, src0Offset, src1, src1Offset, win, winOffset, len) {
    var dstOffset_0 = dstOffset;
    var src0Offset_0 = src0Offset;
    var winOffset_0 = winOffset;
    dstOffset_0 = dstOffset_0 + len | 0;
    winOffset_0 = winOffset_0 + len | 0;
    src0Offset_0 = src0Offset_0 + len | 0;
    var i = -len;
    var j = len - 1 | 0;
    while (i < 0) {
      var s0 = src0[src0Offset_0 + i | 0];
      var s1 = src1[src1Offset + j | 0];
      var wi = win[winOffset_0 + i | 0];
      var wj = win[winOffset_0 + j | 0];
      dst[dstOffset_0 + i | 0] = s0 * wj - s1 * wi;
      dst[dstOffset_0 + j | 0] = s0 * wi + s1 * wj;
      i = i + 1 | 0;
      j = j - 1 | 0;
    }
  };
  FloatDSP.prototype.vectorFmulAdd_yvm5b6$ = function (dst, dstOffset, src0, src0Offset, src1, src1Offset, src2, src2Offset, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = src0[src0Offset + i | 0] * src1[src1Offset + i | 0] + src2[src2Offset + i | 0];
    }
  };
  FloatDSP.prototype.vectorFmulReverse_6rz3gq$ = function (dst, dstOffset, src0, src0Offset, src1, src1Offset, len) {
    for (var i = 0; i < len; i++) {
      dst[dstOffset + i | 0] = src0[src0Offset + i | 0] * src1[src1Offset + len - 1 - i | 0];
    }
  };
  FloatDSP.prototype.butterflies_5ukzfm$ = function (v1, v1Offset, v2, v2Offset, len) {
    for (var i = 0; i < len; i++) {
      var t = v1[v1Offset + i | 0] - v2[v2Offset + i | 0];
      v1[v1Offset + i | 0] = v1[v1Offset + i | 0] + v2[v2Offset + i | 0];
      v2[v2Offset + i | 0] = t;
    }
  };
  FloatDSP.prototype.scalarproduct_5ukzfm$ = function (v1, v1Offset, v2, v2Offset, len) {
    var p = 0.0;
    for (var i = 0; i < len; i++) {
      p += v1[v1Offset + i | 0] * v2[v2Offset + i | 0];
    }
    return p;
  };
  FloatDSP.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'FloatDSP',
    interfaces: []
  };
  var FloatDSP_instance = null;
  function FloatDSP_getInstance() {
    if (FloatDSP_instance === null) {
      new FloatDSP();
    }
    return FloatDSP_instance;
  }
  function IBitReader() {
  }
  IBitReader.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'IBitReader',
    interfaces: []
  };
  function IMemory() {
  }
  IMemory.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'IMemory',
    interfaces: []
  };
  function String_format(format) {
    return format;
  }
  function String_format_0(format_0, args) {
    return format(format_0, args.slice());
  }
  function signExtend_0(v, bits) {
    return signExtend(v, bits);
  }
  function SineWin() {
    SineWin_instance = this;
    this.ff_sine_64 = new Float32Array(64);
    this.ff_sine_128 = new Float32Array(128);
    this.ff_sine_512 = new Float32Array(512);
    this.ff_sine_1024 = new Float32Array(1024);
  }
  SineWin.prototype.sineWindowInit_0 = function (window_0) {
    var n = window_0.length;
    for (var i = 0; i < n; i++) {
      var x = (i + 0.5) * (math.PI / (2.0 * n));
      window_0[i] = Math_0.sin(x);
    }
  };
  SineWin.prototype.initFfSineWindows = function () {
    this.sineWindowInit_0(this.ff_sine_64);
    this.sineWindowInit_0(this.ff_sine_128);
    this.sineWindowInit_0(this.ff_sine_512);
    this.sineWindowInit_0(this.ff_sine_1024);
  };
  SineWin.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SineWin',
    interfaces: []
  };
  var SineWin_instance = null;
  function SineWin_getInstance() {
    if (SineWin_instance === null) {
      new SineWin();
    }
    return SineWin_instance;
  }
  function VLC() {
    VLC$Companion_getInstance();
    this.bits = 0;
    this.table = null;
    this.tableSize = 0;
    this.tableAllocated = 0;
  }
  function VLC$VLCcode() {
    this.bits_8be2vx$ = 0;
    this.symbol_8be2vx$ = 0;
    this.code_8be2vx$ = 0;
  }
  VLC$VLCcode.prototype.compareTo_11rb$ = function (o) {
    return (this.code_8be2vx$ >>> 1) - (o.code_8be2vx$ >>> 1) | 0;
  };
  VLC$VLCcode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VLCcode',
    interfaces: [Comparable]
  };
  VLC.prototype.initVLCSparse_hq6mel$ = function (bits, codes, symbols) {
    return this.initVLCSparse_g46b0u$(bits.length, codes.length, bits, codes, symbols);
  };
  VLC.prototype.initVLCSparse_g46b0u$ = function (nbBits, nbCodes, bits, codes, symbols) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var nbCodes_0 = nbCodes;
    var buf = Kotlin.newArray(nbCodes_0 + 1 | 0, null);
    this.bits = nbBits;
    var j = 0;
    tmp$ = nbCodes_0;
    for (var i = 0; i < tmp$; i++) {
      var vlCcode = new VLC$VLCcode();
      buf[j] = vlCcode;
      vlCcode.bits_8be2vx$ = bits[i];
      if (vlCcode.bits_8be2vx$ <= nbBits) {
        continue;
      }
      if (vlCcode.bits_8be2vx$ > (3 * nbBits | 0) || vlCcode.bits_8be2vx$ > 32) {
        var $this = VLC$Companion_getInstance().log_0;
        var level = LogLevel.ERROR;
        if ($this.isEnabled_ci8eq1$(level)) {
          $this.actualLog_t189ph$(level, format('Too long VLC (%d) in initVLC', [vlCcode.bits_8be2vx$]));
        }
        return -1;
      }
      vlCcode.code_8be2vx$ = codes[i];
      if (vlCcode.code_8be2vx$ >= 1 << vlCcode.bits_8be2vx$) {
        var $this_0 = VLC$Companion_getInstance().log_0;
        var level_0 = LogLevel.ERROR;
        if ($this_0.isEnabled_ci8eq1$(level_0)) {
          $this_0.actualLog_t189ph$(level_0, 'Invalid code in initVLC');
        }
        return -1;
      }
      vlCcode.code_8be2vx$ = vlCcode.code_8be2vx$ << 32 - vlCcode.bits_8be2vx$;
      if (symbols != null) {
        vlCcode.symbol_8be2vx$ = symbols[i];
      }
       else {
        vlCcode.symbol_8be2vx$ = i;
      }
      j = j + 1 | 0;
    }
    Arrays_getInstance().sort_273xr4$(Kotlin.isArray(tmp$_0 = buf) ? tmp$_0 : throwCCE(), 0, j);
    tmp$_1 = nbCodes_0;
    for (var i_0 = 0; i_0 < tmp$_1; i_0++) {
      var vlCcode_0 = new VLC$VLCcode();
      buf[j] = vlCcode_0;
      vlCcode_0.bits_8be2vx$ = bits[i_0];
      if (!(vlCcode_0.bits_8be2vx$ !== 0 && vlCcode_0.bits_8be2vx$ <= nbBits)) {
        continue;
      }
      vlCcode_0.code_8be2vx$ = codes[i_0];
      vlCcode_0.code_8be2vx$ = vlCcode_0.code_8be2vx$ << 32 - vlCcode_0.bits_8be2vx$;
      if (symbols != null) {
        vlCcode_0.symbol_8be2vx$ = symbols[i_0];
      }
       else {
        vlCcode_0.symbol_8be2vx$ = i_0;
      }
      j = j + 1 | 0;
    }
    nbCodes_0 = j;
    return this.buildTable_0(nbBits, nbCodes_0, Kotlin.isArray(tmp$_2 = buf) ? tmp$_2 : throwCCE(), 0);
  };
  VLC.prototype.buildTable_0 = function (tableNbBits, nbCodes, codes, codeOffset) {
    var tableSize = 1 << tableNbBits;
    if (tableNbBits > 30) {
      return -1;
    }
    var tableIndex = this.allocTable_0(tableSize);
    if (tableIndex < 0) {
      return tableIndex;
    }
    var i = 0;
    while (i < nbCodes) {
      var n = codes[codeOffset + i | 0].bits_8be2vx$;
      var code = codes[codeOffset + i | 0].code_8be2vx$;
      var symbol = codes[codeOffset + i | 0].symbol_8be2vx$;
      if (n <= tableNbBits) {
        var j = code >>> 32 - tableNbBits;
        var nb = 1 << tableNbBits - n;
        var inc = 1;
        for (var k = 0; k < nb; k++) {
          var bits = ensureNotNull(this.table)[tableIndex + j | 0][1];
          if (bits !== 0 && bits !== n) {
            var $this = VLC$Companion_getInstance().log_0;
            var level = LogLevel.ERROR;
            if ($this.isEnabled_ci8eq1$(level)) {
              $this.actualLog_t189ph$(level, 'incorrect codes');
            }
            return -1;
          }
          ensureNotNull(this.table)[tableIndex + j | 0][1] = n;
          ensureNotNull(this.table)[tableIndex + j | 0][0] = symbol;
          j = j + inc | 0;
        }
      }
       else {
        n = n - tableNbBits | 0;
        var codePrefix = code >>> 32 - tableNbBits;
        var subtableBits = n;
        codes[codeOffset + i | 0].bits_8be2vx$ = n;
        codes[codeOffset + i | 0].code_8be2vx$ = code << tableNbBits;
        var k_0;
        k_0 = i + 1 | 0;
        while (k_0 < nbCodes) {
          n = codes[codeOffset + k_0 | 0].bits_8be2vx$ - tableNbBits | 0;
          if (n <= 0) {
            break;
          }
          code = codes[codeOffset + k_0 | 0].code_8be2vx$;
          if (code >>> 32 - tableNbBits !== codePrefix) {
            break;
          }
          codes[codeOffset + k_0 | 0].bits_8be2vx$ = n;
          codes[codeOffset + k_0 | 0].code_8be2vx$ = code << tableNbBits;
          var a = subtableBits;
          var b = n;
          subtableBits = Math_0.max(a, b);
          k_0 = k_0 + 1 | 0;
        }
        var a_0 = subtableBits;
        subtableBits = Math_0.min(a_0, tableNbBits);
        ensureNotNull(this.table)[tableIndex + codePrefix | 0][1] = -subtableBits;
        var index = this.buildTable_0(subtableBits, k_0 - i | 0, codes, codeOffset + i | 0);
        if (index < 0) {
          return index;
        }
        ensureNotNull(this.table)[tableIndex + codePrefix | 0][0] = index;
        i = k_0 - 1 | 0;
      }
      i = i + 1 | 0;
    }
    for (var i_0 = 0; i_0 < tableSize; i_0++) {
      if (ensureNotNull(this.table)[tableIndex + i_0 | 0][1] === 0) {
        ensureNotNull(this.table)[tableIndex + i_0 | 0][0] = -1;
      }
    }
    return tableIndex;
  };
  VLC.prototype.allocTable_0 = function (size) {
    var index = this.tableSize;
    this.tableSize = this.tableSize + size | 0;
    this.tableAllocated = this.tableSize;
    var array = Array_0(this.tableAllocated);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new Int32Array(2);
    }
    var newTable = array;
    if (this.table != null) {
      for (var i_0 = 0; i_0 < index; i_0++) {
        newTable[i_0][0] = ensureNotNull(this.table)[i_0][0];
        newTable[i_0][1] = ensureNotNull(this.table)[i_0][1];
      }
    }
    this.table = newTable;
    return index;
  };
  VLC.prototype.getVLC2_poz3xs$ = function (br, maxDepth) {
    if (maxDepth === void 0)
      maxDepth = 1;
    var nbBits;
    var index = br.peek_za3lpa$(this.bits);
    var code = ensureNotNull(this.table)[index][0];
    var n = ensureNotNull(this.table)[index][1];
    if (maxDepth > 1 && n < 0) {
      br.skip_za3lpa$(this.bits);
      nbBits = -n;
      index = br.peek_za3lpa$(nbBits) + code | 0;
      code = ensureNotNull(this.table)[index][0];
      n = ensureNotNull(this.table)[index][1];
      if (maxDepth > 2 && n < 0) {
        br.skip_za3lpa$(nbBits);
        nbBits = -n;
        index = br.peek_za3lpa$(nbBits) + code | 0;
        code = ensureNotNull(this.table)[index][0];
        n = ensureNotNull(this.table)[index][1];
      }
    }
    br.skip_za3lpa$(n);
    return code;
  };
  function VLC$Companion() {
    VLC$Companion_instance = this;
    this.log_0 = Atrac3plusDecoder$Companion_getInstance().log;
  }
  VLC$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var VLC$Companion_instance = null;
  function VLC$Companion_getInstance() {
    if (VLC$Companion_instance === null) {
      new VLC$Companion();
    }
    return VLC$Companion_instance;
  }
  VLC.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VLC',
    interfaces: []
  };
  Object.defineProperty(Atrac, 'Companion', {
    get: Atrac$Companion_getInstance
  });
  var package$com = _.com || (_.com = {});
  var package$soywiz = package$com.soywiz || (package$com.soywiz = {});
  var package$korau = package$soywiz.korau || (package$soywiz.korau = {});
  var package$format = package$korau.format || (package$korau.format = {});
  var package$atrac3plus = package$format.atrac3plus || (package$format.atrac3plus = {});
  package$atrac3plus.Atrac = Atrac;
  Atrac3plusData1.prototype.Atrac3pSpecCodeTab = Atrac3plusData1$Atrac3pSpecCodeTab;
  Object.defineProperty(package$atrac3plus, 'Atrac3plusData1', {
    get: Atrac3plusData1_getInstance
  });
  Object.defineProperty(package$atrac3plus, 'Atrac3plusData2', {
    get: Atrac3plusData2_getInstance
  });
  $$importsForInline$$['klogger-js'] = $module$klogger_js;
  Object.defineProperty(Atrac3plusDecoder, 'Companion', {
    get: Atrac3plusDecoder$Companion_getInstance
  });
  package$atrac3plus.Atrac3plusDecoder = Atrac3plusDecoder;
  $$importsForInline$$['kmem-js'] = $module$kmem_js;
  Object.defineProperty(Atrac3plusDsp, 'Companion', {
    get: Atrac3plusDsp$Companion_getInstance
  });
  package$atrac3plus.Atrac3plusDsp = Atrac3plusDsp;
  package$atrac3plus.AtracGainInfo = AtracGainInfo;
  package$atrac3plus.Channel = Channel;
  Object.defineProperty(ChannelUnit, 'Companion', {
    get: ChannelUnit$Companion_getInstance
  });
  package$atrac3plus.ChannelUnit = ChannelUnit;
  ChannelUnitContext.IPQFChannelContext = ChannelUnitContext$IPQFChannelContext;
  package$atrac3plus.ChannelUnitContext = ChannelUnitContext;
  package$atrac3plus.Context = Context;
  package$atrac3plus.WaveEnvelope = WaveEnvelope;
  package$atrac3plus.WaveParam = WaveParam;
  package$atrac3plus.WaveSynthParams = WaveSynthParams;
  package$atrac3plus.WavesData = WavesData;
  Atrac3PlusUtil.prototype.LoopInfo = Atrac3PlusUtil$LoopInfo;
  Atrac3PlusUtil.prototype.AtracFileInfo = Atrac3PlusUtil$AtracFileInfo;
  var package$util = package$atrac3plus.util || (package$atrac3plus.util = {});
  Object.defineProperty(package$util, 'Atrac3PlusUtil', {
    get: Atrac3PlusUtil_getInstance
  });
  var package$util_0 = package$format.util || (package$format.util = {});
  Object.defineProperty(package$util_0, 'Arrays', {
    get: Arrays_getInstance
  });
  package$util_0.BitBuffer = BitBuffer;
  package$util_0.BitReader = BitReader;
  Object.defineProperty(package$util_0, 'CodecUtils', {
    get: CodecUtils_getInstance
  });
  Object.defineProperty(package$util_0, 'Dct32', {
    get: Dct32_getInstance
  });
  Object.defineProperty(FFT, 'Companion', {
    get: FFT$Companion_getInstance
  });
  package$util_0.FFT = FFT;
  Object.defineProperty(package$util_0, 'FloatDSP', {
    get: FloatDSP_getInstance
  });
  package$util_0.IBitReader = IBitReader;
  package$util_0.IMemory = IMemory;
  package$util_0.String_format_61zpoe$ = String_format;
  package$util_0.String_format_98gap4$ = String_format_0;
  package$util_0.signExtend_vux9f0$ = signExtend_0;
  Object.defineProperty(package$util_0, 'SineWin', {
    get: SineWin_getInstance
  });
  Object.defineProperty(VLC, 'Companion', {
    get: VLC$Companion_getInstance
  });
  package$util_0.VLC = VLC;
  Kotlin.defineModule('korau-atrac3plus-js', _);
  return _;
}));

//# sourceMappingURL=korau-atrac3plus-js.js.map
